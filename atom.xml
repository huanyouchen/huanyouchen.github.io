<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻悠尘的小窝</title>
  
  <subtitle>The quieter you become,the more you are able to hear.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huanyouchen.github.io/"/>
  <updated>2020-06-26T12:24:30.777Z</updated>
  <id>http://huanyouchen.github.io/</id>
  
  <author>
    <name>幻悠尘</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用iTerm2和oh-my-zsh美化Mac终端</title>
    <link href="http://huanyouchen.github.io/2020/06/26/mac-beautify-terminal-based-on-iTerm2-oh-my-zsh/"/>
    <id>http://huanyouchen.github.io/2020/06/26/mac-beautify-terminal-based-on-iTerm2-oh-my-zsh/</id>
    <published>2020-06-25T16:00:00.000Z</published>
    <updated>2020-06-26T12:24:30.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最终效果图："><a href="#最终效果图：" class="headerlink" title="最终效果图："></a>最终效果图：</h3><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2020-06-26-mac-terminal-beautiful.png" alt="美化后的终端" style="zoom:50%;" /><p>需要安装的清单有：</p><ul><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></li><li>iTerm2的主题：<a href="https://draculatheme.com/iterm/" target="_blank" rel="noopener">Dracula</a></li><li><a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh my zsh</a></li><li>ohmyzsh主题：<a href="https://github.com/denysdovhan/spaceship-prompt" target="_blank" rel="noopener">Spaceship</a></li><li><a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">Powerline fonts字体</a></li><li>一些插件和壁纸</li></ul><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ol><li>安装iTerm2，然后依次打开 Preferences-Appearance-General-Theme，选择Minimal。</li><li>下载安装Dracula主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/dracula/iterm.git</span></span><br></pre></td></tr></table></figure><p>​    然后按照官网描述的步骤安装即可，完成后：</p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2020-06-26-item2-color-setting.png" alt="Dracula主题设置" style="zoom:50%;" /><ol start="3"><li><p>设置背景图片，依次打开iTerm2-Preferences-Profiles-windows-Background Image，选择enable，然后选择自己喜欢的图片，我选择的是漫画《鬼刀》里的一张高清图片，设置图片的背景透明度可以拖动Blending旁边的滑动条实现。图片资源地址<a href="https://zhuanlan.zhihu.com/p/111568154" target="_blank" rel="noopener">点击这里</a>。</p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2020-06-26-iTerm2-bgimage.jpg" alt="iTerm2背景图片" style="zoom:50%;" /></li></ol><ol start="4"><li><p>设置显示信息。依次打开iTerm2-Preferences–Session，勾选Status bar enable，Configure Status Bar，把上面的一些功能拖动到下面的框框里即可。我选择了当前文件夹，网速和搜索。打开Preferences-Window-Window custom title，填入想要的标题，我填的是iMac。</p></li><li><p>将默认shell设为zsh，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br><span class="line">echo $SHELL</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出 /bin/zsh</span></span><br></pre></td></tr></table></figure><p>然后安装oh my zsh，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure></li><li><p>安装<strong>Spaceship</strong> 主题，首先按照官网给的步骤下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/denysdovhan/spaceship-prompt.git "$ZSH_CUSTOM/themes/spaceship-prompt"</span><br><span class="line"></span><br><span class="line">ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"</span><br></pre></td></tr></table></figure><p>然后打开<code>~/.zshrc</code>，将ZSH_THEME修改为<code>ZSH_THEME=&quot;spaceship&quot;</code>。最后<code>source ~/.zshrc</code>重新加载配置文件。</p></li><li><p>下载Powerline fonts：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span></span></span><br><span class="line">git clone https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> install</span></span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> clean-up a bit</span></span><br><span class="line">cd ..</span><br><span class="line">rm -rf fonts</span><br></pre></td></tr></table></figure><p>设置字体，依次打开iTerm2-Preferences-Text-Font，我选择的是Fira Mono for Powerline字体。</p></li><li><p>安装插件<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="noopener">zsh-syntax-highlighting</a>和<a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener">zsh-autosuggestions</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>然后在<code>~/.zshrc</code>中，添加插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Add wisely, as too many plugins slow down shell startup.</span><br><span class="line">plugins&#x3D;(git z osx extract zsh-syntax-highlighting zsh-autosuggestions)</span><br></pre></td></tr></table></figure><p>其中，z，osx，extract是oh-my-zsh自带的插件，可以选择添加。添加完成后，再次执行<code>source ~/.zshrc</code></p></li></ol><p>​    至此，美化过程结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最终效果图：&quot;&gt;&lt;a href=&quot;#最终效果图：&quot; class=&quot;headerlink&quot; title=&quot;最终效果图：&quot;&gt;&lt;/a&gt;最终效果图：&lt;/h3&gt;&lt;img src=&quot;https://huanyouchen-1252081928.cos.ap-shanghai.
      
    
    </summary>
    
    
      <category term="踩坑记录" scheme="http://huanyouchen.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Mac" scheme="http://huanyouchen.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>2020年的重新开始</title>
    <link href="http://huanyouchen.github.io/2020/06/25/2020-new-page/"/>
    <id>http://huanyouchen.github.io/2020/06/25/2020-new-page/</id>
    <published>2020-06-24T16:00:00.000Z</published>
    <updated>2020-06-25T13:13:15.975Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写博客了</p><p>2020年，发生了很多事情 </p><p>现在已经大半年过去了 </p><p>重新开始吧，我的小窝还是不想丢掉的 ：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有写博客了&lt;/p&gt;
&lt;p&gt;2020年，发生了很多事情 &lt;/p&gt;
&lt;p&gt;现在已经大半年过去了 &lt;/p&gt;
&lt;p&gt;重新开始吧，我的小窝还是不想丢掉的 ：）&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="生活杂记" scheme="http://huanyouchen.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杭州" scheme="http://huanyouchen.github.io/tags/%E6%9D%AD%E5%B7%9E/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu下zip文件解压后中文乱码问题</title>
    <link href="http://huanyouchen.github.io/2019/11/24/Solve-the-problem-of-Chinese-garbled-after-unpacking-zip-file-under-ubuntu/"/>
    <id>http://huanyouchen.github.io/2019/11/24/Solve-the-problem-of-Chinese-garbled-after-unpacking-zip-file-under-ubuntu/</id>
    <published>2019-11-23T16:00:00.000Z</published>
    <updated>2019-11-24T03:38:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>系统：ubuntu 18.04</p><p>下载一个zip压缩的数据文件，打开后文件名都是乱码，比如这样的：  ╡┌4╒┬╩╡└²-╖╓╬÷╜ß╣√.xlsx </p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>zip格式中并没有指定编码格式，Windows下生成的zip文件中的编码是GBK/GB2312等，Linux下的默认编码是UTF8。因此，导致这些zip文件在Linux下解压时出现乱码问题。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>方法来自于知乎Latm Ake：<a href="https://www.zhihu.com/question/20523036/answer/35225920" target="_blank" rel="noopener">https://www.zhihu.com/question/20523036/answer/35225920</a></p><p>安装7zip和convmv：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install p7zip convmv</span><br></pre></td></tr></table></figure><p>安装完后，用7za和convmv两个命令完成解压缩任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANG&#x3D;C 7za x your-zip-file.zip</span><br><span class="line">convmv -f GBK -t utf8 --notest -r .</span><br></pre></td></tr></table></figure><p>第一条命令用于解压缩，而LANG=C表示以US-ASCII这样的编码输出文件名，如果没有这个语言设置，它同样会输出乱码，只不过是UTF8格式的乱码(convmv会忽略这样的乱码)。第二条命令是将GBK编码的文件名转化为UTF8编码，-r表示递归访问目录，即对当前目录中所有文件进行转换。</p><p>解压完成后的情况：</p><p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2019-2-28-zip-jieya-luanma.png" alt="zip解压乱码解决"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统：ubuntu 18.04&lt;/p&gt;
&lt;p&gt;下载一个zip压缩的数据文件，打开后文件名都是乱码，比如这样的：  ╡┌4╒┬╩╡└²-╖╓╬÷╜ß╣√.xlsx &lt;/p&gt;
&lt;h3 id=&quot;原因：&quot;&gt;&lt;a href=&quot;#原因：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="踩坑记录" scheme="http://huanyouchen.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="乱码" scheme="http://huanyouchen.github.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
      <category term="Ubuntu" scheme="http://huanyouchen.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>解决pip install安装非常慢[Errno 101] 网络不可达问题</title>
    <link href="http://huanyouchen.github.io/2019/11/21/pip-install-package-very-slow/"/>
    <id>http://huanyouchen.github.io/2019/11/21/pip-install-package-very-slow/</id>
    <published>2019-11-20T16:00:00.000Z</published>
    <updated>2019-11-21T05:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用pip安装seaborn提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> sudo python3.5 -m pip install seaborn</span><br><span class="line"></span><br><span class="line">Collecting seaborn</span><br><span class="line"></span><br><span class="line">  WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;NewConnectionError(&#39;&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7fb25d444fd0&gt;: Failed to establish a new connection: [Errno 101] 网络不可达&#39;,)&#39;: &#x2F;packages&#x2F;a8&#x2F;76&#x2F;220ba4420459d9c4c9c9587c6ce607bf56c25b3d3d2de62056efe482dadc&#x2F;seaborn-0.9.0-py3-none-any.whl</span><br></pre></td></tr></table></figure><p> 尝试加入<code>default-time=100</code>这个参数，提示：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo python3.5 -m pip --default-time&#x3D;100 install seaborn</span><br><span class="line"></span><br><span class="line">Collecting seaborn</span><br><span class="line">  WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;100.0)&quot;,)&#39;: &#x2F;packages&#x2F;a8&#x2F;76&#x2F;220ba4420459d9c4c9c9587c6ce607bf56c25b3d3d2de62056efe482dadc&#x2F;seaborn-0.9.0-py3-none-any.whl</span><br></pre></td></tr></table></figure></p><p>等了半天还是安装不了</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在pip后面加入<code>-i</code>参数，比如：<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3.5 -m pip --default-time&#x3D;100 install seaborn -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><p>下载的飞快～</p><p>据说可以一劳永逸的方法，但我还没试过，过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.pip</span><br><span class="line">cd ~&#x2F;.pip</span><br><span class="line">touch pip.conf</span><br><span class="line">gedit pip.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host &#x3D; pypi.douban.com</span><br><span class="line"></span><br><span class="line">cat pip.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;使用pip安装seaborn提示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="踩坑记录" scheme="http://huanyouchen.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="pip" scheme="http://huanyouchen.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>基于Scrapy爬虫框架获取GitHub某用户全部仓库的信息</title>
    <link href="http://huanyouchen.github.io/2019/11/18/scrapy-get-someone-all-github-repositories/"/>
    <id>http://huanyouchen.github.io/2019/11/18/scrapy-get-someone-all-github-repositories/</id>
    <published>2019-11-17T16:00:00.000Z</published>
    <updated>2019-11-20T12:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容来自实验楼Scrapy 爬虫框架基础实践及挑战课程：<a href="https://www.shiyanlou.com/courses/1417" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/1417</a><br>源码：<a href="https://github.com/shiyanlou/louplus-dm/tree/v2/Answers/week1-challenge-05" target="_blank" rel="noopener">https://github.com/shiyanlou/louplus-dm/tree/v2/Answers/week1-challenge-05</a></p><p>使用方法：</p><ul><li>下载项目源码</li><li>打开spiders目录下的github_repositories_autonext文件，修改start_urls函数中的GitHub仓库所有者名字，如把<code>https://github.com/shiyanlou?tab=repositories</code>修改为<code>https://github.com/huanyouchen?tab=repositories</code></li><li>在项目目录下，执行<code>scrapy crawl github_repositories_autonext</code>命令</li><li>查看下载完成的csv文件内容</li></ul><h3 id="Scrapy的基本结构"><a href="#Scrapy的基本结构" class="headerlink" title="Scrapy的基本结构"></a>Scrapy的基本结构</h3><p>Scrapy结构图如下：</p><p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2019-11-18-scrapy-basic-jiegou.png" alt="Scrapy结构"></p><p>Scrapy 的组件包括：</p><ul><li>Scrapy Engine：处理系统数据流和事务的引擎。</li><li>Scheduler 和 Scheduler Middlewares：调度引擎发过来的请求。</li><li>Downloader 和 Downloader Middlewares：下载网页内容的下载器。</li><li>Spider ：爬虫系统，处理域名解析规则及网页解析。</li></ul><p>Scrapy 的基本用法包括下面几个步骤：</p><ul><li>初始化 Scrapy 项目。</li><li>实现 Item，用来存储提取信息的容器类。</li><li>实现 Spider，用来爬取数据的爬虫类。</li><li>从 HTML 页面中提取数据到 Item。</li><li>实现 Item Pipeline 来保存 Item 数据。</li></ul><h3 id="爬虫目标"><a href="#爬虫目标" class="headerlink" title="爬虫目标"></a>爬虫目标</h3><p>指定用户ID: shiyanlou</p><p>目标页面：<a href="https://github.com/shiyanlou?tab=repositories" target="_blank" rel="noopener">https://github.com/shiyanlou?tab=repositories</a></p><p>获取指定GitHub 用户的所有仓库名称，以及仓库更新时间，将爬到的数据保存为csv文件。</p><h3 id="初始化-Scrapy-项目。"><a href="#初始化-Scrapy-项目。" class="headerlink" title="初始化 Scrapy 项目。"></a>初始化 Scrapy 项目。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建爬虫演示目录</span><br><span class="line">mkdir scrapy-demo</span><br><span class="line">cd scrapy-demo</span><br><span class="line"></span><br><span class="line"># 初始化项目</span><br><span class="line">scrapy startproject get_github_repositories</span><br><span class="line">cd get_github_repositories&#x2F;</span><br><span class="line">scrapy genspider github_repositories github.com</span><br></pre></td></tr></table></figure><p>其中，爬虫项目名称是<code>get_github_repositories</code>， 爬虫名称是<code>github_repositories</code>。</p><h3 id="实现-Item，用来存储提取信息的容器类。"><a href="#实现-Item，用来存储提取信息的容器类。" class="headerlink" title="实现 Item，用来存储提取信息的容器类。"></a>实现 Item，用来存储提取信息的容器类。</h3><p>由于爬虫目标信息是要获取每个仓库的名称和更新时间，因此在Item中写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetGithubRepositoriesItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    repo_name = scrapy.Field()</span><br><span class="line">    update_time = scrapy.Field()</span><br></pre></td></tr></table></figure><h3 id="实现-Spider，用来爬取数据的爬虫类。"><a href="#实现-Spider，用来爬取数据的爬虫类。" class="headerlink" title="实现 Spider，用来爬取数据的爬虫类。"></a>实现 Spider，用来爬取数据的爬虫类。</h3><p>分析目标页面的结构，找出需要的仓库名字和时间，</p><p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2019-11-18-scrapy-github-cangku.png" alt="github 个人仓库页面"></p><p>可以看出，每个仓库名字和更新时间，都是在ul-&gt;li列表下，其中，名字在属性为<code>itemprop=&#39;name codeRepository&#39;</code>的a标签下，更新时间在<code>relative-time</code>中，分别使用xpath解析可以得到其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    repos = response.xpath(<span class="string">'//li[@itemprop="owns"]'</span>)</span><br><span class="line">    <span class="keyword">for</span> repo <span class="keyword">in</span> repos:</span><br><span class="line">         item = GetGithubRepositoriesItem()</span><br><span class="line">         item[<span class="string">'repo_name'</span>] = repo.xpath(<span class="string">".//a[@itemprop='name codeRepository']/text()"</span>).extract_first().strip()</span><br><span class="line">         item[<span class="string">'update_time'</span>] = repo.xpath(<span class="string">".//relative-time/@datetime"</span>).extract_first()</span><br><span class="line"></span><br><span class="line">         <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>得到第一页内容后，需要往后翻页，得到后面几页所有的仓库信息。点击下一页，观察URL发现，URL内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;shiyanlou?after&#x3D;Y3Vyc29yOnYyOpK5MjAxNC0xMC0xM1QxMToxNTo0NCswODowMM4Bf5tW&amp;tab&#x3D;repositories</span><br></pre></td></tr></table></figure><p>下一页的地址通过after参数控制。关键是获取after参数的内容，然后加入到url里，就可以得到下一页的内容。</p><p>先介绍第一种方法，手动复制所有的页面的after参数，放在列表中，然后遍历即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_urls</span><span class="params">(self)</span>:</span></span><br><span class="line">    url_temp =  <span class="string">'https://github.com/shiyanlou?after=&#123;&#125;&amp;tab=repositories'</span></span><br><span class="line">    after = [</span><br><span class="line">        <span class="string">""</span>,   <span class="comment"># 第一页没有after参数</span></span><br><span class="line">        <span class="string">"Y3Vyc29yOnYyOpK5MjAxNy0wNi0wN1QwODozMjo1OCswODowMM4FkpUU"</span>,</span><br><span class="line">        <span class="string">"Y3Vyc29yOnYyOpK5MjAxNS0wMi0xMFQxMzowODo0NyswODowMM4B0o4T"</span>,</span><br><span class="line">        <span class="string">"Y3Vyc29yOnYyOpK5MjAxNC0xMi0wN1QyMjoxMTozNSswODowMM4Bpo1E"</span>,</span><br><span class="line">        <span class="string">"Y3Vyc29yOnYyOpK5MjAxNC0xMC0xM1QxMToxNTo0NCswODowMM4Bf5tW"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (url_temp.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> after)</span><br></pre></td></tr></table></figure><h3 id="实现-Item-Pipeline-来保存-Item-数据"><a href="#实现-Item-Pipeline-来保存-Item-数据" class="headerlink" title="实现 Item Pipeline 来保存 Item 数据"></a>实现 Item Pipeline 来保存 Item 数据</h3><p>把爬到的数据通过Pandas保存为csv文件，需要在爬虫启动和关闭时，分别设置相应的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetGithubRepositoriesPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 读取 item 数</span></span><br><span class="line">        repo_name = item[<span class="string">'repo_name'</span>]</span><br><span class="line">        update_time = item[<span class="string">'update_time'</span>]</span><br><span class="line">        <span class="comment"># 每条数据组成临时 df_temp</span></span><br><span class="line">        df_temp = pd.DataFrame([[repo_name, update_time]], columns=[<span class="string">'repo_name'</span>, <span class="string">'update_time'</span>])</span><br><span class="line">        <span class="comment"># 将 df_temp 合并到 df</span></span><br><span class="line">        self.df = self.df.append(df_temp, ignore_index=<span class="literal">True</span>).sort_values(by=[<span class="string">'update_time'</span>], ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#当爬虫启动时</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 新建一个带列名的空白 df</span></span><br><span class="line">        self.df = pd.DataFrame(columns=[<span class="string">'repo_name'</span>, <span class="string">'update_time'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当爬虫关闭时</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 将 df 存储为 csv 文件</span></span><br><span class="line">        pd.DataFrame.to_csv(self.df, <span class="string">"../shiyanlou_repo.csv"</span>)</span><br></pre></td></tr></table></figure><p>最后，在setting设置中，把下面内容的注释取消</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'get_github_repositories.pipelines.GetGithubRepositoriesPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并把ROBOTSTXT_OBEY改为False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="执行爬虫程序"><a href="#执行爬虫程序" class="headerlink" title="执行爬虫程序"></a>执行爬虫程序</h3><p>在爬虫项目目录，执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl github_repositories</span><br></pre></td></tr></table></figure><hr><h3 id="第二种方法，自动获取after参数"><a href="#第二种方法，自动获取after参数" class="headerlink" title="第二种方法，自动获取after参数"></a>第二种方法，自动获取after参数</h3><p>在项目目录，新建另一个爬虫，实现自动获取after参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider github_repositories_autonext github.com</span><br></pre></td></tr></table></figure><p>通过Chrome的开发者工具，查看next按钮对应的HTML代码，</p><p>当有下一页时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BtnGroup"</span> <span class="attr">data-test-selector</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline BtnGroup-item"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline BtnGroup-item"</span> <span class="attr">href</span>=<span class="string">"https://github.com/shiyanlou?after=Y3Vyc29yOnYyOpK5MjAxNy0wNi0wN1QwODozMjo1OCswODowMM4FkpUU<span class="symbol">&amp;amp;</span>tab=repositories"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BtnGroup"</span> <span class="attr">data-test-selector</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline BtnGroup-item"</span> <span class="attr">href</span>=<span class="string">"https://github.com/shiyanlou?before=Y3Vyc29yOnYyOpK5MjAxNy0wNi0wN1QwODozMDowOSswODowMM4FkpM6<span class="symbol">&amp;amp;</span>tab=repositories"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline BtnGroup-item"</span> <span class="attr">href</span>=<span class="string">"https://github.com/shiyanlou?after=Y3Vyc29yOnYyOpK5MjAxNS0wMi0xMFQxMzowODo0NyswODowMM4B0o4T<span class="symbol">&amp;amp;</span>tab=repositories"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当没有下一页时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"BtnGroup"</span> <span class="attr">data-test-selector</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline BtnGroup-item"</span> <span class="attr">href</span>=<span class="string">"https://github.com/shiyanlou?before=Y3Vyc29yOnYyOpK5MjAxNC0xMC0xMVQwNDowMDoyMiswODowMM4Bgd5Q<span class="symbol">&amp;amp;</span>tab=repositories"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline BtnGroup-item"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出：</p><ul><li>如果 Next 按钮没有被禁用，那么表示有下一页，下一页的after参数在a标签的href属性中</li><li>如果 Next 按钮被禁用，那么表示没有下一页，下一页的button的disabled属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> shiyanlou.items <span class="keyword">import</span> ShiyanlouItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GithubSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'github_next_page'</span></span><br><span class="line">    allowed_domains = [<span class="string">'github.com'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_urls</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">'https://github.com/shiyanlou?tab=repositories'</span>, )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        repos = response.xpath(<span class="string">'//li[@itemprop="owns"]'</span>)</span><br><span class="line">        <span class="keyword">for</span> repo <span class="keyword">in</span> repos:</span><br><span class="line">            item = ShiyanlouItem()</span><br><span class="line">            item[<span class="string">'repo_name'</span>] = repo.xpath(<span class="string">".//a[@itemprop='name codeRepository']/text()"</span>).extract_first().strip()</span><br><span class="line">            item[<span class="string">'update_time'</span>] = repo.xpath(<span class="string">".//relative-time/@datetime"</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果 Next 按钮没被禁用，那么表示有下一页</span></span><br><span class="line">        spans = response.css(<span class="string">'div.pagination span.disabled::text'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(spans) == <span class="number">0</span> <span class="keyword">or</span> spans[<span class="number">-1</span>].extract() != <span class="string">'Next'</span>:</span><br><span class="line">            next_url = response.css(<span class="string">'div.paginate-container a:last-child::attr(href)'</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> response.follow(next_url, callback=self.parse)</span><br></pre></td></tr></table></figure><p>在爬虫项目目录，执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl github_repositories_autonext</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文内容来自实验楼Scrapy 爬虫框架基础实践及挑战课程：&lt;a href=&quot;https://www.shiyanlou.com/courses/1417&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.shiyanlou.com/c
      
    
    </summary>
    
    
      <category term="网络爬虫" scheme="http://huanyouchen.github.io/categories/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://huanyouchen.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://huanyouchen.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>pip install nbextensions插件报错：ReadTimeoutError解决方法</title>
    <link href="http://huanyouchen.github.io/2019/11/14/pip-install-ReadTimeoutError/"/>
    <id>http://huanyouchen.github.io/2019/11/14/pip-install-ReadTimeoutError/</id>
    <published>2019-11-13T16:00:00.000Z</published>
    <updated>2019-11-15T13:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错描述"><a href="#报错描述" class="headerlink" title="报错描述"></a>报错描述</h3><p>今天再给Jupyter Notebook安装jupyter-contrib-nbextensions这个插件时，使用pip install报错，一大片姨妈红，报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise ReadTimeoutError(self._pool, None, &#39;Read timed out.&#39;)</span><br><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out.</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>把原来<code>pip install xxx</code>修改为<code>pip --default-timeout=100 install xxx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">报错的安装命令：</span></span><br><span class="line">sudo python3.5 -m pip install jupyter-contrib-nbextensions</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 顺利安装成功的命令：</span></span><br><span class="line">sudo python3.5 -m pip --default-timeout=100 install jupyter-contrib-nbextensions</span><br></pre></td></tr></table></figure><p>安装后提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchpadlib 1.10.6 requires testresources, which is not installed.</span><br></pre></td></tr></table></figure><p>继续pip install launchpadlib即可。</p><p>然后，执行下面命令用于安装javascript和css文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure><p>最后，再次Jupyter notebook打开即可看到nbextensions插件。</p><p>———-后续</p><p>在Nbextensions界面中，我选择了autopep8这个选项，第二天打开jupyter notebook时，又提示需要安装autopep8，于是再次pip安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3.5 -m pip install autopep8</span><br></pre></td></tr></table></figure><p>顺利完成～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;报错描述&quot;&gt;&lt;a href=&quot;#报错描述&quot; class=&quot;headerlink&quot; title=&quot;报错描述&quot;&gt;&lt;/a&gt;报错描述&lt;/h3&gt;&lt;p&gt;今天再给Jupyter Notebook安装jupyter-contrib-nbextensions这个插件时，使用pip 
      
    
    </summary>
    
    
      <category term="踩坑记录" scheme="http://huanyouchen.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="jupyter-notebook" scheme="http://huanyouchen.github.io/tags/jupyter-notebook/"/>
    
      <category term="pip" scheme="http://huanyouchen.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>睡不着的烦恼</title>
    <link href="http://huanyouchen.github.io/2019/11/13/shui-bu-zhuo/"/>
    <id>http://huanyouchen.github.io/2019/11/13/shui-bu-zhuo/</id>
    <published>2019-11-12T16:00:00.000Z</published>
    <updated>2019-11-13T08:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近老是睡不着觉。。</p><p>昨天晚上回宿舍躺在床上，闭上眼睛，想要睡，可是翻来覆去一直没有进入梦乡</p><p>躺着的时候会想这个，那个，一会想想教务处助理这个工作，怎么交给后面的人来做，怎么怎么说。。一会想小论文怎么还没录用，，到时候延毕了怎么跟家里说，，一会又想等有工作了，想要买华为的mate30 pro 5G的手机，可是自己工作还没有，还要找工作，，找工作，，</p><p>想想这，，，想想那，，，翻过来，，翻过去</p><p>呃，就凌晨4点多了，，</p><p>室友也还没睡着，相约早上6点去吃早饭，哈哈哈</p><p>然后到了大概6点多了吧，，就是处于一种半梦半醒的状态，好像身体在做梦，脑子还知道自己没有完全睡着，知道自己在做梦，对外界的声音还很敏感</p><p>过了一会室友起床了，，我也把自己从梦里拉出来，，穿上衣服脸也没洗就去食堂了</p><p>食堂的早饭刚做好，，买了大肉饼，三个煎饺，一杯豆浆，，热乎乎的早饭很久没吃到了</p><p>吃完回来再睡觉，本来以为这次终于可以睡着了，，</p><p>结果8点同学就给我发微信，说是他有面试通知了，问我有没有，要不要一起过去面试(因为5号我们一起去的招聘会，投的简历)</p><p>我说我没有发通知，，然后又聊了一会，，</p><p>再想要睡的时候，自己又睡不着了，就是完全没有了刚吃完早饭的那点困意，很清醒，又到了翻来覆去的环节</p><p>拿起手机看了看微信公众号和招聘类的app，一直到11点多，点了外卖吃，</p><p>吃完躺床上再给自己半小时的时间看能不能中午睡着</p><p>最后还是没能睡着</p><p>算了算了，，起床到实验室</p><p>在实验室处理一点杂事，然后开始学习Pandas，，结果神奇的事情发生了</p><p>睡意汹涌而来！！</p><p>脑袋沉甸甸的，眼皮快睁不开了，学习也学不下去，就想写写博客了</p><p>现在已经是下午4点了，再过一会吃个晚饭，晚上早点睡。。</p><p>希望今晚能好好睡一觉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近老是睡不着觉。。&lt;/p&gt;
&lt;p&gt;昨天晚上回宿舍躺在床上，闭上眼睛，想要睡，可是翻来覆去一直没有进入梦乡&lt;/p&gt;
&lt;p&gt;躺着的时候会想这个，那个，一会想想教务处助理这个工作，怎么交给后面的人来做，怎么怎么说。。一会想小论文怎么还没录用，，到时候延毕了怎么跟家里说，，一会又
      
    
    </summary>
    
    
      <category term="生活杂记" scheme="http://huanyouchen.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杭州" scheme="http://huanyouchen.github.io/tags/%E6%9D%AD%E5%B7%9E/"/>
    
  </entry>
  
  <entry>
    <title>sql常见面试50题练习</title>
    <link href="http://huanyouchen.github.io/2019/11/07/sql-exercises-50/"/>
    <id>http://huanyouchen.github.io/2019/11/07/sql-exercises-50/</id>
    <published>2019-11-06T16:00:00.000Z</published>
    <updated>2019-11-10T11:59:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上流行的sql常见面试50题练习。本文使用的数据库为MySQL 8.0。</p><h3 id="测试数据介绍"><a href="#测试数据介绍" class="headerlink" title="测试数据介绍"></a>测试数据介绍</h3><p>学生表 Student(SId,Sname,Sage,Ssex)。–SId 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别</p><p>课程表 Course(CId,Cname,TId) –CId –课程编号,Cname 课程名称,TId 教师编号</p><p>教师表 Teacher(TId,Tname) –TId 教师编号,Tname 教师姓名</p><p>成绩表 Score(SId,CId,score) –SId 学生编号,CId 课程编号,score 分数</p><a id="more"></a><p>测试数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="comment">--学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Student`</span>(</span><br><span class="line"><span class="string">`SId`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="string">`Sname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line"><span class="string">`Sage`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line"><span class="string">`Ssex`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`s_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--课程表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Course`</span>(</span><br><span class="line"><span class="string">`CId`</span>  <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="string">`Cname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line"><span class="string">`TId`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`c_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--教师表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Teacher`</span>(</span><br><span class="line"><span class="string">`Td`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="string">`Tname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`t_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Score`</span>(</span><br><span class="line"><span class="string">`SId`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="string">`CId`</span>  <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="string">`score`</span> <span class="built_in">INT</span>(<span class="number">3</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`s_id`</span>,<span class="string">`c_id`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入学生表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'赵雷'</span> , <span class="string">'1990-01-01'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'钱电'</span> , <span class="string">'1990-12-21'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'孙风'</span> , <span class="string">'1990-12-20'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'李云'</span> , <span class="string">'1990-12-06'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'周梅'</span> , <span class="string">'1991-12-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'吴兰'</span> , <span class="string">'1992-01-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'郑竹'</span> , <span class="string">'1989-01-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'08'</span> , <span class="string">'王菊'</span> , <span class="string">'1990-01-20'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'09'</span> , <span class="string">'张三'</span> , <span class="string">'2017-12-20'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'10'</span> , <span class="string">'李四'</span> , <span class="string">'2017-12-25'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'11'</span> , <span class="string">'李四'</span> , <span class="string">'2012-06-06'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'12'</span> , <span class="string">'赵六'</span> , <span class="string">'2013-06-13'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'13'</span> , <span class="string">'孙七'</span> , <span class="string">'2014-06-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="comment">--课程表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'语文'</span> , <span class="string">'02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'数学'</span> , <span class="string">'01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'英语'</span> , <span class="string">'03'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--教师表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'李四'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'王五'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--成绩表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'02'</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'03'</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'01'</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'02'</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'02'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'01'</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'02'</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'03'</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'01'</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'02'</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'01'</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'03'</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'02'</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'03'</span> , <span class="number">98</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--Student表内容：</span></span><br><span class="line">mysql&gt; SELECT * FROM Student ORDER BY SId;</span><br><span class="line">+<span class="comment">------+--------+---------------------+------+</span></span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+<span class="comment">------+--------+---------------------+------+</span></span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |</span><br><span class="line">| 09   | 张三   | 2017-12-20 00:00:00 | 女   |</span><br><span class="line">| 10   | 李四   | 2017-12-25 00:00:00 | 女   |</span><br><span class="line">| 11   | 李四   | 2012-06-06 00:00:00 | 女   |</span><br><span class="line">| 12   | 赵六   | 2013-06-13 00:00:00 | 女   |</span><br><span class="line">| 13   | 孙七   | 2014-06-01 00:00:00 | 女   |</span><br><span class="line">+<span class="comment">------+--------+---------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--分数表内容：</span></span><br><span class="line">mysql&gt; SELECT * FROM Score ORDER BY SId, CId, score DESC;</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 01   | 02   |  90.0 |</span><br><span class="line">| 01   | 03   |  99.0 |</span><br><span class="line">| 02   | 01   |  70.0 |</span><br><span class="line">| 02   | 02   |  60.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 04   | 01   |  50.0 |</span><br><span class="line">| 04   | 02   |  30.0 |</span><br><span class="line">| 04   | 03   |  20.0 |</span><br><span class="line">| 05   | 01   |  76.0 |</span><br><span class="line">| 05   | 02   |  87.0 |</span><br><span class="line">| 06   | 01   |  31.0 |</span><br><span class="line">| 06   | 03   |  34.0 |</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">| 07   | 03   |  98.0 |</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--课程表内容：</span></span><br><span class="line">mysql&gt; SELECT * FROM Course ORDER BY CId;</span><br><span class="line">+<span class="comment">------+--------+------+</span></span><br><span class="line">| CId  | Cname  | TId  |</span><br><span class="line">+<span class="comment">------+--------+------+</span></span><br><span class="line">| 01   | 语文   | 02   |</span><br><span class="line">| 02   | 数学   | 01   |</span><br><span class="line">| 03   | 英语   | 03   |</span><br><span class="line">+<span class="comment">------+--------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--教师表内容：</span></span><br><span class="line">mysql&gt; SELECT * FROM Teacher;</span><br><span class="line">+<span class="comment">------+--------+</span></span><br><span class="line">| TId  | Tname  |</span><br><span class="line">+<span class="comment">------+--------+</span></span><br><span class="line">| 01   | 张三   |</span><br><span class="line">| 02   | 李四   |</span><br><span class="line">| 03   | 王五   |</span><br><span class="line">+<span class="comment">------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="1-查询”-01-“课程比”-02-“课程成绩高的学生的信息及课程分数"><a href="#1-查询”-01-“课程比”-02-“课程成绩高的学生的信息及课程分数" class="headerlink" title="1. 查询” 01 “课程比” 02 “课程成绩高的学生的信息及课程分数"></a>1. 查询” 01 “课程比” 02 “课程成绩高的学生的信息及课程分数</h3><p>解题思路：</p><p>首先找出选了01课程和02课程的学生及分数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> a.SId = b.SId;</span><br></pre></td></tr></table></figure><p>得到信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| SId  | CId  | score | SId  | CId  | score |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 | 01   | 02   |  90.0 |</span><br><span class="line">| 02   | 01   |  70.0 | 02   | 02   |  60.0 |</span><br><span class="line">| 03   | 01   |  80.0 | 03   | 02   |  80.0 |</span><br><span class="line">| 04   | 01   |  50.0 | 04   | 02   |  30.0 |</span><br><span class="line">| 05   | 01   |  76.0 | 05   | 02   |  87.0 |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br></pre></td></tr></table></figure><p>然后把这个表和学生信息表连接:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">    ) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> s.SId = a.SId</span><br><span class="line"><span class="keyword">AND</span> a.SId = b.SId;</span><br></pre></td></tr></table></figure><p>得到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+------+-------+------+------+-------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | SId  | CId  | score | SId  | CId  | score |</span><br><span class="line">+------+--------+---------------------+------+------+------+-------+------+------+-------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   | 01   | 01   |  80.0 | 01   | 02   |  90.0 |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   | 02   | 01   |  70.0 | 02   | 02   |  60.0 |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   | 03   | 01   |  80.0 | 03   | 02   |  80.0 |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   | 04   | 01   |  50.0 | 04   | 02   |  30.0 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   | 05   | 01   |  76.0 | 05   | 02   |  87.0 |</span><br><span class="line">+------+--------+---------------------+------+------+------+-------+------+------+-------+</span><br></pre></td></tr></table></figure><p>最后使用where条件，过滤出01课程分数大于02课程分数的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.*, a.score <span class="keyword">AS</span> <span class="string">"01课程成绩"</span>, b.score <span class="keyword">AS</span> <span class="string">"02课程成绩"</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">    ) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> s.SId = a.SId</span><br><span class="line"><span class="keyword">AND</span> a.SId = b.SId</span><br><span class="line"><span class="keyword">WHERE</span> a.score &gt; b.score;</span><br></pre></td></tr></table></figure><p>最终结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+----------------+----------------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | 01课程成绩     | 02课程成绩     |</span><br><span class="line">+------+--------+---------------------+------+----------------+----------------+</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |           70.0 |           60.0 |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |           50.0 |           30.0 |</span><br><span class="line">+------+--------+---------------------+------+----------------+----------------+</span><br></pre></td></tr></table></figure><h3 id="2-查询”-01-“课程比”-02-“课程成绩低的学生的信息及课程分数"><a href="#2-查询”-01-“课程比”-02-“课程成绩低的学生的信息及课程分数" class="headerlink" title="2. 查询” 01 “课程比” 02 “课程成绩低的学生的信息及课程分数"></a>2. 查询” 01 “课程比” 02 “课程成绩低的学生的信息及课程分数</h3><p>思路：与上一题类似<br>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.*, a.score <span class="keyword">AS</span> <span class="string">"01课程成绩"</span>, b.score <span class="keyword">AS</span> <span class="string">"02课程成绩"</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">    ) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> s.SId = a.SId</span><br><span class="line"><span class="keyword">AND</span> a.SId = b.SId</span><br><span class="line"><span class="keyword">WHERE</span> a.score &lt; b.score;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+----------------+----------------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | 01课程成绩     | 02课程成绩     |</span><br><span class="line">+------+--------+---------------------+------+----------------+----------------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |           80.0 |           90.0 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |           76.0 |           87.0 |</span><br><span class="line">+------+--------+---------------------+------+----------------+----------------+</span><br></pre></td></tr></table></figure><h3 id="3-查询同时选了”-01-“课程和”-02-“课程的情况"><a href="#3-查询同时选了”-01-“课程和”-02-“课程的情况" class="headerlink" title="3. 查询同时选了” 01 “课程和” 02 “课程的情况"></a>3. 查询同时选了” 01 “课程和” 02 “课程的情况</h3><p>解题思路：找出选了01课程的表a，找出选了02课程的表b，把这两表连接，其中学生SId相同。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score <span class="keyword">AS</span> <span class="string">"01课程成绩"</span></span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">    ) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score <span class="keyword">AS</span> <span class="string">"02课程成绩"</span></span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> a.SId = b.SId;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+------+----------------+------+------+----------------+</span><br><span class="line">| SId  | CId  | 01课程成绩     | SId  | CId  | 02课程成绩     |</span><br><span class="line">+------+------+----------------+------+------+----------------+</span><br><span class="line">| 01   | 01   |           80.0 | 01   | 02   |           90.0 |</span><br><span class="line">| 02   | 01   |           70.0 | 02   | 02   |           60.0 |</span><br><span class="line">| 03   | 01   |           80.0 | 03   | 02   |           80.0 |</span><br><span class="line">| 04   | 01   |           50.0 | 04   | 02   |           30.0 |</span><br><span class="line">| 05   | 01   |           76.0 | 05   | 02   |           87.0 |</span><br><span class="line">+------+------+----------------+------+------+----------------+</span><br></pre></td></tr></table></figure><h3 id="4-查询不存在”-01-“课程但存在”-02-“课程的情况"><a href="#4-查询不存在”-01-“课程但存在”-02-“课程的情况" class="headerlink" title="4. 查询不存在” 01 “课程但存在” 02 “课程的情况"></a>4. 查询不存在” 01 “课程但存在” 02 “课程的情况</h3><p>解题思路：找出选择了02课程的学生，这些学生不在(NOT IN)选了01课程的学生名单中。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score <span class="keyword">AS</span> <span class="string">"02课程成绩"</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">SId</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+------+----------------+</span><br><span class="line">| SId  | CId  | 02课程成绩     |</span><br><span class="line">+------+------+----------------+</span><br><span class="line">| 07   | 02   |           89.0 |</span><br><span class="line">+------+------+----------------+</span><br></pre></td></tr></table></figure><h3 id="5-查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息"><a href="#5-查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息" class="headerlink" title="5. 查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息"></a>5. 查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息</h3><p>解题思路：和4题类似，只是需要额外与Student表连接，找出学生信息</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.*, t.CId, t.score <span class="keyword">AS</span> <span class="string">"01课程成绩"</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> *</span><br><span class="line">        <span class="keyword">FROM</span> Score</span><br><span class="line">        <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">        <span class="keyword">AND</span> <span class="keyword">SId</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line">            <span class="keyword">FROM</span> Score</span><br><span class="line">            <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">        ) </span><br><span class="line">    )<span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">ON</span> s.SId = t.SId;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+----------------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | CId  | 01课程成绩     |</span><br><span class="line">+------+--------+---------------------+------+------+----------------+</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   | 01   |           31.0 |</span><br><span class="line">+------+--------+---------------------+------+------+----------------+</span><br></pre></td></tr></table></figure><h3 id="6-查询存在”-01-“课程但可能不存在”-02-“课程的情况-不存在时显示为null"><a href="#6-查询存在”-01-“课程但可能不存在”-02-“课程的情况-不存在时显示为null" class="headerlink" title="6. 查询存在” 01 “课程但可能不存在” 02 “课程的情况(不存在时显示为null)"></a>6. 查询存在” 01 “课程但可能不存在” 02 “课程的情况(不存在时显示为null)</h3><p>解题思路：找出选01课程的课程信息表a，找出选了02课程的课程信息表b，以表a为主表，使用LEFT JOIN连接，</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> *</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line">) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> *</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> a.SId = b.SId;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| SId  | CId  | score | SId  | CId  | score |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 | 01   | 02   |  90.0 |</span><br><span class="line">| 02   | 01   |  70.0 | 02   | 02   |  60.0 |</span><br><span class="line">| 03   | 01   |  80.0 | 03   | 02   |  80.0 |</span><br><span class="line">| 04   | 01   |  50.0 | 04   | 02   |  30.0 |</span><br><span class="line">| 05   | 01   |  76.0 | 05   | 02   |  87.0 |</span><br><span class="line">| 06   | 01   |  31.0 | NULL | NULL |  NULL |</span><br><span class="line">+------+------+-------+------+------+-------+</span><br></pre></td></tr></table></figure><h3 id="7-查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩"><a href="#7-查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩" class="headerlink" title="7. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩"></a>7. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</h3><p>解题思路：涉及到student表和score表，先把这两张表连接起来。因为要求每个学生的各科的平均成绩，因此对学生分组，设置分组条件为平均成绩大于等于 60 分。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname, <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(sc.score), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">'avg_score'</span></span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> st</span><br><span class="line"><span class="keyword">ON</span> sc.SId = st.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">HAVING</span> avg_score &gt;= <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+-----------+</span><br><span class="line">| SId  | Sname  | avg_score |</span><br><span class="line">+------+--------+-----------+</span><br><span class="line">| 01   | 赵雷   |     89.67 |</span><br><span class="line">| 02   | 钱电   |     70.00 |</span><br><span class="line">| 03   | 孙风   |     80.00 |</span><br><span class="line">| 05   | 周梅   |     81.50 |</span><br><span class="line">| 07   | 郑竹   |     93.50 |</span><br><span class="line">+------+--------+-----------+</span><br></pre></td></tr></table></figure><h3 id="8-查询所有课程成绩小于-60-分的同学的学生编号和学生姓名和成绩，如果没有成绩，则显示null"><a href="#8-查询所有课程成绩小于-60-分的同学的学生编号和学生姓名和成绩，如果没有成绩，则显示null" class="headerlink" title="8. 查询所有课程成绩小于 60 分的同学的学生编号和学生姓名和成绩，如果没有成绩，则显示null"></a>8. 查询所有课程成绩小于 60 分的同学的学生编号和学生姓名和成绩，如果没有成绩，则显示null</h3><p>解题思路：成绩小于60分为两种情况，一种是有成绩，且小于60;另一种是没有成绩,对于这些学生，TA的SId存在但是score不存在，因此使用student表 LEFT JOIN score表。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname, sc.score</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc </span><br><span class="line"><span class="keyword">ON</span> sc.SId = st.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> sc.score &lt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+-------+</span><br><span class="line">| SId  | Sname  | score |</span><br><span class="line">+------+--------+-------+</span><br><span class="line">| 04   | 李云   |  50.0 |</span><br><span class="line">| 04   | 李云   |  30.0 |</span><br><span class="line">| 06   | 吴兰   |  31.0 |</span><br><span class="line">| 04   | 李云   |  20.0 |</span><br><span class="line">| 06   | 吴兰   |  34.0 |</span><br><span class="line">| 09   | 张三   |  NULL |</span><br><span class="line">| 10   | 李四   |  NULL |</span><br><span class="line">| 11   | 李四   |  NULL |</span><br><span class="line">| 12   | 赵六   |  NULL |</span><br><span class="line">| 13   | 孙七   |  NULL |</span><br><span class="line">+------+--------+-------+</span><br></pre></td></tr></table></figure><h3 id="9-查询在-Score-表存在成绩的学生信息"><a href="#9-查询在-Score-表存在成绩的学生信息" class="headerlink" title="9. 查询在 Score 表存在成绩的学生信息"></a>9. 查询在 Score 表存在成绩的学生信息</h3><p>解题思路：有两种方法，一种是用IN, (Student表中的学生ID) IN (Score表中存在成绩的学生ID)。<br>第二种方法是把两个表连接，以Student表为主表，左连接Score，如果不存在成绩那么score为null，存在成绩，则score IS NOT NULL</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SId</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> score <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> st.*</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> st.SId=sc.SId </span><br><span class="line"><span class="keyword">WHERE</span> sc.score <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="10-查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩-没成绩的显示为-0"><a href="#10-查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩-没成绩的显示为-0" class="headerlink" title="10. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 0 )"></a>10. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 0 )</h3><p>解题思路：把student表和score表连接，其中部分学生没有成绩，即score=null。然后把学生分组，计算每个学生的选课总数和总成绩。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname, <span class="keyword">COUNT</span>(sc.CId) <span class="keyword">AS</span> <span class="string">'选课总数'</span>, <span class="keyword">CAST</span>(<span class="keyword">SUM</span>(<span class="keyword">COALESCE</span>(sc.score, <span class="number">0</span>)) <span class="keyword">as</span> <span class="built_in">real</span>) <span class="keyword">AS</span> <span class="string">'总成绩'</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname;</span><br></pre></td></tr></table></figure><p>这里使用了COALESCE()函数，返回参数中的第一个不为NULL的表达式（从左向右），如果传入的参数所有都是null，则返回null。</p><p>这个函数在这段sql语句中的作用是如果sc.score不是null，那么返回值是sc.score本身；如果sc.score是null，那么返回给定值0。</p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+--------------+-----------+</span><br><span class="line">| SId  | Sname  | 选课总数     | 总成绩    |</span><br><span class="line">+------+--------+--------------+-----------+</span><br><span class="line">| 01   | 赵雷   |            3 |       269 |</span><br><span class="line">| 02   | 钱电   |            3 |       210 |</span><br><span class="line">| 03   | 孙风   |            3 |       240 |</span><br><span class="line">| 04   | 李云   |            3 |       100 |</span><br><span class="line">| 05   | 周梅   |            2 |       163 |</span><br><span class="line">| 06   | 吴兰   |            2 |        65 |</span><br><span class="line">| 07   | 郑竹   |            2 |       187 |</span><br><span class="line">| 09   | 张三   |            0 |         0 |</span><br><span class="line">| 10   | 李四   |            0 |         0 |</span><br><span class="line">| 11   | 李四   |            0 |         0 |</span><br><span class="line">| 12   | 赵六   |            0 |         0 |</span><br><span class="line">| 13   | 孙七   |            0 |         0 |</span><br><span class="line">+------+--------+--------------+-----------+</span><br></pre></td></tr></table></figure><h3 id="11-查询”李”姓老师的数量"><a href="#11-查询”李”姓老师的数量" class="headerlink" title="11.查询”李”姓老师的数量"></a>11.查询”李”姓老师的数量</h3><p>解题思路：使用LIKE关键字。在MySQL中，通配符<code>%</code>可以替代0个或多个字符，通配符<code>-</code>替代一个字符。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(TId) <span class="keyword">AS</span> <span class="string">'李老师数量'</span></span><br><span class="line"><span class="keyword">FROM</span> Teacher</span><br><span class="line"><span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> <span class="string">'李%'</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">| 李老师数量      |</span><br><span class="line">+-----------------+</span><br><span class="line">|               1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><h3 id="12-查询学过「张三」老师授课的同学的信息"><a href="#12-查询学过「张三」老师授课的同学的信息" class="headerlink" title="12. 查询学过「张三」老师授课的同学的信息"></a>12. 查询学过「张三」老师授课的同学的信息</h3><p>解题思路：直接把四张表连接起来，使用教师名字作为WHERE条件过滤。或者把学生表和分数表连接，课程表和教师表连接，以课程ID作为过滤条件。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> st.*</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> C.CId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> C <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> T</span><br><span class="line">    <span class="keyword">ON</span> C.TId = T.TId</span><br><span class="line">    <span class="keyword">WHERE</span> T.Tname = <span class="string">'张三'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="13-查询没学过「张三」老师授课的同学的信息"><a href="#13-查询没学过「张三」老师授课的同学的信息" class="headerlink" title="13. 查询没学过「张三」老师授课的同学的信息"></a>13. 查询没学过「张三」老师授课的同学的信息</h3><p>解题思路：先把所有学过张三课程的学生id找出来，过程是把course表，teacher表和score表连接，由教师名字-》教师号-》课程ID-》学生，最后在学生表中去掉这些学生，得到的就是没有学过张三课的学生。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SId</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sc.SId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> C <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> T <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line">    <span class="keyword">ON</span> C.TId = T.TId</span><br><span class="line">    <span class="keyword">AND</span> C.CId = sc.CId</span><br><span class="line">    <span class="keyword">WHERE</span> T.Tname = <span class="string">'张三'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   |</span><br><span class="line">| 09   | 张三   | 2017-12-20 00:00:00 | 女   |</span><br><span class="line">| 10   | 李四   | 2017-12-25 00:00:00 | 女   |</span><br><span class="line">| 11   | 李四   | 2012-06-06 00:00:00 | 女   |</span><br><span class="line">| 12   | 赵六   | 2013-06-13 00:00:00 | 女   |</span><br><span class="line">| 13   | 孙七   | 2014-06-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="14-查询没有学全所有课程的同学的信息"><a href="#14-查询没有学全所有课程的同学的信息" class="headerlink" title="14. 查询没有学全所有课程的同学的信息"></a>14. 查询没有学全所有课程的同学的信息</h3><p>解题思路：先找出总共的课程数量。然后在成绩表中按学生号分组，查询每个学生学习的课程数量是否等于总课程数量。最后在学生信息表中去掉这些学全所有课程的同学，剩下的就是没有学全的。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SId</span> <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(CId) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> CId) <span class="keyword">FROM</span> Course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |</span><br><span class="line">| 09   | 张三   | 2017-12-20 00:00:00 | 女   |</span><br><span class="line">| 10   | 李四   | 2017-12-25 00:00:00 | 女   |</span><br><span class="line">| 11   | 李四   | 2012-06-06 00:00:00 | 女   |</span><br><span class="line">| 12   | 赵六   | 2013-06-13 00:00:00 | 女   |</span><br><span class="line">| 13   | 孙七   | 2014-06-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="15-查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息"><a href="#15-查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息" class="headerlink" title="15. 查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息"></a>15. 查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息</h3><p>解题思路：把学生表和成绩表连接，找出学过课程Id为01的这些学生，然后在这些学生中，去除学过课程id为02 的学生。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, sc.CId, sc.score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> st</span><br><span class="line"><span class="keyword">ON</span> sc.SId = st.SId</span><br><span class="line"><span class="keyword">WHERE</span> CId = <span class="string">'01'</span></span><br><span class="line"><span class="keyword">AND</span> sc.SId <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = <span class="string">'02'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+-------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | CId  | score |</span><br><span class="line">+------+--------+---------------------+------+------+-------+</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   | 01   |  31.0 |</span><br><span class="line">+------+--------+---------------------+------+------+-------+</span><br></pre></td></tr></table></figure><h3 id="16-查询至少有一门课与学号为”01”的同学所学相同的同学的信息"><a href="#16-查询至少有一门课与学号为”01”的同学所学相同的同学的信息" class="headerlink" title="16.查询至少有一门课与学号为”01”的同学所学相同的同学的信息"></a>16.查询至少有一门课与学号为”01”的同学所学相同的同学的信息</h3><p>解题思路：把学生表和成绩表连接，找出(成绩表中课程) IN (学号01的学生学习的所有课程)，注意把01学生自己排除掉。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> st.*</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> CId</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">SId</span> = <span class="string">'01'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> sc.SId != <span class="string">'01'</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="17-查询和学号为”01”的同学学习的课程完全相同的其他同学的信息"><a href="#17-查询和学号为”01”的同学学习的课程完全相同的其他同学的信息" class="headerlink" title="17. 查询和学号为”01”的同学学习的课程完全相同的其他同学的信息"></a>17. 查询和学号为”01”的同学学习的课程完全相同的其他同学的信息</h3><p>解题思路：完全相同有两个条件，一个是课程id相同，一个是课程数量相同。<br>先查找学号01学习了哪些课程(比如学了1 2 3)，<br>然后找这样的学生：他们学习的课程和学号01学习的课程有相同的(比如学号02学了1 2 3，学号03学了1 3， 学号04学了1)，注意把学号01自身过滤掉<br>最后，有相同的课程，但是课程数量可能不一样，因此还需要以课程数量相同作为进一步的筛选条件，得出数量相同并且课程编号相同的学生。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> CId</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">SId</span> = <span class="string">'01'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> sc.SId != <span class="string">'01'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> sc.CId) = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> CId) <span class="keyword">FROM</span> Score <span class="keyword">WHERE</span> <span class="keyword">SId</span> = <span class="string">'01'</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 02   | 钱电   |</span><br><span class="line">| 03   | 孙风   |</span><br><span class="line">| 04   | 李云   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure><h3 id="18-查询课程编号为“02”的总成绩"><a href="#18-查询课程编号为“02”的总成绩" class="headerlink" title="18. 查询课程编号为“02”的总成绩"></a>18. 查询课程编号为“02”的总成绩</h3><p>解题思路：使用SUM函数</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(score) <span class="keyword">AS</span> <span class="string">'02课程总成绩'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">WHERE</span> CId = <span class="string">'02'</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------------+</span><br><span class="line">| 02课程总成绩      |</span><br><span class="line">+-------------------+</span><br><span class="line">|             436.0 |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><h3 id="19-检索”-01-“课程分数小于-60，按分数降序排列的学生信息"><a href="#19-检索”-01-“课程分数小于-60，按分数降序排列的学生信息" class="headerlink" title="19. 检索” 01 “课程分数小于 60，按分数降序排列的学生信息"></a>19. 检索” 01 “课程分数小于 60，按分数降序排列的学生信息</h3><p>解题思路：</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, sc.score <span class="keyword">AS</span> <span class="string">'01课程分数'</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId = <span class="string">'01'</span> <span class="keyword">AND</span> sc.score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+----------------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | 01课程分数     |</span><br><span class="line">+------+--------+---------------------+------+----------------+</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |           50.0 |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   |           31.0 |</span><br><span class="line">+------+--------+---------------------+------+----------------+</span><br></pre></td></tr></table></figure><h3 id="20-查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩"><a href="#20-查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩" class="headerlink" title="20. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩"></a>20. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</h3><p>解题思路：先在分数表中找出所有不及格的学生，然后在其中把学生分组，找出每个学生不及格的数量，选择不及格课程数量&gt;=2的学生。<br>然后把学生表和分数表连接，对学生分组，找出学生id是上一步中不及格&gt;=2的学生id。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname, <span class="keyword">AVG</span>(sc.score) <span class="keyword">AS</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> st</span><br><span class="line"><span class="keyword">ON</span> sc.SId = st.SId</span><br><span class="line"><span class="keyword">WHERE</span> st.SId <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> score &lt; <span class="number">60</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(CId) &gt;= <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+-----------+</span><br><span class="line">| SId  | Sname  | avg_score |</span><br><span class="line">+------+--------+-----------+</span><br><span class="line">| 04   | 李云   |  33.33333 |</span><br><span class="line">| 06   | 吴兰   |  32.50000 |</span><br><span class="line">+------+--------+-----------+</span><br></pre></td></tr></table></figure><h3 id="21-按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩"><a href="#21-按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩" class="headerlink" title="21. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩"></a>21. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</h3><p>解题思路：把每个学生的平均成绩找出来记为表t，和成绩表连接。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.*, t.avg_score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">as</span> sc </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span>, <span class="keyword">AVG</span>(score) <span class="keyword">as</span> avg_score</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line">) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">ON</span> sc.SId = t.SId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+-----------+</span><br><span class="line">| SId  | CId  | score | avg_score |</span><br><span class="line">+------+------+-------+-----------+</span><br><span class="line">| 07   | 03   |  98.0 |  93.50000 |</span><br><span class="line">| 07   | 02   |  89.0 |  93.50000 |</span><br><span class="line">| 01   | 01   |  80.0 |  89.66667 |</span><br><span class="line">| 01   | 02   |  90.0 |  89.66667 |</span><br><span class="line">| 01   | 03   |  99.0 |  89.66667 |</span><br><span class="line">| 05   | 01   |  76.0 |  81.50000 |</span><br><span class="line">| 05   | 02   |  87.0 |  81.50000 |</span><br><span class="line">| 03   | 03   |  80.0 |  80.00000 |</span><br><span class="line">| 03   | 01   |  80.0 |  80.00000 |</span><br><span class="line">| 03   | 02   |  80.0 |  80.00000 |</span><br><span class="line">| 02   | 01   |  70.0 |  70.00000 |</span><br><span class="line">| 02   | 02   |  60.0 |  70.00000 |</span><br><span class="line">| 02   | 03   |  80.0 |  70.00000 |</span><br><span class="line">| 04   | 01   |  50.0 |  33.33333 |</span><br><span class="line">| 04   | 02   |  30.0 |  33.33333 |</span><br><span class="line">| 04   | 03   |  20.0 |  33.33333 |</span><br><span class="line">| 06   | 03   |  34.0 |  32.50000 |</span><br><span class="line">| 06   | 01   |  31.0 |  32.50000 |</span><br><span class="line">+------+------+-------+-----------+</span><br></pre></td></tr></table></figure><h3 id="22-查询各科成绩最高分、最低分和平均分"><a href="#22-查询各科成绩最高分、最低分和平均分" class="headerlink" title="22. 查询各科成绩最高分、最低分和平均分"></a>22. 查询各科成绩最高分、最低分和平均分</h3><p>以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率<br>及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90<br>要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</p><p>解题思路：需要按各科成绩统计，因此首先把课程分组，然后使用COUNT, MAX, MIN, AVG函数计算对应值</p><p>及格率的计算公式：这门课及格的人数/选这门课的总人数，其中及格为score&gt;=60</p><p>中等率的计算公式：这门课中等的人数/选这门课的总人数，其中中等为s.score &gt;= 70 AND s.score &lt;80</p><p>计算过程：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SUM(IF(s.score &gt;= 60, 1, 0))   -- 得出及格数</span><br><span class="line"></span><br><span class="line">SUM(IF(s.score &gt;= 60, 1, 0)) / COUNT(s.SId)   -- 得出及格率</span><br><span class="line"></span><br><span class="line">ROUND((SUM(IF(s.score &gt;= 60, 1, 0)) / COUNT(s.SId)) * 100, 2)  --把及格率转换为百分比形式，如0.6667，转为66.67</span><br><span class="line"></span><br><span class="line">CONCAT(ROUND((SUM(IF(s.score &gt;= 60, 1, 0)) / COUNT(s.SId)) * 100, 2), '%') AS '及格率'    --用concat加上'%'号</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    c.CId <span class="keyword">AS</span> <span class="string">'课程ID'</span>,</span><br><span class="line">    c.Cname <span class="keyword">AS</span> <span class="string">'课程名称'</span>,</span><br><span class="line">    <span class="keyword">COUNT</span>(s.SId) <span class="keyword">AS</span> <span class="string">'选修人数'</span>,</span><br><span class="line">    <span class="keyword">MAX</span>(s.score) <span class="keyword">AS</span> <span class="string">'最高分'</span>,</span><br><span class="line">    <span class="keyword">MIN</span>(s.score) <span class="keyword">AS</span> <span class="string">'最低分'</span>,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s.score), <span class="number">2</span>) <span class="keyword">AS</span> <span class="string">'平均分'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">IF</span>(s.score &gt;= <span class="number">60</span>, <span class="number">1</span>, <span class="number">0</span>)) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'及格率'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">IF</span>(s.score &gt;= <span class="number">70</span> <span class="keyword">AND</span> s.score &lt;<span class="number">80</span>, <span class="number">1</span>, <span class="number">0</span>)) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'中等率'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">IF</span>(s.score &gt;= <span class="number">80</span> <span class="keyword">AND</span> s.score &lt;<span class="number">90</span>, <span class="number">1</span>, <span class="number">0</span>)) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'优良率'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">IF</span>(s.score &gt;= <span class="number">90</span> <span class="keyword">AND</span> s.score &lt;=<span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>)) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'优秀率'</span></span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">ON</span> s.CId = c.CId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.CId, c.Cname</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">'选修人数'</span> <span class="keyword">DESC</span>, c.CId;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------+--------------+--------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+</span><br><span class="line">| 课程ID    | 课程名称     | 选修人数       | 最高分     | 最低分     | 平均分     | 及格率     | 中等率     | 优良率     | 优秀率    |</span><br><span class="line">+----------+--------------+--------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+</span><br><span class="line">| 01       | 语文         |            6 |      80.0 |      31.0 |     64.50 | 66.67%    | 33.33%    | 33.33%    | 0.00%     |</span><br><span class="line">| 02       | 数学         |            6 |      90.0 |      30.0 |     72.67 | 83.33%    | 0.00%     | 50.00%    | 16.67%    |</span><br><span class="line">| 03       | 英语         |            6 |      99.0 |      20.0 |     68.50 | 66.67%    | 0.00%     | 33.33%    | 33.33%    |</span><br><span class="line">+----------+--------------+--------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+</span><br></pre></td></tr></table></figure><h3 id="23-按各科成绩进行排序，并显示排名，总分重复时保留名次空缺"><a href="#23-按各科成绩进行排序，并显示排名，总分重复时保留名次空缺" class="headerlink" title="23. 按各科成绩进行排序，并显示排名，总分重复时保留名次空缺"></a>23. 按各科成绩进行排序，并显示排名，总分重复时保留名次空缺</h3><p>解题思路：按学科类别显示排名， 使用窗口函数，partition by 课程类别， order by 分数 逆序排列。<br>总分相同时保留空缺，即1,2,2,4,5这样，使用rank()函数</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">partition</span> <span class="keyword">by</span> CId <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'排名'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> CId, 排名;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+--------+</span><br><span class="line">| SId  | CId  | score | 排名   |</span><br><span class="line">+------+------+-------+--------+</span><br><span class="line">| 01   | 01   |  80.0 |      1 |</span><br><span class="line">| 03   | 01   |  80.0 |      1 |</span><br><span class="line">| 05   | 01   |  76.0 |      3 |</span><br><span class="line">| 02   | 01   |  70.0 |      4 |</span><br><span class="line">| 04   | 01   |  50.0 |      5 |</span><br><span class="line">| 06   | 01   |  31.0 |      6 |</span><br><span class="line">| 01   | 02   |  90.0 |      1 |</span><br><span class="line">| 07   | 02   |  89.0 |      2 |</span><br><span class="line">| 05   | 02   |  87.0 |      3 |</span><br><span class="line">| 03   | 02   |  80.0 |      4 |</span><br><span class="line">| 02   | 02   |  60.0 |      5 |</span><br><span class="line">| 04   | 02   |  30.0 |      6 |</span><br><span class="line">| 01   | 03   |  99.0 |      1 |</span><br><span class="line">| 07   | 03   |  98.0 |      2 |</span><br><span class="line">| 02   | 03   |  80.0 |      3 |</span><br><span class="line">| 03   | 03   |  80.0 |      3 |</span><br><span class="line">| 06   | 03   |  34.0 |      5 |</span><br><span class="line">| 04   | 03   |  20.0 |      6 |</span><br><span class="line">+------+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="24-按各科成绩进行排序，并显示排名，-总分重复时合并名次"><a href="#24-按各科成绩进行排序，并显示排名，-总分重复时合并名次" class="headerlink" title="24. 按各科成绩进行排序，并显示排名， 总分重复时合并名次"></a>24. 按各科成绩进行排序，并显示排名， 总分重复时合并名次</h3><p>解题思路：与23题大体相同，不同的是总分重复时合并名次，即1,2,2,3,4,5这样，选择dense_rank()函数。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">partition</span> <span class="keyword">by</span> CId <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'排名'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> CId, 排名;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+--------+</span><br><span class="line">| SId  | CId  | score | 排名   |</span><br><span class="line">+------+------+-------+--------+</span><br><span class="line">| 01   | 01   |  80.0 |      1 |</span><br><span class="line">| 03   | 01   |  80.0 |      1 |</span><br><span class="line">| 05   | 01   |  76.0 |      2 |</span><br><span class="line">| 02   | 01   |  70.0 |      3 |</span><br><span class="line">| 04   | 01   |  50.0 |      4 |</span><br><span class="line">| 06   | 01   |  31.0 |      5 |</span><br><span class="line">| 01   | 02   |  90.0 |      1 |</span><br><span class="line">| 07   | 02   |  89.0 |      2 |</span><br><span class="line">| 05   | 02   |  87.0 |      3 |</span><br><span class="line">| 03   | 02   |  80.0 |      4 |</span><br><span class="line">| 02   | 02   |  60.0 |      5 |</span><br><span class="line">| 04   | 02   |  30.0 |      6 |</span><br><span class="line">| 01   | 03   |  99.0 |      1 |</span><br><span class="line">| 07   | 03   |  98.0 |      2 |</span><br><span class="line">| 02   | 03   |  80.0 |      3 |</span><br><span class="line">| 03   | 03   |  80.0 |      3 |</span><br><span class="line">| 06   | 03   |  34.0 |      4 |</span><br><span class="line">| 04   | 03   |  20.0 |      5 |</span><br><span class="line">+------+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="25-查询学生的总成绩，并进行排名，总分重复时保留名次空缺"><a href="#25-查询学生的总成绩，并进行排名，总分重复时保留名次空缺" class="headerlink" title="25. 查询学生的总成绩，并进行排名，总分重复时保留名次空缺"></a>25. 查询学生的总成绩，并进行排名，总分重复时保留名次空缺</h3><p>解题思路：先把学生分组，计算每个学生的总成绩，然后对分数进行排名，使用rank()窗口函数。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">SId</span>,</span><br><span class="line">    <span class="keyword">SUM</span>(score) <span class="keyword">AS</span> <span class="string">'总成绩'</span>,</span><br><span class="line">    <span class="keyword">rank</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUM</span>(score) <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'排名'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------+-----------+--------+</span><br><span class="line">| SId  | 总成绩    | 排名   |</span><br><span class="line">+------+-----------+--------+</span><br><span class="line">| 01   |     269.0 |      1 |</span><br><span class="line">| 03   |     240.0 |      2 |</span><br><span class="line">| 02   |     210.0 |      3 |</span><br><span class="line">| 07   |     187.0 |      4 |</span><br><span class="line">| 05   |     163.0 |      5 |</span><br><span class="line">| 04   |     100.0 |      6 |</span><br><span class="line">| 06   |      65.0 |      7 |</span><br><span class="line">+------+-----------+--------+</span><br></pre></td></tr></table></figure><h3 id="26-查询学生的平均成绩，并进行排名"><a href="#26-查询学生的平均成绩，并进行排名" class="headerlink" title="26. 查询学生的平均成绩，并进行排名"></a>26. 查询学生的平均成绩，并进行排名</h3><p>解题思路：和26题类似。函数换成AVG()</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">SId</span>,</span><br><span class="line">    <span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均成绩'</span>,</span><br><span class="line">    <span class="keyword">rank</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">AVG</span>(score) <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'排名'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------+--------------+--------+</span><br><span class="line">| SId  | 平均成绩      | 排名    |</span><br><span class="line">+------+--------------+--------+</span><br><span class="line">| 07   |     93.50000 |      1 |</span><br><span class="line">| 01   |     89.66667 |      2 |</span><br><span class="line">| 05   |     81.50000 |      3 |</span><br><span class="line">| 03   |     80.00000 |      4 |</span><br><span class="line">| 02   |     70.00000 |      5 |</span><br><span class="line">| 04   |     33.33333 |      6 |</span><br><span class="line">| 06   |     32.50000 |      7 |</span><br><span class="line">+------+--------------+--------+</span><br></pre></td></tr></table></figure><h3 id="27-统计各科成绩各分数段的人数：课程编号，课程名称，-100-85-85-70-70-60-60-0-及所占百分比"><a href="#27-统计各科成绩各分数段的人数：课程编号，课程名称，-100-85-85-70-70-60-60-0-及所占百分比" class="headerlink" title="27. 统计各科成绩各分数段的人数：课程编号，课程名称，[100-85],[85-70],[70-60],[60-0]及所占百分比"></a>27. 统计各科成绩各分数段的人数：课程编号，课程名称，[100-85],[85-70],[70-60],[60-0]及所占百分比</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SUM(IF(s.score &gt;= 60, 1, 0))   -- 得出及格数</span><br><span class="line"></span><br><span class="line">SUM(IF(s.score &gt;= 60, 1, 0)) / COUNT(s.SId)   -- 得出及格率</span><br><span class="line"></span><br><span class="line">ROUND((SUM(IF(s.score &gt;= 60, 1, 0)) / COUNT(s.SId)) * 100, 2)  --把及格率转换为百分比形式，如0.6667，转为66.67</span><br><span class="line"></span><br><span class="line">CONCAT(ROUND((SUM(IF(s.score &gt;= 60, 1, 0)) / COUNT(s.SId)) * 100, 2), '%') AS '及格率'    --用concat加上'%'号</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    c.CId,</span><br><span class="line">    c.Cname,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s.score&gt;=<span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'[100-85]分数段占比'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s.score&gt;=<span class="number">70</span> <span class="keyword">AND</span> s.score &lt; <span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'[85-70]分数段占比'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s.score&gt;=<span class="number">60</span> <span class="keyword">AND</span> s.score &lt; <span class="number">70</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'[70-60]分数段占比'</span>,</span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">ROUND</span>((<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s.score&gt;=<span class="number">0</span> <span class="keyword">AND</span> s.score &lt; <span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) / <span class="keyword">COUNT</span>(s.SId)) * <span class="number">100</span>, <span class="number">2</span>), <span class="string">'%'</span>) <span class="keyword">AS</span> <span class="string">'[60-0]分数段占比'</span></span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">ON</span> s.CId = c.CId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.CId, c.Cname;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+-------------------------+------------------------+------------------------+-----------------------+</span><br><span class="line">| CId  | Cname  | [100-85]分数段占比       | [85-70]分数段占比        | [70-60]分数段占比       | [60-0]分数段占比        |</span><br><span class="line">+------+--------+-------------------------+------------------------+------------------------+-----------------------+</span><br><span class="line">| 01   | 语文   | 0.00%                   | 66.67%                 | 0.00%                  | 33.33%                |</span><br><span class="line">| 02   | 数学   | 50.00%                  | 16.67%                 | 16.67%                 | 16.67%                |</span><br><span class="line">| 03   | 英语   | 33.33%                  | 33.33%                 | 0.00%                  | 33.33%                |</span><br><span class="line">+------+--------+-------------------------+------------------------+------------------------+-----------------------+</span><br></pre></td></tr></table></figure><h3 id="28-查询各科成绩前三名的记录"><a href="#28-查询各科成绩前三名的记录" class="headerlink" title="28. 查询各科成绩前三名的记录"></a>28. 查询各科成绩前三名的记录</h3><p>解题思路：首先按学科分组，对每个学科的分数进行排名，得到一个排名列(类似于23题)。然后把这个排名列放在分数表右边。最后过滤出排名为1,2,3的，再用order排序。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.SId, s.CId, s.score, t.rank</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">as</span> s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, row_number() <span class="keyword">OVER</span> (<span class="keyword">partition</span> <span class="keyword">by</span> CId <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'rank'</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">ON</span> s.SId = t.SId</span><br><span class="line"><span class="keyword">AND</span> s.CId = t.CId</span><br><span class="line"><span class="keyword">WHERE</span> t.rank = <span class="number">1</span> <span class="keyword">or</span> t.rank = <span class="number">2</span> <span class="keyword">or</span> t.rank = <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s.CId, t.rank;</span><br></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, score, </span><br><span class="line">        row_number() <span class="keyword">OVER</span> (<span class="keyword">partition</span> <span class="keyword">by</span> CId <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'rank'</span></span><br><span class="line">    <span class="keyword">FROM</span> Score </span><br><span class="line">) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.rank <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+------+</span><br><span class="line">| SId  | CId  | score | rank |</span><br><span class="line">+------+------+-------+------+</span><br><span class="line">| 01   | 01   |  80.0 |    1 |</span><br><span class="line">| 03   | 01   |  80.0 |    2 |</span><br><span class="line">| 05   | 01   |  76.0 |    3 |</span><br><span class="line">| 01   | 02   |  90.0 |    1 |</span><br><span class="line">| 07   | 02   |  89.0 |    2 |</span><br><span class="line">| 05   | 02   |  87.0 |    3 |</span><br><span class="line">| 01   | 03   |  99.0 |    1 |</span><br><span class="line">| 07   | 03   |  98.0 |    2 |</span><br><span class="line">| 02   | 03   |  80.0 |    3 |</span><br><span class="line">+------+------+-------+------+</span><br></pre></td></tr></table></figure><p>如果不是前3名，而是前3000名，那么上面两种方法就不适用了。因此考虑第三种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.SId, a.CId, a.score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">FROM</span> Score <span class="keyword">AS</span> b</span><br><span class="line">    <span class="keyword">WHERE</span> b.CId = a.CId</span><br><span class="line">    <span class="keyword">AND</span> b.score &gt; a.score</span><br><span class="line">) &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.CId, a.score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 05   | 01   |  76.0 |</span><br><span class="line">| 01   | 02   |  90.0 |</span><br><span class="line">| 07   | 02   |  89.0 |</span><br><span class="line">| 05   | 02   |  87.0 |</span><br><span class="line">| 01   | 03   |  99.0 |</span><br><span class="line">| 07   | 03   |  98.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure><p>这里的count(1)，1并不是表示第一个字段，而是表示一共有多少符合条件的行。</p><h3 id="29-查询所有课程的成绩第2名到第3名的学生信息及该课程成绩"><a href="#29-查询所有课程的成绩第2名到第3名的学生信息及该课程成绩" class="headerlink" title="29. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩"></a>29. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</h3><p>解题思路：和29题一样，只不过需要多连接一个学生表查出学生信息。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, s.CId, s.score, t.rank</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">as</span> st </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">as</span> s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SId</span>, CId, row_number() <span class="keyword">OVER</span> (<span class="keyword">partition</span> <span class="keyword">by</span> CId <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'rank'</span></span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">ON</span> st.SId = s.SId</span><br><span class="line"><span class="keyword">AND</span> s.SId = t.SId</span><br><span class="line"><span class="keyword">AND</span> s.CId = t.CId</span><br><span class="line"><span class="keyword">WHERE</span> t.rank = <span class="number">2</span> <span class="keyword">or</span> t.rank = <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s.CId, t.rank;</span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        st.*, </span><br><span class="line">        sc.CId, </span><br><span class="line">        sc.score, </span><br><span class="line">        row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">BY</span> sc.CId <span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="string">'rank'</span></span><br><span class="line">    <span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> st </span><br><span class="line">    <span class="keyword">ON</span> sc.SId = st.SId</span><br><span class="line">) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.rank <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+-------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | CId  | score | rank |</span><br><span class="line">+------+--------+---------------------+------+------+-------+------+</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   | 01   |  80.0 |    2 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   | 01   |  76.0 |    3 |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   | 02   |  89.0 |    2 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   | 02   |  87.0 |    3 |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   | 03   |  98.0 |    2 |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   | 03   |  80.0 |    3 |</span><br><span class="line">+------+--------+---------------------+------+------+-------+------+</span><br></pre></td></tr></table></figure><h3 id="30-查询每门课选修的学生人数"><a href="#30-查询每门课选修的学生人数" class="headerlink" title="30. 查询每门课选修的学生人数"></a>30. 查询每门课选修的学生人数</h3><p>解题思路：对课程分组，用COUNT计算人数</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId, <span class="keyword">COUNT</span>(<span class="keyword">SId</span>) <span class="keyword">AS</span> <span class="string">'选修人数'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+--------------+</span><br><span class="line">| CId  | 选修人数     |</span><br><span class="line">+------+--------------+</span><br><span class="line">| 01   |            6 |</span><br><span class="line">| 02   |            6 |</span><br><span class="line">| 03   |            6 |</span><br><span class="line">+------+--------------+</span><br></pre></td></tr></table></figure><h3 id="31-查询出只修两门课程的学生学号和姓名"><a href="#31-查询出只修两门课程的学生学号和姓名" class="headerlink" title="31.查询出只修两门课程的学生学号和姓名"></a>31.查询出只修两门课程的学生学号和姓名</h3><p>解题思路：把学生表和成绩表连接，然后对学生分组，使用COUNT统计每个学生的课程数量，使用HAVING过滤出数量=2的。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> st</span><br><span class="line"><span class="keyword">ON</span> sc.SId = st.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(sc.CId) = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 05   | 周梅   |</span><br><span class="line">| 06   | 吴兰   |</span><br><span class="line">| 07   | 郑竹   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure><h3 id="32-查询男生、女生人数"><a href="#32-查询男生、女生人数" class="headerlink" title="32.查询男生、女生人数"></a>32.查询男生、女生人数</h3><p>解题思路：对性别分组，使用COUNT计算人数。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Ssex <span class="keyword">AS</span> <span class="string">'性别'</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">'人数'</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Ssex;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------+</span><br><span class="line">| 性别   | 人数   |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 男     |      4 |</span><br><span class="line">| 女     |      8 |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure><h3 id="33-查询名字中含有「风」字的学生信息"><a href="#33-查询名字中含有「风」字的学生信息" class="headerlink" title="33. 查询名字中含有「风」字的学生信息"></a>33. 查询名字中含有「风」字的学生信息</h3><p>解题思路：使用LIKE关键字，使用%</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">'%风%'</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="34-查询同名学生名单，并统计同名人数"><a href="#34-查询同名学生名单，并统计同名人数" class="headerlink" title="34. 查询同名学生名单，并统计同名人数"></a>34. 查询同名学生名单，并统计同名人数</h3><p>解题思路：对学生名字分组，使用COUNT统计人数。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname, <span class="keyword">COUNT</span>(<span class="keyword">SId</span>) <span class="keyword">AS</span> <span class="string">'同名人数'</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sname</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">SId</span>) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------------+</span><br><span class="line">| Sname  | 同名人数     |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 李四   |            2 |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong>求出同名同性的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.Sname, s1.Ssex, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">'同名同性人数'</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> s1.SId != s2.SId <span class="keyword">AND</span> s1.Sname = s2.Sname <span class="keyword">AND</span> s1.Ssex = s2.Ssex</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s1.Sname, s1.Ssex;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+------+--------------------+</span><br><span class="line">| Sname  | Ssex | 同名同性人数       |</span><br><span class="line">+--------+------+--------------------+</span><br><span class="line">| 李四   | 女   |                  2 |</span><br><span class="line">+--------+------+--------------------+</span><br></pre></td></tr></table></figure><h3 id="35-查询-1990-年出生的学生名单"><a href="#35-查询-1990-年出生的学生名单" class="headerlink" title="35. 查询 1990 年出生的学生名单"></a>35. 查询 1990 年出生的学生名单</h3><p>解题思路：使用YEAR()函数求出日期中关于年份的。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(Sage) = <span class="string">'1990'</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="36-查询平均成绩大于等于-85-的所有学生的学号、姓名和平均成绩"><a href="#36-查询平均成绩大于等于-85-的所有学生的学号、姓名和平均成绩" class="headerlink" title="36. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩"></a>36. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</h3><p>解题思路：把学生表和分数表连接，对学生分组，求出每个学生的平均成绩，使用HAVING过滤出&gt;=85的。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname, <span class="keyword">AVG</span>(sc.score) <span class="keyword">AS</span> <span class="string">'avg_score'</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">HAVING</span> avg_score &gt;= <span class="number">85</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+-----------+</span><br><span class="line">| SId  | Sname  | avg_score |</span><br><span class="line">+------+--------+-----------+</span><br><span class="line">| 01   | 赵雷   |  89.66667 |</span><br><span class="line">| 07   | 郑竹   |  93.50000 |</span><br><span class="line">+------+--------+-----------+</span><br></pre></td></tr></table></figure><h3 id="37-查询课程名称为「数学」，且分数低于-60-的学生姓名和分数"><a href="#37-查询课程名称为「数学」，且分数低于-60-的学生姓名和分数" class="headerlink" title="37. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数"></a>37. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</h3><p>解题思路：把学生表，分数表，课程表连接，使用WHERE过滤条件。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.Sname, sc.score</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> co</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">AND</span> sc.CId = co.CId</span><br><span class="line"><span class="keyword">WHERE</span> co.Cname = <span class="string">'数学'</span> <span class="keyword">AND</span> sc.score &lt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+-------+</span><br><span class="line">| Sname  | score |</span><br><span class="line">+--------+-------+</span><br><span class="line">| 李云   |  30.0 |</span><br><span class="line">+--------+-------+</span><br></pre></td></tr></table></figure><h3 id="38-查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）"><a href="#38-查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）" class="headerlink" title="38. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）"></a>38. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</h3><p>解题思路：需要学生信息，分数信息和课程信息。所以先把三表连接，找出所有学生信息，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> co <span class="keyword">ON</span> sc.CId = co.CId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname;</span><br></pre></td></tr></table></figure><p>然后按课程统计各科分数及总成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    st.SId, </span><br><span class="line">    st.Sname,</span><br><span class="line">    <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> co.Cname=<span class="string">'语文'</span> <span class="keyword">THEN</span> sc.score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'语文成绩'</span>,</span><br><span class="line">    <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> co.Cname=<span class="string">'数学'</span> <span class="keyword">THEN</span> sc.score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'数学成绩'</span>,</span><br><span class="line">    <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> co.Cname=<span class="string">'英语'</span> <span class="keyword">THEN</span> sc.score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'英语成绩'</span>,</span><br><span class="line">    <span class="keyword">SUM</span>(sc.score)  <span class="keyword">AS</span> <span class="string">'总分'</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> co <span class="keyword">ON</span> sc.CId = co.CId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname;</span><br></pre></td></tr></table></figure><p>其中，每个学生的各科成绩只有一门，为了在学生分组中取出这门成绩使用SUM函数，而不是为了对该科成绩求和。<br>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+--------------+--------------+--------------+--------+</span><br><span class="line">| SId  | Sname  | 语文成绩     | 数学成绩     | 英语成绩     | 总分   |</span><br><span class="line">+------+--------+--------------+--------------+--------------+--------+</span><br><span class="line">| 01   | 赵雷   |         80.0 |         90.0 |         99.0 |  269.0 |</span><br><span class="line">| 02   | 钱电   |         70.0 |         60.0 |         80.0 |  210.0 |</span><br><span class="line">| 03   | 孙风   |         80.0 |         80.0 |         80.0 |  240.0 |</span><br><span class="line">| 04   | 李云   |         50.0 |         30.0 |         20.0 |  100.0 |</span><br><span class="line">| 05   | 周梅   |         76.0 |         87.0 |          0.0 |  163.0 |</span><br><span class="line">| 06   | 吴兰   |         31.0 |          0.0 |         34.0 |   65.0 |</span><br><span class="line">| 07   | 郑竹   |          0.0 |         89.0 |         98.0 |  187.0 |</span><br><span class="line">| 09   | 张三   |          0.0 |          0.0 |          0.0 |   NULL |</span><br><span class="line">| 10   | 李四   |          0.0 |          0.0 |          0.0 |   NULL |</span><br><span class="line">| 11   | 李四   |          0.0 |          0.0 |          0.0 |   NULL |</span><br><span class="line">| 12   | 赵六   |          0.0 |          0.0 |          0.0 |   NULL |</span><br><span class="line">| 13   | 孙七   |          0.0 |          0.0 |          0.0 |   NULL |</span><br><span class="line">+------+--------+--------------+--------------+--------------+--------+</span><br></pre></td></tr></table></figure><p>接下来对数据处理，第一步，把总分中的NULL转换为0，需要用COALESCE()函数。第二步，去除小数点后的0，使用CAST函数，</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    st.SId, </span><br><span class="line">    st.Sname,</span><br><span class="line">    <span class="keyword">CAST</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> co.Cname=<span class="string">'语文'</span> <span class="keyword">THEN</span> sc.score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="built_in">real</span>) <span class="keyword">AS</span> <span class="string">'语文成绩'</span>,</span><br><span class="line">    <span class="keyword">CAST</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> co.Cname=<span class="string">'数学'</span> <span class="keyword">THEN</span> sc.score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="built_in">real</span>) <span class="keyword">AS</span> <span class="string">'数学成绩'</span>,</span><br><span class="line">    <span class="keyword">CAST</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> co.Cname=<span class="string">'英语'</span> <span class="keyword">THEN</span> sc.score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="built_in">real</span>) <span class="keyword">AS</span> <span class="string">'英语成绩'</span>,</span><br><span class="line">    <span class="keyword">CAST</span>(<span class="keyword">COALESCE</span>(<span class="keyword">SUM</span>(sc.score), <span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">real</span>) <span class="keyword">AS</span> <span class="string">'总分'</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> co <span class="keyword">ON</span> sc.CId = co.CId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+--------------+--------------+--------------+--------+</span><br><span class="line">| SId  | Sname  | 语文成绩      | 数学成绩      | 英语成绩      | 总分    |</span><br><span class="line">+------+--------+--------------+--------------+--------------+--------+</span><br><span class="line">| 01   | 赵雷   |           80 |           90 |           99 |    269 |</span><br><span class="line">| 02   | 钱电   |           70 |           60 |           80 |    210 |</span><br><span class="line">| 03   | 孙风   |           80 |           80 |           80 |    240 |</span><br><span class="line">| 04   | 李云   |           50 |           30 |           20 |    100 |</span><br><span class="line">| 05   | 周梅   |           76 |           87 |            0 |    163 |</span><br><span class="line">| 06   | 吴兰   |           31 |            0 |           34 |     65 |</span><br><span class="line">| 07   | 郑竹   |            0 |           89 |           98 |    187 |</span><br><span class="line">| 09   | 张三   |            0 |            0 |            0 |      0 |</span><br><span class="line">| 10   | 李四   |            0 |            0 |            0 |      0 |</span><br><span class="line">| 11   | 李四   |            0 |            0 |            0 |      0 |</span><br><span class="line">| 12   | 赵六   |            0 |            0 |            0 |      0 |</span><br><span class="line">| 13   | 孙七   |            0 |            0 |            0 |      0 |</span><br><span class="line">+------+--------+--------------+--------------+--------------+--------+</span><br></pre></td></tr></table></figure><h3 id="39-查询不同老师所教不同课程平均分从高到低显示"><a href="#39-查询不同老师所教不同课程平均分从高到低显示" class="headerlink" title="39. 查询不同老师所教不同课程平均分从高到低显示"></a>39. 查询不同老师所教不同课程平均分从高到低显示</h3><p>解题思路：把课程表和分数表连接，对老师及所教课程分组，使用AVG()计算平均分，DESC逆序排列。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> co.TId, co.CId, <span class="keyword">AVG</span>(sc.score) <span class="keyword">AS</span> <span class="string">'avg_score'</span></span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> co.CId = sc.CId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> co.TId, co.CId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-----------+</span><br><span class="line">| TId  | CId  | avg_score |</span><br><span class="line">+------+------+-----------+</span><br><span class="line">| 01   | 02   |  72.66667 |</span><br><span class="line">| 03   | 03   |  68.50000 |</span><br><span class="line">| 02   | 01   |  64.50000 |</span><br><span class="line">+------+------+-----------+</span><br></pre></td></tr></table></figure><h3 id="40-查询任何一门课程成绩在-70-分以上的姓名、课程名称和分数"><a href="#40-查询任何一门课程成绩在-70-分以上的姓名、课程名称和分数" class="headerlink" title="40. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数"></a>40. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</h3><p>解题思路：</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.Sname, co.Cname, sc.score</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc <span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> co <span class="keyword">ON</span> sc.CId = co.CId</span><br><span class="line"><span class="keyword">WHERE</span> sc.score &gt; <span class="number">70</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------+-------+</span><br><span class="line">| Sname  | Cname  | score |</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| 赵雷   | 语文   |  80.0 |</span><br><span class="line">| 赵雷   | 数学   |  90.0 |</span><br><span class="line">| 赵雷   | 英语   |  99.0 |</span><br><span class="line">| 钱电   | 英语   |  80.0 |</span><br><span class="line">| 孙风   | 语文   |  80.0 |</span><br><span class="line">| 孙风   | 数学   |  80.0 |</span><br><span class="line">| 孙风   | 英语   |  80.0 |</span><br><span class="line">| 周梅   | 语文   |  76.0 |</span><br><span class="line">| 周梅   | 数学   |  87.0 |</span><br><span class="line">| 郑竹   | 数学   |  89.0 |</span><br><span class="line">| 郑竹   | 英语   |  98.0 |</span><br><span class="line">+--------+--------+-------+</span><br></pre></td></tr></table></figure><h3 id="41-查询不及格的课程并按课程号从大到小排列"><a href="#41-查询不及格的课程并按课程号从大到小排列" class="headerlink" title="41. 查询不及格的课程并按课程号从大到小排列"></a>41. 查询不及格的课程并按课程号从大到小排列</h3><p>解题思路：使用WHERE过滤出不及格的课程，DESC从大到小排序。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc.CId, co.Cname, sc.score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Course <span class="keyword">AS</span> co</span><br><span class="line"><span class="keyword">ON</span> sc.CId = co.CId</span><br><span class="line"><span class="keyword">WHERE</span> sc.score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.CId <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+-------+</span><br><span class="line">| CId  | Cname  | score |</span><br><span class="line">+------+--------+-------+</span><br><span class="line">| 03   | 英语   |  20.0 |</span><br><span class="line">| 03   | 英语   |  34.0 |</span><br><span class="line">| 02   | 数学   |  30.0 |</span><br><span class="line">| 01   | 语文   |  50.0 |</span><br><span class="line">| 01   | 语文   |  31.0 |</span><br><span class="line">+------+--------+-------+</span><br></pre></td></tr></table></figure><h3 id="42-查询课程编号为-01-且课程成绩在-80-分以上的学生的学号和姓名"><a href="#42-查询课程编号为-01-且课程成绩在-80-分以上的学生的学号和姓名" class="headerlink" title="42. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名"></a>42. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名</h3><p>解题思路：把分数表和学生表连接，使用WHERE过滤条件。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Student <span class="keyword">AS</span> st </span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId = <span class="string">'01'</span> <span class="keyword">AND</span> sc.score &gt;= <span class="number">80</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 01   | 赵雷   |</span><br><span class="line">| 03   | 孙风   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure><h3 id="43-成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"><a href="#43-成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩" class="headerlink" title="43. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"></a>43. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</h3><p>解题思路：首先找出张三老师教的课程编号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> co.CId</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line"><span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line"><span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span>;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| CId  |</span><br><span class="line">+------+</span><br><span class="line">| 02   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>然后把学生表和成绩表连接，找出成绩表中课程编号是02的所有成绩，取最高的成绩及其学生信息。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, sc.score</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId = (</span><br><span class="line">    <span class="keyword">SELECT</span> co.CId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">    <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">    <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sc.score <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+-------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | score |</span><br><span class="line">+------+--------+---------------------+------+-------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |  90.0 |</span><br><span class="line">+------+--------+---------------------+------+-------+</span><br></pre></td></tr></table></figure><h3 id="44-成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"><a href="#44-成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩" class="headerlink" title="44. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩"></a>44. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</h3><p>为了验证本题答案正确性，先把原Score表中的数据做下修改，设张三老师课程下有两个最高分的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Score <span class="keyword">SET</span> score=<span class="number">90</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">SId</span> = <span class="string">"07"</span></span><br><span class="line"><span class="keyword">and</span> CId =<span class="string">"02"</span>;</span><br></pre></td></tr></table></figure><p>解题思路：和44题类似，首先找出张三老师教的课程编号，以及该课程下最高的分数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> co.CId</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line"><span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line"><span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score)</span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">WHERE</span> CId = (</span><br><span class="line">    <span class="keyword">SELECT</span> co.CId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">    <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">    <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| CId  |</span><br><span class="line">+------+</span><br><span class="line">| 02   |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">| MAX(score) |</span><br><span class="line">+------------+</span><br><span class="line">|       90.0 |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>然后，在分数表中筛选出满足这两个条件的：<br>第一，课程id是张三老师教课的课程id。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, sc.score, sc.CId</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc </span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId = (</span><br><span class="line">    <span class="keyword">SELECT</span> co.CId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">    <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">    <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+-------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | score | CId  |</span><br><span class="line">+------+--------+---------------------+------+-------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |  90.0 | 02   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |  60.0 | 02   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |  80.0 | 02   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |  30.0 | 02   |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |  87.0 | 02   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |  90.0 | 02   |</span><br><span class="line">+------+--------+---------------------+------+-------+------+</span><br></pre></td></tr></table></figure><p>第二, 在这个表基础上，找出分数是最高分的</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.*, sc.score, sc.CId</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc </span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">WHERE</span> sc.CId = (</span><br><span class="line">    <span class="keyword">SELECT</span> co.CId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">    <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">    <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">) <span class="keyword">AND</span> sc.score <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score)</span><br><span class="line">    <span class="keyword">FROM</span> Score</span><br><span class="line">    <span class="keyword">WHERE</span> CId = (</span><br><span class="line">        <span class="keyword">SELECT</span> co.CId</span><br><span class="line">        <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">        <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">        <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+-------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | score | CId  |</span><br><span class="line">+------+--------+---------------------+------+-------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |  90.0 | 02   |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   |  90.0 | 02   |</span><br><span class="line">+------+--------+---------------------+------+-------+------+</span><br></pre></td></tr></table></figure><p>最后记得把表恢复到原表的成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Score <span class="keyword">SET</span> score=<span class="number">89</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">SId</span> = <span class="string">"07"</span></span><br><span class="line"><span class="keyword">and</span> CId =<span class="string">"02"</span>;</span><br></pre></td></tr></table></figure><h3 id="45-查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"><a href="#45-查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩" class="headerlink" title="45. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"></a>45. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</h3><p>解题思路：首先把分数表自连接成两份sc1和sc2，连接条件设为sc1.score = sc1.score 和 sc1.CId != sc2.CId，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sc1.SId, sc1.CId, sc1.score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc2</span><br><span class="line"><span class="keyword">ON</span> sc1.score = sc2.score <span class="keyword">AND</span> sc1.CId != sc2.CId;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure><p>然后对SId去重，<br>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sc1.SId, sc1.CId, sc1.score</span><br><span class="line"><span class="keyword">FROM</span> Score <span class="keyword">AS</span> sc1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc2</span><br><span class="line"><span class="keyword">ON</span> sc1.score = sc2.score <span class="keyword">AND</span> sc1.CId != sc2.CId</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-------+</span><br><span class="line">| SId  | CId  | score |</span><br><span class="line">+------+------+-------+</span><br><span class="line">| 03   | 02   |  80.0 |</span><br><span class="line">| 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 03   |  80.0 |</span><br><span class="line">| 01   | 01   |  80.0 |</span><br><span class="line">| 03   | 01   |  80.0 |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure><h3 id="46-统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）"><a href="#46-统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）" class="headerlink" title="46. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）"></a>46. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列（不重要）</h3><p>解题思路：对课程进行分组，分组条件设为人数&gt;5。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CId, <span class="keyword">COUNT</span>(<span class="keyword">SId</span>) <span class="keyword">AS</span> <span class="string">'student_num'</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CId</span><br><span class="line"><span class="keyword">HAVING</span> student_num &gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_num <span class="keyword">DESC</span>, CId;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+-------------+</span><br><span class="line">| CId  | student_num |</span><br><span class="line">+------+-------------+</span><br><span class="line">| 01   |           6 |</span><br><span class="line">| 02   |           6 |</span><br><span class="line">| 03   |           6 |</span><br><span class="line">+------+-------------+</span><br></pre></td></tr></table></figure><h3 id="47-检索至少选修两门课程的学生学号"><a href="#47-检索至少选修两门课程的学生学号" class="headerlink" title="47. 检索至少选修两门课程的学生学号"></a>47. 检索至少选修两门课程的学生学号</h3><p>解题思路：对分数表中的学生分组，分组条件设为课程数量&gt;=2。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(CId) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| SId  |</span><br><span class="line">+------+</span><br><span class="line">| 01   |</span><br><span class="line">| 02   |</span><br><span class="line">| 03   |</span><br><span class="line">| 04   |</span><br><span class="line">| 05   |</span><br><span class="line">| 06   |</span><br><span class="line">| 07   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h3 id="48-查询选修了全部课程的学生信息"><a href="#48-查询选修了全部课程的学生信息" class="headerlink" title="48. 查询选修了全部课程的学生信息"></a>48. 查询选修了全部课程的学生信息</h3><p>解题思路：先找出课程表中全部课程总共有多少。然后把学生表和分数表连接，并对学生进行分组，分组后对每个学生设置过滤条件，即该学生选修课程数量=全部课程数量。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname, st.Sage, st.Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname, st.Sage, st.Ssex</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(sc.CId) = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(CId)</span><br><span class="line">    <span class="keyword">FROM</span> Course</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex |</span><br><span class="line">+------+--------+---------------------+------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |</span><br><span class="line">+------+--------+---------------------+------+</span><br></pre></td></tr></table></figure><h3 id="49-查询没学过“张三”老师讲授的任一门课程的学生姓名"><a href="#49-查询没学过“张三”老师讲授的任一门课程的学生姓名" class="headerlink" title="49.查询没学过“张三”老师讲授的任一门课程的学生姓名"></a>49.查询没学过“张三”老师讲授的任一门课程的学生姓名</h3><p>解题思路：首先找出张三讲授的所有课程的id:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> co.CId</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line"><span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line"><span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span>;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| CId  |</span><br><span class="line">+------+</span><br><span class="line">| 02   |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>然后，把学生表和成绩表连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+------+------+-------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | SId  | CId  | score |</span><br><span class="line">+------+--------+---------------------+------+------+------+-------+</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   | 01   | 01   |  80.0 |</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   | 01   | 02   |  90.0 |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   | 02   | 01   |  70.0 |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   | 02   | 02   |  60.0 |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   | 03   | 01   |  80.0 |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   | 03   | 02   |  80.0 |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   | 04   | 01   |  50.0 |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   | 04   | 02   |  30.0 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   | 05   | 01   |  76.0 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   | 05   | 02   |  87.0 |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   | 06   | 01   |  31.0 |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   | 07   | 02   |  89.0 |</span><br><span class="line">| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   | 01   | 03   |  99.0 |</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   | 02   | 03   |  80.0 |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   | 03   | 03   |  80.0 |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   | 04   | 03   |  20.0 |</span><br><span class="line">| 06   | 吴兰   | 1992-01-01 00:00:00 | 女   | 06   | 03   |  34.0 |</span><br><span class="line">| 07   | 郑竹   | 1989-01-01 00:00:00 | 女   | 07   | 03   |  98.0 |</span><br><span class="line">+------+--------+---------------------+------+------+------+-------+</span><br></pre></td></tr></table></figure><p>在这张表中，找出所有学过ID为02课程的学生。先对学生及其分数分组，设置过滤条件为学过ID为02课程的学生</p><p>找出所有学过课程id为02的学生：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> st.SId, st.Sname</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line"><span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname,sc.CId</span><br><span class="line"><span class="keyword">HAVING</span> sc.CId <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> co.CId</span><br><span class="line">    <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">    <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">    <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 01   | 赵雷   |</span><br><span class="line">| 02   | 钱电   |</span><br><span class="line">| 03   | 孙风   |</span><br><span class="line">| 04   | 李云   |</span><br><span class="line">| 05   | 周梅   |</span><br><span class="line">| 07   | 郑竹   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure><p>最后，在学生表中，把这些学生排除掉，得到的就是没有学过“张三”老师讲授的任一门课程的学生姓名</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>, Sname</span><br><span class="line"><span class="keyword">FROM</span> Student </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SId</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> st.SId</span><br><span class="line">    <span class="keyword">FROM</span> Student <span class="keyword">AS</span> st <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Score <span class="keyword">AS</span> sc</span><br><span class="line">    <span class="keyword">ON</span> st.SId = sc.SId</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> st.SId, st.Sname,sc.CId</span><br><span class="line">    <span class="keyword">HAVING</span> sc.CId <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> co.CId</span><br><span class="line">        <span class="keyword">FROM</span> Course <span class="keyword">AS</span> co <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Teacher <span class="keyword">AS</span> te</span><br><span class="line">        <span class="keyword">ON</span> co.TId = te.TId</span><br><span class="line">        <span class="keyword">WHERE</span> te.Tname = <span class="string">'张三'</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>最后结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+</span><br><span class="line">| SId  | Sname  |</span><br><span class="line">+------+--------+</span><br><span class="line">| 06   | 吴兰   |</span><br><span class="line">| 09   | 张三   |</span><br><span class="line">| 10   | 李四   |</span><br><span class="line">| 11   | 李四   |</span><br><span class="line">| 12   | 赵六   |</span><br><span class="line">| 13   | 孙七   |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure><h3 id="50-查询两门以上不及格课程的同学的学号及其平均成绩"><a href="#50-查询两门以上不及格课程的同学的学号及其平均成绩" class="headerlink" title="50. 查询两门以上不及格课程的同学的学号及其平均成绩"></a>50. 查询两门以上不及格课程的同学的学号及其平均成绩</h3><p>解题思路：首先查出所有不及格的,再对学生分组，分组条件设为课程&gt;2的。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SId</span>, <span class="keyword">AVG</span>(score) <span class="keyword">as</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> Score</span><br><span class="line"><span class="keyword">WHERE</span> score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SId</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(CId) &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+-----------+</span><br><span class="line">| SId  | avg_score |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 04   |  33.33333 |</span><br><span class="line">+------+-----------+</span><br></pre></td></tr></table></figure><h3 id="51-查询各学生的年龄，只按年份来算"><a href="#51-查询各学生的年龄，只按年份来算" class="headerlink" title="51. 查询各学生的年龄，只按年份来算"></a>51. 查询各学生的年龄，只按年份来算</h3><p>解题思路：使用YEAR()函数计算每个日期的年份，</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname, Sage, <span class="keyword">YEAR</span>(<span class="keyword">now</span>()) - <span class="keyword">YEAR</span>(Sage) <span class="keyword">as</span> <span class="string">'年龄'</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------------------+--------+</span><br><span class="line">| Sname  | Sage                | 年龄   |</span><br><span class="line">+--------+---------------------+--------+</span><br><span class="line">| 赵雷   | 1990-01-01 00:00:00 |     29 |</span><br><span class="line">| 钱电   | 1990-12-21 00:00:00 |     29 |</span><br><span class="line">| 孙风   | 1990-12-20 00:00:00 |     29 |</span><br><span class="line">| 李云   | 1990-12-06 00:00:00 |     29 |</span><br><span class="line">| 周梅   | 1991-12-01 00:00:00 |     28 |</span><br><span class="line">| 吴兰   | 1992-01-01 00:00:00 |     27 |</span><br><span class="line">| 郑竹   | 1989-01-01 00:00:00 |     30 |</span><br><span class="line">| 张三   | 2017-12-20 00:00:00 |      2 |</span><br><span class="line">| 李四   | 2017-12-25 00:00:00 |      2 |</span><br><span class="line">| 李四   | 2012-06-06 00:00:00 |      7 |</span><br><span class="line">| 赵六   | 2013-06-13 00:00:00 |      6 |</span><br><span class="line">| 孙七   | 2014-06-01 00:00:00 |      5 |</span><br><span class="line">+--------+---------------------+--------+</span><br></pre></td></tr></table></figure><h3 id="52-查询各学生的年龄，按出生日期算，当前月日-lt-出生年月的月日，则年龄减一"><a href="#52-查询各学生的年龄，按出生日期算，当前月日-lt-出生年月的月日，则年龄减一" class="headerlink" title="52. 查询各学生的年龄，按出生日期算，当前月日 &lt; 出生年月的月日，则年龄减一"></a>52. 查询各学生的年龄，按出生日期算，当前月日 &lt; 出生年月的月日，则年龄减一</h3><p>解题思路：这个题目和52题不一样的地方在于，年龄需要加入月日的判断。<br>今天是2019年11月10日。<br>假如出生日期是2017年6月1日，当前月日11-10 &gt; 出生月日06-01，ta现在的年龄是2019-11-10减去2017-06-01，结果是2岁<br>假如出生日期是2017年12月1日， 当前月日11-10 &lt; 出生月日12-01，ta现在的年龄是(2019-11-10减去2017-12-01)再减去1，结果是1岁</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    Sname,</span><br><span class="line">    Sage,</span><br><span class="line">    (<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y'</span>) - <span class="keyword">DATE_FORMAT</span>(Sage,<span class="string">'%Y'</span>) - </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> </span><br><span class="line">        <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%m%d'</span>) &lt; <span class="keyword">DATE_FORMAT</span>(Sage,<span class="string">'%m%d'</span>) </span><br><span class="line">        <span class="keyword">then</span> <span class="number">1</span> </span><br><span class="line">        <span class="keyword">else</span> <span class="number">0</span> </span><br><span class="line">     <span class="keyword">end</span>)</span><br><span class="line">    ) <span class="keyword">as</span> age</span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------------------+------+</span><br><span class="line">| Sname  | Sage                | age  |</span><br><span class="line">+--------+---------------------+------+</span><br><span class="line">| 赵雷   | 1990-01-01 00:00:00 |   29 |</span><br><span class="line">| 钱电   | 1990-12-21 00:00:00 |   28 |</span><br><span class="line">| 孙风   | 1990-12-20 00:00:00 |   28 |</span><br><span class="line">| 李云   | 1990-12-06 00:00:00 |   28 |</span><br><span class="line">| 周梅   | 1991-12-01 00:00:00 |   27 |</span><br><span class="line">| 吴兰   | 1992-01-01 00:00:00 |   27 |</span><br><span class="line">| 郑竹   | 1989-01-01 00:00:00 |   30 |</span><br><span class="line">| 张三   | 2017-12-20 00:00:00 |    1 |</span><br><span class="line">| 李四   | 2017-12-25 00:00:00 |    1 |</span><br><span class="line">| 李四   | 2012-06-06 00:00:00 |    7 |</span><br><span class="line">| 赵六   | 2013-06-13 00:00:00 |    6 |</span><br><span class="line">| 孙七   | 2014-06-01 00:00:00 |    5 |</span><br></pre></td></tr></table></figure><h3 id="53-查询本周过生日的学生"><a href="#53-查询本周过生日的学生" class="headerlink" title="53. 查询本周过生日的学生"></a>53. 查询本周过生日的学生</h3><p>解题思路：使用week()函数，查出今天是第几周</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEK</span>(<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------+</span><br><span class="line">| WEEK(NOW()) |</span><br><span class="line">+-------------+</span><br><span class="line">|          45 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>学生表中的出生日期的第n周 = 今天的第n周<br>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">week</span>(Sage) <span class="keyword">AS</span> <span class="string">'出生在第几周'</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">WEEK</span>(<span class="keyword">NOW</span>()) = <span class="keyword">WEEK</span>(Sage);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="54-查询下周过生日的学生"><a href="#54-查询下周过生日的学生" class="headerlink" title="54. 查询下周过生日的学生"></a>54. 查询下周过生日的学生</h3><p>解题思路：和54题类似。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">week</span>(Sage) <span class="keyword">AS</span> <span class="string">'出生在第几周'</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">WEEK</span>(<span class="keyword">NOW</span>()+<span class="number">1</span>) = <span class="keyword">WEEK</span>(Sage);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="55-查询本月过生日的学生"><a href="#55-查询本月过生日的学生" class="headerlink" title="55. 查询本月过生日的学生"></a>55. 查询本月过生日的学生</h3><p>解题思路：首先找出现在是几月：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| MONTH(NOW()) |</span><br><span class="line">+--------------+</span><br><span class="line">|           11 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p>然后，在学生表中，找出出生月份是和本月月份相同的。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">MONTH</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(Sage) = <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="56-查询下月过生日的学生"><a href="#56-查询下月过生日的学生" class="headerlink" title="56. 查询下月过生日的学生"></a>56. 查询下月过生日的学生</h3><p>解题思路：和56题类似，只不过月份需要加1。</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">MONTH</span>(Sage) <span class="keyword">AS</span> <span class="string">'出生月份'</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(Sage) = <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>())+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+--------+---------------------+------+--------------+</span><br><span class="line">| SId  | Sname  | Sage                | Ssex | 出生月份     |</span><br><span class="line">+------+--------+---------------------+------+--------------+</span><br><span class="line">| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |           12 |</span><br><span class="line">| 03   | 孙风   | 1990-12-20 00:00:00 | 男   |           12 |</span><br><span class="line">| 04   | 李云   | 1990-12-06 00:00:00 | 男   |           12 |</span><br><span class="line">| 05   | 周梅   | 1991-12-01 00:00:00 | 女   |           12 |</span><br><span class="line">| 09   | 张三   | 2017-12-20 00:00:00 | 女   |           12 |</span><br><span class="line">| 10   | 李四   | 2017-12-25 00:00:00 | 女   |           12 |</span><br><span class="line">+------+--------+---------------------+------+--------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上流行的sql常见面试50题练习。本文使用的数据库为MySQL 8.0。&lt;/p&gt;
&lt;h3 id=&quot;测试数据介绍&quot;&gt;&lt;a href=&quot;#测试数据介绍&quot; class=&quot;headerlink&quot; title=&quot;测试数据介绍&quot;&gt;&lt;/a&gt;测试数据介绍&lt;/h3&gt;&lt;p&gt;学生表 Student(SId,Sname,Sage,Ssex)。–SId 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别&lt;/p&gt;
&lt;p&gt;课程表 Course(CId,Cname,TId) –CId –课程编号,Cname 课程名称,TId 教师编号&lt;/p&gt;
&lt;p&gt;教师表 Teacher(TId,Tname) –TId 教师编号,Tname 教师姓名&lt;/p&gt;
&lt;p&gt;成绩表 Score(SId,CId,score) –SId 学生编号,CId 课程编号,score 分数&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode中的sql练习题-hard部分</title>
    <link href="http://huanyouchen.github.io/2019/11/03/SQL-exercises-LeetCode-hard-part/"/>
    <id>http://huanyouchen.github.io/2019/11/03/SQL-exercises-LeetCode-hard-part/</id>
    <published>2019-11-02T16:00:00.000Z</published>
    <updated>2019-11-10T10:12:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含LeetCode中hard部分的SQL练习题的解题思路和通过代码，关于题目描述可以查看<a href="https://leetcode.com/problemset/database/" target="_blank" rel="noopener">leetcode原网站</a>，或者<a href="https://leetcode-cn.com/problemset/database/" target="_blank" rel="noopener">leetcode中文网站</a></p><p>关于带锁的部分练习，由于博主没有开会员，所以没有在LeetCode网站上测试过，参考了别的博客写的。</p><p>Easy部分的练习题：<a href="https://huanyouchen.github.io/2019/09/11/SQL-exercises-in-LeetCode-easy-part/">点击这里</a><br>Medium部分的练习题：<a href="https://huanyouchen.github.io/2019/09/11/SQL-exercises-LeetCode-medium-part/">点击这里</a></p><a id="more"></a><h3 id="185-Department-Top-Three-Salaries-部门工资前三高的所有员工"><a href="#185-Department-Top-Three-Salaries-部门工资前三高的所有员工" class="headerlink" title="185    Department Top Three Salaries 部门工资前三高的所有员工"></a>185    Department Top Three Salaries 部门工资前三高的所有员工</h3><p>题目描述：<a href="https://leetcode.com/problems/department-top-three-salaries/" target="_blank" rel="noopener">https://leetcode.com/problems/department-top-three-salaries/</a></p><p>输出每个部门工资最高的一批人，工资第二高的一批人，工资第三高的一批人。<br>解题思路：</p><p>最简单的方法是用窗口函数，把员工表按部门分组，在组内按薪水逆序排序，把这个排序结果表和部门表连接，连接后取各部门薪水前三的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name <span class="keyword">as</span> Department, a. <span class="keyword">Name</span> <span class="keyword">as</span> Employee, a. Salary </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> e.*, <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> DepartmentId <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span>) <span class="keyword">as</span> DeptPayRank </span><br><span class="line">    <span class="keyword">from</span> Employee e </span><br><span class="line">) a </span><br><span class="line"><span class="keyword">join</span> Department d</span><br><span class="line"><span class="keyword">on</span> a.DepartmentId = d.Id </span><br><span class="line"><span class="keyword">where</span> DeptPayRank &lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>第二种方法稍微不好理解点，过程如下：</p><p>首先找出部门不同的工资总共有多少，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| Salary |</span><br><span class="line">+--------+</span><br><span class="line">|  85000 |</span><br><span class="line">|  80000 |</span><br><span class="line">|  60000 |</span><br><span class="line">|  90000 |</span><br><span class="line">|  69000 |</span><br><span class="line">|  70000 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>找出一个部门中，工资最高，第二，第三高的。比如题目中的IT部门，工资分别为[90000, 85000, 85000, 70000, 69000]，要取出前三高的，即</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E1.salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">3</span> &gt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> E2.Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E2</span><br><span class="line">    <span class="keyword">WHERE</span> E1.Salary &lt; E2.Salary <span class="keyword">AND</span> E1.DepartmentId = E2.DepartmentId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当 e1 = e2 = [90000, 85000, 85000, 70000, 69000]时：</p><p>e1.Salary = 69000，e2.Salary 可以取值 [90000, 85000, 85000, 70000]，count(DISTINCT e2.Salary) = 3</p><p>e1.Salary = 70000，e2.Salary 可以取值 [90000, 85000, 85000]，count(DISTINCT e2.Salary) = 2</p><p>e1.Salary = 85000，e2.Salary 可以取值[90000]，count(DISTINCT e2.Salary) = 1</p><p>e1.Salary = 90000，e2.Salary 可以取值 []，count(DISTINCT e2.Salary) = 0</p><p>最后 3 &gt; count(DISTINCT e2.Salary)，所以 e1.Salary 可取值为 [90000, 85000, 85000, 70000]，即集合前 3 高的薪水</p><p>同样的Sales部门，工资分别为[8000, 60000], e1.Salary 可取值为[8000, 60000]</p><p>最后再把部门表连接起来：</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> D.Name <span class="keyword">AS</span> Department, E1.Name <span class="keyword">AS</span> Employee, E1.Salary <span class="keyword">AS</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Department <span class="keyword">AS</span> D</span><br><span class="line"><span class="keyword">ON</span> E1.departmentId = D.Id</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">3</span> &gt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> E2.Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E2</span><br><span class="line">    <span class="keyword">WHERE</span> E1.Salary &lt; E2.Salary <span class="keyword">AND</span> E1.DepartmentId = E2.departmentId</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Department, Salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>但是这样提交不对，错误提示例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;&quot;headers&quot;: &#123;&quot;Employee&quot;: [&quot;Id&quot;, &quot;Name&quot;, &quot;Salary&quot;, &quot;DepartmentId&quot;], &quot;Department&quot;: [&quot;Id&quot;, &quot;Name&quot;]&#125;, &quot;rows&quot;: &#123;&quot;Employee&quot;: [[1, &quot;Joe&quot;, 10000, 1]], &quot;Department&quot;: []&#125;&#125;</span><br><span class="line">Output:</span><br><span class="line">&#123;&quot;headers&quot;: [&quot;Department&quot;, &quot;Employee&quot;, &quot;Salary&quot;], &quot;values&quot;: [[null, &quot;Joe&quot;, 10000]]&#125;</span><br><span class="line">Expected:</span><br><span class="line">&#123;&quot;headers&quot;:[&quot;Department&quot;,&quot;Employee&quot;,&quot;Salary&quot;],&quot;values&quot;:[]&#125;</span><br></pre></td></tr></table></figure><p>题中考虑了Department表为空的情况，这时输出应该也为空。而我使用的是LEFT JOIN，还是输出了值。因此需要把两表连接方式改为INNER JOIN</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> D.Name <span class="keyword">AS</span> Department, E1.Name <span class="keyword">AS</span> Employee, E1.Salary <span class="keyword">AS</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Department <span class="keyword">AS</span> D</span><br><span class="line"><span class="keyword">ON</span> E1.departmentId = D.Id</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">3</span> &gt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> E2.Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E2</span><br><span class="line">    <span class="keyword">WHERE</span> E1.Salary &lt; E2.Salary <span class="keyword">AND</span> E1.DepartmentId = E2.departmentId</span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Department, Salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="262-Trips-and-Users"><a href="#262-Trips-and-Users" class="headerlink" title="262. Trips and Users"></a>262. Trips and Users</h3><p>题目描述：<a href="https://leetcode.com/problems/trips-and-users/" target="_blank" rel="noopener">https://leetcode.com/problems/trips-and-users/</a></p><p>解题思路：</p><p>第一种方法，先在Trips表中，按题目要求把时间在2013-10-01到2013-10-02之外的全排除，把客户和司机是被禁止的也全都排除。之后，按照日期分组，计算每组内的取消概率。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    Request_at <span class="keyword">AS</span> <span class="string">'Day'</span>, </span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="keyword">Status</span>=<span class="string">'completed'</span>, <span class="number">0</span>, <span class="number">1</span>)) / <span class="keyword">COUNT</span>(<span class="keyword">id</span>), <span class="number">2</span>) <span class="keyword">AS</span> <span class="string">'Cancellation Rate'</span></span><br><span class="line"><span class="keyword">FROM</span> trips</span><br><span class="line"><span class="keyword">WHERE</span> Client_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> Users_id</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">Users</span></span><br><span class="line">    <span class="keyword">WHERE</span> Banned = <span class="string">'No'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> Driver_Id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> Users_id</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">Users</span></span><br><span class="line">    <span class="keyword">WHERE</span> Banned = <span class="string">'No'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> Request_at <span class="keyword">between</span> <span class="string">'2013-10-01'</span> <span class="keyword">AND</span> <span class="string">'2013-10-03'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Request_at;</span><br></pre></td></tr></table></figure><h3 id="601-Human-Traffic-of-Stadium"><a href="#601-Human-Traffic-of-Stadium" class="headerlink" title="601    Human Traffic of Stadium"></a>601    Human Traffic of Stadium</h3><p>题目描述：<a href="https://leetcode.com/problems/human-traffic-of-stadium/" target="_blank" rel="noopener">https://leetcode.com/problems/human-traffic-of-stadium/</a></p><p>解题思路：首先在表中把流量少于100的都排除，然后可以利用表中的id判断日期至少连续的三天</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.*</span><br><span class="line"><span class="keyword">FROM</span> stadium <span class="keyword">as</span> a,stadium <span class="keyword">as</span> b,stadium <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> (a.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id = c.id<span class="number">-1</span>) </span><br><span class="line">  <span class="keyword">and</span> (a.people&gt;=<span class="number">100</span> <span class="keyword">and</span> b.people&gt;=<span class="number">100</span> <span class="keyword">and</span> c.people&gt;=<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+------------+--------+</span><br><span class="line">| id   | visit_date | people |</span><br><span class="line">+------+------------+--------+</span><br><span class="line">|    5 | 2017-01-05 |    145 |</span><br><span class="line">|    6 | 2017-01-06 |   1455 |</span><br><span class="line">+------+------------+--------+</span><br></pre></td></tr></table></figure><p>按题目中的条件应该输出的是5，6，7，8，但是这样写只输出了5和6，即[5,6,7]和[6,7,8]这两个连续三天中的最小的天数id，<br>原因在于<code>(a.id = b.id-1 and b.id = c.id-1)</code>把a设为了三个连续值中的最小值，因此需要改变这个写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.*</span><br><span class="line"><span class="keyword">FROM</span> stadium <span class="keyword">as</span> a,stadium <span class="keyword">as</span> b,stadium <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> a.people&gt;=<span class="number">100</span> <span class="keyword">and</span> b.people&gt;=<span class="number">100</span> <span class="keyword">and</span> c.people&gt;=<span class="number">100</span></span><br><span class="line"><span class="keyword">and</span>(</span><br><span class="line">   (a.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id = c.id<span class="number">-1</span>)  <span class="comment">-- a,b,c</span></span><br><span class="line"><span class="keyword">or</span> (b.id = a.id<span class="number">-1</span> <span class="keyword">and</span> a.id = c.id<span class="number">-1</span>)  <span class="comment">-- b,a,c</span></span><br><span class="line"><span class="keyword">or</span> (c.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id = a.id<span class="number">-1</span>)  <span class="comment">-- c,b,a</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+------------+--------+</span><br><span class="line">| id   | visit_date | people |</span><br><span class="line">+------+------------+--------+</span><br><span class="line">|    7 | 2017-01-07 |    199 |</span><br><span class="line">|    8 | 2017-01-08 |    188 |</span><br><span class="line">|    6 | 2017-01-06 |   1455 |</span><br><span class="line">|    5 | 2017-01-05 |    145 |</span><br><span class="line">|    7 | 2017-01-07 |    199 |</span><br><span class="line">|    6 | 2017-01-06 |   1455 |</span><br><span class="line">+------+------------+--------+</span><br></pre></td></tr></table></figure><p>可以看出[5,6,7]和[6,7,8]这两个连续超过100人数三次的，6和7重复出现了一次，因此再对这个结果去重</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.*</span><br><span class="line"><span class="keyword">FROM</span> stadium <span class="keyword">as</span> a,stadium <span class="keyword">as</span> b,stadium <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> a.people&gt;=<span class="number">100</span> <span class="keyword">and</span> b.people&gt;=<span class="number">100</span> <span class="keyword">and</span> c.people&gt;=<span class="number">100</span></span><br><span class="line"><span class="keyword">and</span>(</span><br><span class="line">   (a.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id = c.id<span class="number">-1</span>)  <span class="comment">-- a,b,c   a是第一天</span></span><br><span class="line"><span class="keyword">or</span> (b.id = a.id<span class="number">-1</span> <span class="keyword">and</span> a.id = c.id<span class="number">-1</span>)  <span class="comment">-- b,a,c   a是第二天</span></span><br><span class="line"><span class="keyword">or</span> (c.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id = a.id<span class="number">-1</span>)  <span class="comment">-- c,b,a   a是第三天</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.id;</span><br></pre></td></tr></table></figure><h3 id="569-Median-Employee-Salary-员工薪水中位数"><a href="#569-Median-Employee-Salary-员工薪水中位数" class="headerlink" title="569    Median Employee Salary    员工薪水中位数"></a>569    Median Employee Salary    员工薪水中位数</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The Employee table holds all employees. The employee table has three columns: Employee Id, Company Name, and Salary.</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">|Id   | Company    | Salary |</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">|1    | A          | 2341   |</span><br><span class="line">|2    | A          | 341    |</span><br><span class="line">|3    | A          | 15     |</span><br><span class="line">|4    | A          | 15314  |</span><br><span class="line">|5    | A          | 451    |</span><br><span class="line">|6    | A          | 513    |</span><br><span class="line">|7    | B          | 15     |</span><br><span class="line">|8    | B          | 13     |</span><br><span class="line">|9    | B          | 1154   |</span><br><span class="line">|10   | B          | 1345   |</span><br><span class="line">|11   | B          | 1221   |</span><br><span class="line">|12   | B          | 234    |</span><br><span class="line">|13   | C          | 2345   |</span><br><span class="line">|14   | C          | 2645   |</span><br><span class="line">|15   | C          | 2645   |</span><br><span class="line">|16   | C          | 2652   |</span><br><span class="line">|17   | C          | 65     |</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">Write a SQL query to find the median salary of each company. </span><br><span class="line">Bonus points if you can solve it without using any built-in SQL functions.</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">|Id   | Company    | Salary |</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">|5    | A          | 451    |</span><br><span class="line">|6    | A          | 513    |</span><br><span class="line">|12   | B          | 234    |</span><br><span class="line">|9    | B          | 1154   |</span><br><span class="line">|14   | C          | 2645   |</span><br><span class="line">+-----+------------+--------+</span><br></pre></td></tr></table></figure><p>解题思路：先把公司分组，然后算一下每组公司的员工数量，把工资排序，取中位数的工资。这道题本来以为简单的，结果写了半天都没写对。。还是看别人写的。</p><p>主要在于中位数的判断。看别人的解题思路，中位数的特点在于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABS(所有大于等于中位数的数字的数量 - 所有小于等于中位数的数字的数量) &lt;&#x3D; 1</span><br></pre></td></tr></table></figure><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ABS</span>(</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">Id</span>) <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E1 <span class="keyword">WHERE</span> E1.Company = E.Company <span class="keyword">AND</span> E1.Salary &lt;= E.Salary)</span><br><span class="line">    -</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">Id</span>) <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E2 <span class="keyword">WHERE</span> E2.Company = E.Company <span class="keyword">AND</span> E2.Salary &gt;= E.Salary)</span><br><span class="line">) &lt;= <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Company, Salary;</span><br></pre></td></tr></table></figure><h3 id="571-Find-Median-Given-Frequency-of-Numbers-给定数字的频率查询中位数"><a href="#571-Find-Median-Given-Frequency-of-Numbers-给定数字的频率查询中位数" class="headerlink" title="571    Find Median Given Frequency of Numbers     给定数字的频率查询中位数"></a>571    Find Median Given Frequency of Numbers     给定数字的频率查询中位数</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">The Numbers table keeps the value of number and its frequency.</span><br><span class="line"></span><br><span class="line">+----------+-------------+</span><br><span class="line">|  Number  |  Frequency  |</span><br><span class="line">+----------+-------------|</span><br><span class="line">|  0       |  7          |</span><br><span class="line">|  1       |  1          |</span><br><span class="line">|  2       |  3          |</span><br><span class="line">|  3       |  1          |</span><br><span class="line">+----------+-------------+</span><br><span class="line">In this table, the numbers are 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, so the median is (0 + 0) &#x2F; 2 &#x3D; 0.</span><br><span class="line"></span><br><span class="line">+--------+</span><br><span class="line">| median |</span><br><span class="line">+--------|</span><br><span class="line">| 0.0000 |</span><br><span class="line">+--------+</span><br><span class="line">Write a query to find the median of all numbers and name the result as median.</span><br></pre></td></tr></table></figure><p>解题思路：这个还没搞懂，代码抄别人的。。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(n.Number) <span class="keyword">AS</span> <span class="keyword">median</span></span><br><span class="line"><span class="keyword">FROM</span> Numbers n</span><br><span class="line"><span class="keyword">WHERE</span> n.Frequency &gt;= <span class="keyword">ABS</span>((<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(Frequency) <span class="keyword">FROM</span> Numbers <span class="keyword">WHERE</span> <span class="built_in">Number</span> &lt;= n.Number) -</span><br><span class="line">                         (<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(Frequency) <span class="keyword">FROM</span> Numbers <span class="keyword">WHERE</span> <span class="built_in">Number</span> &gt;= n.Number))</span><br></pre></td></tr></table></figure><h3 id="579-Find-Cumulative-Salary-of-an-Employee-查询员工的累计薪水"><a href="#579-Find-Cumulative-Salary-of-an-Employee-查询员工的累计薪水" class="headerlink" title="579    Find Cumulative Salary of an Employee  查询员工的累计薪水"></a>579    Find Cumulative Salary of an Employee  查询员工的累计薪水</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">The Employee table holds the salary information in a year.</span><br><span class="line"></span><br><span class="line">Write a SQL to get the cumulative sum of an employee&#39;s salary over a period of 3 months but exclude the most recent month.</span><br><span class="line"></span><br><span class="line">The result should be displayed by &#39;Id&#39; ascending, and then by &#39;Month&#39; descending.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line">| Id | Month | Salary |</span><br><span class="line">|----|-------|--------|</span><br><span class="line">| 1  | 1     | 20     |</span><br><span class="line">| 2  | 1     | 20     |</span><br><span class="line">| 1  | 2     | 30     |</span><br><span class="line">| 2  | 2     | 30     |</span><br><span class="line">| 3  | 2     | 40     |</span><br><span class="line">| 1  | 3     | 40     |</span><br><span class="line">| 3  | 3     | 60     |</span><br><span class="line">| 1  | 4     | 60     |</span><br><span class="line">| 3  | 4     | 70     |</span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">| Id | Month | Salary |</span><br><span class="line">|----|-------|--------|</span><br><span class="line">| 1  | 3     | 90     |</span><br><span class="line">| 1  | 2     | 50     |</span><br><span class="line">| 1  | 1     | 20     |</span><br><span class="line">| 2  | 1     | 20     |</span><br><span class="line">| 3  | 3     | 100    |</span><br><span class="line">| 3  | 2     | 40     |</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Employee &#39;1&#39; has 3 salary records for the following 3 months except the most recent month &#39;4&#39;: salary 40 for month &#39;3&#39;, 30 for month &#39;2&#39; and 20 for month &#39;1&#39;</span><br><span class="line">So the cumulative sum of salary of this employee over 3 months is 90(40+30+20), 50(30+20) and 20 respectively.</span><br><span class="line"></span><br><span class="line">| Id | Month | Salary |</span><br><span class="line">|----|-------|--------|</span><br><span class="line">| 1  | 3     | 90     |</span><br><span class="line">| 1  | 2     | 50     |</span><br><span class="line">| 1  | 1     | 20     |</span><br><span class="line">Employee &#39;2&#39; only has one salary record (month &#39;1&#39;) except its most recent month &#39;2&#39;.</span><br><span class="line">| Id | Month | Salary |</span><br><span class="line">|----|-------|--------|</span><br><span class="line">| 2  | 1     | 20     |</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Employ &#39;3&#39; has two salary records except its most recent pay month &#39;4&#39;: month &#39;3&#39; with 60 and month &#39;2&#39; with 40. So the cumulative salary is as following.</span><br><span class="line">| Id | Month | Salary |</span><br><span class="line">|----|-------|--------|</span><br><span class="line">| 3  | 3     | 100    |</span><br><span class="line">| 3  | 2     | 40     |</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><p>第一种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.id, </span><br><span class="line">    a.month,</span><br><span class="line">    <span class="keyword">SUM</span>(b.salary) Salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee a <span class="keyword">JOIN</span> Employee b <span class="keyword">ON</span></span><br><span class="line">    a.id = b.id <span class="keyword">AND</span></span><br><span class="line">    a.month - b.month &gt;= <span class="number">0</span> <span class="keyword">AND</span></span><br><span class="line">    a.month - b.month &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a.id, a.month</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    (a.id, a.month) <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">MAX</span>(<span class="keyword">month</span>) <span class="keyword">FROM</span> Employee <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    a.id, a.month <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.Id, <span class="keyword">MAX</span>(e2.Month) <span class="keyword">AS</span> <span class="keyword">Month</span>, <span class="keyword">SUM</span>(e2.Salary) <span class="keyword">AS</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee e1, Employee e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.Id = e2.Id <span class="keyword">AND</span> e2.Month <span class="keyword">BETWEEN</span> (e1.Month - <span class="number">3</span>) <span class="keyword">AND</span> (e1.Month - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e1.Id, e1.Month</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">Id</span>, <span class="keyword">Month</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="615-Average-Salary-Departments-VS-Company-平均工资：部门与公司比较"><a href="#615-Average-Salary-Departments-VS-Company-平均工资：部门与公司比较" class="headerlink" title="615    Average Salary: Departments VS Company 平均工资：部门与公司比较"></a>615    Average Salary: Departments VS Company 平均工资：部门与公司比较</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Given two tables as below, write a query to display the comparison result (higher&#x2F;lower&#x2F;same) of the average salary of employees in a department to the company&#39;s average salary.</span><br><span class="line"> </span><br><span class="line">Table: salary</span><br><span class="line">| id | employee_id | amount | pay_date   |</span><br><span class="line">|----|-------------|--------|------------|</span><br><span class="line">| 1  | 1           | 9000   | 2017-03-31 |</span><br><span class="line">| 2  | 2           | 6000   | 2017-03-31 |</span><br><span class="line">| 3  | 3           | 10000  | 2017-03-31 |</span><br><span class="line">| 4  | 1           | 7000   | 2017-02-28 |</span><br><span class="line">| 5  | 2           | 6000   | 2017-02-28 |</span><br><span class="line">| 6  | 3           | 8000   | 2017-02-28 |</span><br><span class="line"></span><br><span class="line">The employee_id column refers to the employee_id in the following table employee.</span><br><span class="line"></span><br><span class="line">| employee_id | department_id |</span><br><span class="line">|-------------|---------------|</span><br><span class="line">| 1           | 1             |</span><br><span class="line">| 2           | 2             |</span><br><span class="line">| 3           | 2             |</span><br><span class="line"> </span><br><span class="line">So for the sample data above, the result is:</span><br><span class="line"></span><br><span class="line">| pay_month | department_id | comparison  |</span><br><span class="line">|-----------|---------------|-------------|</span><br><span class="line">| 2017-03   | 1             | higher      |</span><br><span class="line">| 2017-03   | 2             | lower       |</span><br><span class="line">| 2017-02   | 1             | same        |</span><br><span class="line">| 2017-02   | 2             | same        |</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line"> </span><br><span class="line">In March, the company&#39;s average salary is (9000+6000+10000)&#x2F;3 &#x3D; 8333.33...</span><br><span class="line"></span><br><span class="line">The average salary for department &#39;1&#39; is 9000, which is the salary of employee_id &#39;1&#39; since there is only one employee in this department. So the comparison result is &#39;higher&#39; since 9000 &gt; 8333.33 obviously.</span><br><span class="line"> </span><br><span class="line">The average salary of department &#39;2&#39; is (6000 + 10000)&#x2F;2 &#x3D; 8000, which is the average of employee_id &#39;2&#39; and &#39;3&#39;. So the comparison result is &#39;lower&#39; since 8000 &lt; 8333.33.</span><br><span class="line"></span><br><span class="line">With he same formula for the average salary comparison in February, the result is &#39;same&#39; since both the department &#39;1&#39; and &#39;2&#39; have the same average salary with the company, which is 7000.</span><br></pre></td></tr></table></figure><p>解题思路：显示部门员工平均工资与公司平均工资的比较结果(更高/更低/相同)。</p><p>那么先找出公司每个月的平均工资：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, <span class="keyword">AVG</span>(amount) <span class="keyword">AS</span> <span class="string">`avg_salary`</span></span><br><span class="line"><span class="keyword">FROM</span> salary <span class="keyword">AS</span> s <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">ON</span> s.employee_id = e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">LEFT</span>(s.pay_date, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LEFT</span>(s.pay_date, <span class="number">7</span>) <span class="keyword">DESC</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------+-------------+--------+------------+-------------+---------------+------------+</span><br><span class="line">| id   | employee_id | amount | pay_date   | employee_id | department_id | avg_salary |</span><br><span class="line">+------+-------------+--------+------------+-------------+---------------+------------+</span><br><span class="line">|    1 |           1 |   9000 | 2017-03-31 |           1 |             1 |  8333.3333 |</span><br><span class="line">|    4 |           1 |   7000 | 2017-02-28 |           1 |             1 |  7000.0000 |</span><br><span class="line">+------+-------------+--------+------------+-------------+---------------+------------+</span><br></pre></td></tr></table></figure><p>然后找每个部门的每月平均工资：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *,  <span class="keyword">AVG</span>(amount) <span class="keyword">AS</span> <span class="string">`dept_avg_salary`</span></span><br><span class="line"><span class="keyword">FROM</span> salary <span class="keyword">AS</span> s <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e </span><br><span class="line"><span class="keyword">ON</span> s.employee_id = e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">LEFT</span>(s.pay_date, <span class="number">7</span>), e.department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LEFT</span>(s.pay_date, <span class="number">7</span>) <span class="keyword">DESC</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+-------------+--------+------------+-------------+---------------+-----------------+</span><br><span class="line">| id   | employee_id | amount | pay_date   | employee_id | department_id | dept_avg_salary |</span><br><span class="line">+------+-------------+--------+------------+-------------+---------------+-----------------+</span><br><span class="line">|    1 |           1 |   9000 | 2017-03-31 |           1 |             1 |       9000.0000 |</span><br><span class="line">|    2 |           2 |   6000 | 2017-03-31 |           2 |             2 |       8000.0000 |</span><br><span class="line">|    4 |           1 |   7000 | 2017-02-28 |           1 |             1 |       7000.0000 |</span><br><span class="line">|    5 |           2 |   6000 | 2017-02-28 |           2 |             2 |       7000.0000 |</span><br><span class="line">+------+-------------+--------+------------+-------------+---------------+-----------------+</span><br></pre></td></tr></table></figure><p>然后把这两个表连接起来,</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(pay_date, <span class="string">'%Y-%m'</span>) <span class="keyword">AS</span> pay_month, <span class="keyword">AVG</span>(amount) <span class="keyword">AS</span> <span class="string">`avg_salary`</span></span><br><span class="line"><span class="keyword">FROM</span> salary <span class="keyword">AS</span> s <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">ON</span> s.employee_id = e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pay_month </span><br><span class="line">) <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> e.department_id, <span class="keyword">DATE_FORMAT</span>(pay_date, <span class="string">'%Y-%m'</span>) <span class="keyword">AS</span> pay_month, <span class="keyword">AVG</span>(amount) <span class="keyword">AS</span> <span class="string">`dept_avg_salary`</span></span><br><span class="line"><span class="keyword">FROM</span> salary <span class="keyword">AS</span> s <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e </span><br><span class="line"><span class="keyword">ON</span> s.employee_id = e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pay_month, e.department_id</span><br><span class="line">) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.pay_month = B.pay_month</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> B.pay_month <span class="keyword">DESC</span>, B.department_id;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-----------+------------+---------------+-----------+-----------------+</span><br><span class="line">| pay_month | avg_salary | department_id | pay_month | dept_avg_salary |</span><br><span class="line">+-----------+------------+---------------+-----------+-----------------+</span><br><span class="line">| 2017-03   |  8333.3333 |             1 | 2017-03   |       9000.0000 |</span><br><span class="line">| 2017-03   |  8333.3333 |             2 | 2017-03   |       8000.0000 |</span><br><span class="line">| 2017-02   |  7000.0000 |             1 | 2017-02   |       7000.0000 |</span><br><span class="line">| 2017-02   |  7000.0000 |             2 | 2017-02   |       7000.0000 |</span><br><span class="line">+-----------+------------+---------------+-----------+-----------------+</span><br></pre></td></tr></table></figure><p>最后，对这张表做比较，使用CASE WHEN语句来实现高于，低于，等于的判断。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.pay_month,</span><br><span class="line">   B.department_id,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> B.dept_avg_salary &gt; A.avg_salary <span class="keyword">THEN</span> <span class="string">'higher'</span></span><br><span class="line"><span class="keyword">WHEN</span> B.dept_avg_salary &lt; A.avg_salary <span class="keyword">THEN</span> <span class="string">'lower'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'same'</span></span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'comparison'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(pay_date, <span class="string">'%Y-%m'</span>) <span class="keyword">AS</span> pay_month, <span class="keyword">AVG</span>(amount) <span class="keyword">AS</span> <span class="string">`avg_salary`</span></span><br><span class="line"><span class="keyword">FROM</span> salary <span class="keyword">AS</span> s <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">ON</span> s.employee_id = e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pay_month </span><br><span class="line">) <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> e.department_id, <span class="keyword">DATE_FORMAT</span>(pay_date, <span class="string">'%Y-%m'</span>) <span class="keyword">AS</span> pay_month, <span class="keyword">AVG</span>(amount) <span class="keyword">AS</span> <span class="string">`dept_avg_salary`</span></span><br><span class="line"><span class="keyword">FROM</span> salary <span class="keyword">AS</span> s <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e </span><br><span class="line"><span class="keyword">ON</span> s.employee_id = e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pay_month, e.department_id</span><br><span class="line">) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.pay_month = B.pay_month</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> B.pay_month <span class="keyword">DESC</span>, B.department_id;</span><br></pre></td></tr></table></figure><h3 id="618-Students-Report-By-Geography-学生地理信息报告"><a href="#618-Students-Report-By-Geography-学生地理信息报告" class="headerlink" title="618    Students Report By Geography 学生地理信息报告"></a>618    Students Report By Geography 学生地理信息报告</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A U.S graduate school has students from Asia, Europe and America. The students&#39; location information are stored in table student as below.</span><br><span class="line"></span><br><span class="line">| name   | continent |</span><br><span class="line">|--------|-----------|</span><br><span class="line">| Jack   | America   |</span><br><span class="line">| Pascal | Europe    |</span><br><span class="line">| Xi     | Asia      |</span><br><span class="line">| Jane   | America   |</span><br><span class="line"></span><br><span class="line">Pivot the continent column in this table so that each name is sorted alphabetically and displayed underneath its corresponding continent. The output headers should be America, Asia and Europe respectively. </span><br><span class="line">It is guaranteed that the student number from America is no less than either Asia or Europe.</span><br><span class="line"></span><br><span class="line">For the sample input, the output is:</span><br><span class="line"></span><br><span class="line">| America | Asia | Europe |</span><br><span class="line">|---------|------|--------|</span><br><span class="line">| Jack    | Xi   | Pascal |</span><br><span class="line">| Jane    |      |        |</span><br><span class="line"> </span><br><span class="line">Follow-up: If it is unknown which continent has the most students, can you write a query to generate the student report?</span><br></pre></td></tr></table></figure><p>解题思路：这个是行转列问题，但是我没有思路怎么做。。看网上的方法是这样的</p><p>第一种思路，使用自定义变量，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @am := @am + <span class="number">1</span> <span class="keyword">AS</span> row_id, <span class="keyword">name</span> <span class="keyword">AS</span> America</span><br><span class="line"><span class="keyword">FROM</span> student, (<span class="keyword">SELECT</span> @am := <span class="number">0</span>) <span class="keyword">AS</span> init</span><br><span class="line"><span class="keyword">WHERE</span> continent = <span class="string">'America'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------+</span><br><span class="line">| row_id | America |</span><br><span class="line">+--------+---------+</span><br><span class="line">|      1 | Jack    |</span><br><span class="line">|      2 | Jane    |</span><br><span class="line">+--------+---------+</span><br></pre></td></tr></table></figure><p>类似的，得到Asia和Europe地区的，然后将这三张表连接起来</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.name <span class="keyword">AS</span> America, b.name <span class="keyword">AS</span> Asia, c.name <span class="keyword">AS</span> Europe</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> @r1 := @r1 + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">id</span>, <span class="keyword">name</span> </span><br><span class="line">    <span class="keyword">FROM</span> student, (<span class="keyword">SELECT</span> @r1 := <span class="number">0</span>) init </span><br><span class="line">    <span class="keyword">WHERE</span> continent = <span class="string">'America'</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span></span><br><span class="line">) a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> @r2 := @r2 + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">id</span>, <span class="keyword">name</span> </span><br><span class="line">    <span class="keyword">FROM</span> student, (<span class="keyword">SELECT</span> @r2 := <span class="number">0</span>) init </span><br><span class="line">    <span class="keyword">WHERE</span> continent = <span class="string">'Asia'</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span></span><br><span class="line">) b</span><br><span class="line"><span class="keyword">ON</span> a.id = b.id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> @r3 := @r3 + <span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">id</span>, <span class="keyword">name</span> </span><br><span class="line">    <span class="keyword">FROM</span> student, (<span class="keyword">SELECT</span> @r3 := <span class="number">0</span>) init </span><br><span class="line">    <span class="keyword">WHERE</span> continent = <span class="string">'Europe'</span> </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span></span><br><span class="line">) c</span><br><span class="line"><span class="keyword">ON</span> a.id = c.id</span><br><span class="line"><span class="keyword">OR</span> b.id = c.id;</span><br></pre></td></tr></table></figure><p>第二种思路，使用窗口函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> America, Asia, Europe</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> continentorder,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> continent = <span class="string">'America'</span> <span class="keyword">THEN</span> <span class="keyword">name</span> <span class="keyword">END</span> )<span class="keyword">AS</span> America,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> continent = <span class="string">'Europe'</span> <span class="keyword">THEN</span> <span class="keyword">name</span> <span class="keyword">END</span> )<span class="keyword">AS</span> Europe,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> continent = <span class="string">'Asia'</span> <span class="keyword">THEN</span> <span class="keyword">name</span> <span class="keyword">END</span> )<span class="keyword">AS</span> Asia</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> *,</span><br><span class="line">        ROW_NUMBER()<span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> continent <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>) <span class="keyword">AS</span> continentorder</span><br><span class="line">        <span class="keyword">FROM</span> student</span><br><span class="line">    ) <span class="keyword">AS</span> <span class="keyword">SOURCE</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> continentorder</span><br><span class="line">)temp;</span><br></pre></td></tr></table></figure><h3 id="1097-Game-Play-Analysis-V"><a href="#1097-Game-Play-Analysis-V" class="headerlink" title="1097 Game Play Analysis V"></a>1097 Game Play Analysis V</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">(player_id, event_date) is the primary key of this table.</span><br><span class="line">This table shows the activity of players of some game.</span><br><span class="line">Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">We define the install date of a player to be the first login day of that player.</span><br><span class="line"></span><br><span class="line">We also define day 1 retention of some date X to be the number of players whose install date is X and they logged back in on the day right after X, divided by the number of players whose install date is X, rounded to 2 decimal places.</span><br><span class="line"></span><br><span class="line">Write an SQL query that reports for each install date, the number of players that installed the game on that day and the day 1 retention.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-03-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-01 | 0            |</span><br><span class="line">| 3         | 4         | 2016-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+----------+----------------+</span><br><span class="line">| install_dt | installs | Day1_retention |</span><br><span class="line">+------------+----------+----------------+</span><br><span class="line">| 2016-03-01 | 2        | 0.50           |</span><br><span class="line">| 2017-06-25 | 1        | 0.00           |</span><br><span class="line">+------------+----------+----------------+</span><br><span class="line">Player 1 and 3 installed the game on 2016-03-01 but only player 1 logged back in on 2016-03-02 so the day 1 retention of 2016-03-01 is 1 &#x2F; 2 &#x3D; 0.50</span><br><span class="line">Player 2 installed the game on 2017-06-25 but didn&#39;t log back in on 2017-06-26 so the day 1 retention of 2017-06-25 is 0 &#x2F; 1 &#x3D; 0.00</span><br></pre></td></tr></table></figure><p>解题思路：找出每个玩家的安装日期，以及安装日期后的一日留存。</p><p>首先找出每个玩家的安装日期，即第一次登陆的日期，对玩家分组，求每组的最小日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date) <span class="keyword">AS</span> <span class="string">'install_dt'</span></span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id;</span><br></pre></td></tr></table></figure><p>得到每个玩家的按照日期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+------------+</span><br><span class="line">| player_id | install_dt |</span><br><span class="line">+-----------+------------+</span><br><span class="line">|         1 | 2016-03-01 |</span><br><span class="line">|         2 | 2017-06-25 |</span><br><span class="line">|         3 | 2016-03-01 |</span><br><span class="line">+-----------+------------+</span><br></pre></td></tr></table></figure><p>然后将这个表和原表连接，统计每个玩家第二天登陆的情况，因为存在第二天玩家没有登陆，因此，使用左连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date) <span class="keyword">AS</span> <span class="string">'install_dt'</span></span><br><span class="line">        <span class="keyword">FROM</span> Activity</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line">    ) <span class="keyword">AS</span> A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Activity <span class="keyword">AS</span> B </span><br><span class="line"><span class="keyword">ON</span> A.player_id = B.player_id</span><br><span class="line"><span class="keyword">AND</span> B.event_date = <span class="keyword">DATE_ADD</span>(A.install_dt, <span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+------------+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | install_dt | player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+------------+-----------+-----------+------------+--------------+</span><br><span class="line">|         1 | 2016-03-01 |         1 |         2 | 2016-03-02 |            6 |</span><br><span class="line">|         2 | 2017-06-25 |      NULL |      NULL | NULL       |         NULL |</span><br><span class="line">|         3 | 2016-03-01 |      NULL |      NULL | NULL       |         NULL |</span><br><span class="line">+-----------+------------+-----------+-----------+------------+--------------+</span><br></pre></td></tr></table></figure><p>有了这个结果后，计算一日留存率，即首日安装后第二天又登陆的玩家 / 首日安装的所有玩家</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> install_dt, <span class="keyword">COUNT</span>(player_id) <span class="keyword">AS</span> installs,</span><br><span class="line">   <span class="keyword">ROUND</span>( <span class="keyword">COUNT</span>(next_day) / <span class="keyword">COUNT</span>(player_id), <span class="number">2</span> ) <span class="keyword">AS</span> Day1_retention</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> A.player_id, A.install_dt, B.event_date <span class="keyword">AS</span> <span class="string">'next_day'</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date) <span class="keyword">AS</span> <span class="string">'install_dt'</span></span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line">) <span class="keyword">AS</span> A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Activity <span class="keyword">AS</span> B </span><br><span class="line"><span class="keyword">ON</span> A.player_id = B.player_id</span><br><span class="line"><span class="keyword">AND</span> B.event_date = <span class="keyword">DATE_ADD</span>(A.install_dt,<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>)</span><br><span class="line">) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> install_dt;</span><br></pre></td></tr></table></figure><h3 id="1127-User-Purchase-Platform"><a href="#1127-User-Purchase-Platform" class="headerlink" title="1127 User Purchase Platform"></a>1127 User Purchase Platform</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Table: Spending</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| user_id     | int     |</span><br><span class="line">| spend_date  | date    |</span><br><span class="line">| platform    | enum    | </span><br><span class="line">| amount      | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">The table logs the spendings history of users that make purchases from an online shopping website which has a desktop and a mobile application.</span><br><span class="line">(user_id, spend_date, platform) is the primary key of this table.</span><br><span class="line">The platform column is an ENUM type of (&#39;desktop&#39;, &#39;mobile&#39;).</span><br><span class="line">Write an SQL query to find the total number of users and the total amount spent using mobile only, desktop only and both mobile and desktop together for each date.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Spending table:</span><br><span class="line">+---------+------------+----------+--------+</span><br><span class="line">| user_id | spend_date | platform | amount |</span><br><span class="line">+---------+------------+----------+--------+</span><br><span class="line">| 1       | 2019-07-01 | mobile   | 100    |</span><br><span class="line">| 1       | 2019-07-01 | desktop  | 100    |</span><br><span class="line">| 2       | 2019-07-01 | mobile   | 100    |</span><br><span class="line">| 2       | 2019-07-02 | mobile   | 100    |</span><br><span class="line">| 3       | 2019-07-01 | desktop  | 100    |</span><br><span class="line">| 3       | 2019-07-02 | desktop  | 100    |</span><br><span class="line">+---------+------------+----------+--------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+----------+--------------+-------------+</span><br><span class="line">| spend_date | platform | total_amount | total_users |</span><br><span class="line">+------------+----------+--------------+-------------+</span><br><span class="line">| 2019-07-01 | desktop  | 100          | 1           |</span><br><span class="line">| 2019-07-01 | mobile   | 100          | 1           |</span><br><span class="line">| 2019-07-01 | both     | 200          | 1           |</span><br><span class="line">| 2019-07-02 | desktop  | 100          | 1           |</span><br><span class="line">| 2019-07-02 | mobile   | 100          | 1           |</span><br><span class="line">| 2019-07-02 | both     | 0            | 0           |</span><br><span class="line">+------------+----------+--------------+-------------+ </span><br><span class="line">On 2019-07-01, user 1 purchased using both desktop and mobile, user 2 purchased using mobile only and user 3 purchased using desktop only.</span><br><span class="line">On 2019-07-02, user 2 purchased using mobile only,  user 3 purchased using desktop only and no one purchased using both platforms.</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>首先按照spend_date和user_id分组，统计平台信息，如果两个平台都有，就设为both</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">        spend_date,</span><br><span class="line">        user_id,</span><br><span class="line">        (<span class="keyword">CASE</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> platform)</span><br><span class="line">              <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> platform</span><br><span class="line">              <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'both'</span></span><br><span class="line">         <span class="keyword">END</span>) <span class="keyword">AS</span> platform,</span><br><span class="line">         <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> amount</span><br><span class="line"><span class="keyword">FROM</span> spending</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, user_id;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------+---------+----------+--------+</span><br><span class="line">| spend_date | user_id | platform | amount |</span><br><span class="line">+------------+---------+----------+--------+</span><br><span class="line">| 2019-07-01 |       1 | both     |    200 |</span><br><span class="line">| 2019-07-01 |       2 | mobile   |    100 |</span><br><span class="line">| 2019-07-01 |       3 | desktop  |    100 |</span><br><span class="line">| 2019-07-02 |       2 | mobile   |    100 |</span><br><span class="line">| 2019-07-02 |       3 | desktop  |    100 |</span><br><span class="line">+------------+---------+----------+--------+</span><br></pre></td></tr></table></figure><p>然后统计每天对应平台的总量和总用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> spend_date,</span><br><span class="line">       platform,</span><br><span class="line">       <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> total_amount,</span><br><span class="line">       <span class="keyword">COUNT</span>(user_id) <span class="keyword">AS</span> total_users</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        spend_date,</span><br><span class="line">        user_id,</span><br><span class="line">        (<span class="keyword">CASE</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> platform)</span><br><span class="line">              <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> platform</span><br><span class="line">              <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'both'</span></span><br><span class="line">         <span class="keyword">END</span>) <span class="keyword">AS</span> platform,</span><br><span class="line">         <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> amount</span><br><span class="line">    <span class="keyword">FROM</span> spending</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, user_id</span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, platform;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+--------------+-------------+</span><br><span class="line">| spend_date | platform | total_amount | total_users |</span><br><span class="line">+------------+----------+--------------+-------------+</span><br><span class="line">| 2019-07-01 | both     |          200 |           1 |</span><br><span class="line">| 2019-07-01 | desktop  |          100 |           1 |</span><br><span class="line">| 2019-07-01 | mobile   |          100 |           1 |</span><br><span class="line">| 2019-07-02 | desktop  |          100 |           1 |</span><br><span class="line">| 2019-07-02 | mobile   |          100 |           1 |</span><br><span class="line">+------------+----------+--------------+-------------+</span><br></pre></td></tr></table></figure><p>这个结果和题目中给出的结果表还差对7-2日both结果的统计，因此做出来一个如下的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'desktop'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'mobile'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'both'</span> <span class="keyword">AS</span> platform;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| platform |</span><br><span class="line">+----------+</span><br><span class="line">| desktop  |</span><br><span class="line">| mobile   |</span><br><span class="line">| both     |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>连接表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(spend_date), a.platform   </span><br><span class="line"><span class="keyword">FROM</span> Spending <span class="keyword">JOIN</span></span><br><span class="line">    (   <span class="keyword">SELECT</span> <span class="string">'desktop'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="string">'mobile'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="string">'both'</span> <span class="keyword">AS</span> platform</span><br><span class="line">    ) <span class="keyword">AS</span> a</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+</span><br><span class="line">| spend_date | platform |</span><br><span class="line">+------------+----------+</span><br><span class="line">| 2019-07-01 | desktop  |</span><br><span class="line">| 2019-07-01 | mobile   |</span><br><span class="line">| 2019-07-01 | both     |</span><br><span class="line">| 2019-07-02 | desktop  |</span><br><span class="line">| 2019-07-02 | mobile   |</span><br><span class="line">| 2019-07-02 | both     |</span><br><span class="line">+------------+----------+</span><br></pre></td></tr></table></figure><p>再连接这两张大表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(spend_date), a.platform   <span class="comment">-- table aa</span></span><br><span class="line">    <span class="keyword">FROM</span> Spending <span class="keyword">JOIN</span></span><br><span class="line">        (   <span class="keyword">SELECT</span> <span class="string">'desktop'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">SELECT</span> <span class="string">'mobile'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">SELECT</span> <span class="string">'both'</span> <span class="keyword">AS</span> platform</span><br><span class="line">        ) <span class="keyword">AS</span> a </span><br><span class="line">) <span class="keyword">AS</span> ta</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> spend_date,</span><br><span class="line">       platform,</span><br><span class="line">       <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> total_amount,</span><br><span class="line">       <span class="keyword">COUNT</span>(user_id) <span class="keyword">AS</span> total_users</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> </span><br><span class="line">            spend_date,</span><br><span class="line">            user_id,</span><br><span class="line">            (<span class="keyword">CASE</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> platform)</span><br><span class="line">                <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> platform</span><br><span class="line">                <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'both'</span></span><br><span class="line">            <span class="keyword">END</span>) <span class="keyword">AS</span> platform,</span><br><span class="line">            <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> amount</span><br><span class="line">        <span class="keyword">FROM</span> spending</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, user_id</span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, platform</span><br><span class="line">) <span class="keyword">as</span> tb</span><br><span class="line"><span class="keyword">ON</span> ta.platform = tb.platform</span><br><span class="line"><span class="keyword">AND</span> ta.spend_date = tb.spend_date;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+------------+----------+--------------+-------------+</span><br><span class="line">| spend_date | platform | spend_date | platform | total_amount | total_users |</span><br><span class="line">+------------+----------+------------+----------+--------------+-------------+</span><br><span class="line">| 2019-07-01 | both     | 2019-07-01 | both     |          200 |           1 |</span><br><span class="line">| 2019-07-01 | desktop  | 2019-07-01 | desktop  |          100 |           1 |</span><br><span class="line">| 2019-07-01 | mobile   | 2019-07-01 | mobile   |          100 |           1 |</span><br><span class="line">| 2019-07-02 | desktop  | 2019-07-02 | desktop  |          100 |           1 |</span><br><span class="line">| 2019-07-02 | mobile   | 2019-07-02 | mobile   |          100 |           1 |</span><br><span class="line">| 2019-07-02 | both     | NULL       | NULL     |         NULL |        NULL |</span><br><span class="line">+------------+----------+------------+----------+--------------+-------------+</span><br></pre></td></tr></table></figure><p>最后，在这张表中，按照题目要求取出相应的值，其中null转化为0，</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    ta.spend_date,</span><br><span class="line">    ta.platform,</span><br><span class="line">    <span class="keyword">COALESCE</span>(tb.total_amount, <span class="number">0</span>) <span class="keyword">AS</span> total_amount,</span><br><span class="line">    <span class="keyword">COALESCE</span>(tb.total_users, <span class="number">0</span>) <span class="keyword">AS</span> total_users</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(spend_date), a.platform   <span class="comment">-- table aa</span></span><br><span class="line">    <span class="keyword">FROM</span> Spending <span class="keyword">JOIN</span></span><br><span class="line">        (   <span class="keyword">SELECT</span> <span class="string">'desktop'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">SELECT</span> <span class="string">'mobile'</span> <span class="keyword">AS</span> platform <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">SELECT</span> <span class="string">'both'</span> <span class="keyword">AS</span> platform</span><br><span class="line">        ) <span class="keyword">AS</span> a </span><br><span class="line">) <span class="keyword">AS</span> ta</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> spend_date,</span><br><span class="line">       platform,</span><br><span class="line">       <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> total_amount,</span><br><span class="line">       <span class="keyword">COUNT</span>(user_id) <span class="keyword">AS</span> total_users</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> </span><br><span class="line">            spend_date,</span><br><span class="line">            user_id,</span><br><span class="line">            (<span class="keyword">CASE</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> platform)</span><br><span class="line">                <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> platform</span><br><span class="line">                <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'both'</span></span><br><span class="line">            <span class="keyword">END</span>) <span class="keyword">AS</span> platform,</span><br><span class="line">            <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> amount</span><br><span class="line">        <span class="keyword">FROM</span> spending</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, user_id</span><br><span class="line">    ) <span class="keyword">AS</span> b</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> spend_date, platform</span><br><span class="line">) <span class="keyword">as</span> tb</span><br><span class="line"><span class="keyword">ON</span> ta.platform = tb.platform</span><br><span class="line"><span class="keyword">AND</span> ta.spend_date = tb.spend_date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> spend_date, total_users <span class="keyword">DESC</span>, total_amount;</span><br></pre></td></tr></table></figure><h3 id="1159-Market-Analysis-II"><a href="#1159-Market-Analysis-II" class="headerlink" title="1159.Market Analysis II"></a>1159.Market Analysis II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">Table: Users</span><br><span class="line"></span><br><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| user_id        | int     |</span><br><span class="line">| join_date      | date    |</span><br><span class="line">| favorite_brand | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">user_id is the primary key of this table.</span><br><span class="line">This table has the info of the users of an online shopping website where users can sell and buy items.</span><br><span class="line">Table: Orders</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| buyer_id      | int     |</span><br><span class="line">| seller_id     | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id is the primary key of this table.</span><br><span class="line">item_id is a foreign key to the Items table.</span><br><span class="line">buyer_id and seller_id are foreign keys to the Users table.</span><br><span class="line">Table: Items</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| item_brand    | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">item_id is the primary key of this table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find for each user, whether the brand of the second item (by date) they sold is their favorite brand. If a user sold less than two items, report the answer for that user as no.</span><br><span class="line"></span><br><span class="line">It is guaranteed that no seller sold more than one item on a day.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Users table:</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| user_id | join_date  | favorite_brand |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| 1       | 2019-01-01 | Lenovo         |</span><br><span class="line">| 2       | 2019-02-09 | Samsung        |</span><br><span class="line">| 3       | 2019-01-19 | LG             |</span><br><span class="line">| 4       | 2019-05-21 | HP             |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line"></span><br><span class="line">Orders table:</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| order_id | order_date | item_id | buyer_id | seller_id |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| 1        | 2019-08-01 | 4       | 1        | 2         |</span><br><span class="line">| 2        | 2019-08-02 | 2       | 1        | 3         |</span><br><span class="line">| 3        | 2019-08-03 | 3       | 2        | 3         |</span><br><span class="line">| 4        | 2019-08-04 | 1       | 4        | 2         |</span><br><span class="line">| 5        | 2019-08-04 | 1       | 3        | 4         |</span><br><span class="line">| 6        | 2019-08-05 | 2       | 2        | 4         |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line"></span><br><span class="line">Items table:</span><br><span class="line">+---------+------------+</span><br><span class="line">| item_id | item_brand |</span><br><span class="line">+---------+------------+</span><br><span class="line">| 1       | Samsung    |</span><br><span class="line">| 2       | Lenovo     |</span><br><span class="line">| 3       | LG         |</span><br><span class="line">| 4       | HP         |</span><br><span class="line">+---------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| seller_id | 2nd_item_fav_brand |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| 1         | no                 |</span><br><span class="line">| 2         | yes                |</span><br><span class="line">| 3         | yes                |</span><br><span class="line">| 4         | no                 |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line"></span><br><span class="line">The answer for the user with id 1 is no because they sold nothing.</span><br><span class="line">The answer for the users with id 2 and 3 is yes because the brands of their second sold items are their favorite brands.</span><br><span class="line">The answer for the user with id 4 is no because the brand of their second sold item is not their favorite brand.</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id <span class="keyword">AS</span> seller_id, </span><br><span class="line">       <span class="keyword">IF</span>(item_brand = favorite_brand, <span class="string">'yes'</span>, <span class="string">'no'</span>) <span class="keyword">AS</span> <span class="number">2</span>nd_item_fav_brand </span><br><span class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> user_id, </span><br><span class="line">               favorite_brand, </span><br><span class="line">               (<span class="keyword">SELECT</span>    item_id</span><br><span class="line">                <span class="keyword">FROM</span>      orders o </span><br><span class="line">                <span class="keyword">WHERE</span>     user_id = o.seller_id </span><br><span class="line">                <span class="keyword">ORDER</span> <span class="keyword">BY</span> order_date <span class="keyword">limit</span> <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">AS</span> item_id</span><br><span class="line">        <span class="keyword">FROM</span>   <span class="keyword">users</span>) <span class="keyword">AS</span> u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> items <span class="keyword">AS</span> i </span><br><span class="line"><span class="keyword">ON</span>        u.item_id = i.item_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> seller_id;</span><br></pre></td></tr></table></figure><h3 id="1194-Tournament-Winners"><a href="#1194-Tournament-Winners" class="headerlink" title="1194.Tournament Winners"></a>1194.Tournament Winners</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Table: Players</span><br><span class="line"></span><br><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| player_id   | int   |</span><br><span class="line">| group_id    | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">player_id is the primary key of this table.</span><br><span class="line">Each row of this table indicates the group of each player.</span><br><span class="line">Table: Matches</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| match_id      | int     |</span><br><span class="line">| first_player  | int     |</span><br><span class="line">| second_player | int     | </span><br><span class="line">| first_score   | int     |</span><br><span class="line">| second_score  | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">match_id is the primary key of this table.</span><br><span class="line">Each row is a record of a match, first_player and second_player contain the player_id of each match.</span><br><span class="line">first_score and second_score contain the number of points of the first_player and second_player respectively.</span><br><span class="line">You may assume that, in each match, players belongs to the same group.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">The winner in each group is the player who scored the maximum total points within the group. </span><br><span class="line">In the case of a tie, the lowest player_id wins.</span><br><span class="line"></span><br><span class="line">Write an SQL query to find the winner in each group.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Players table:</span><br><span class="line">+-----------+------------+</span><br><span class="line">| player_id | group_id   |</span><br><span class="line">+-----------+------------+</span><br><span class="line">| 15        | 1          |</span><br><span class="line">| 25        | 1          |</span><br><span class="line">| 30        | 1          |</span><br><span class="line">| 45        | 1          |</span><br><span class="line">| 10        | 2          |</span><br><span class="line">| 35        | 2          |</span><br><span class="line">| 50        | 2          |</span><br><span class="line">| 20        | 3          |</span><br><span class="line">| 40        | 3          |</span><br><span class="line">+-----------+------------+</span><br><span class="line"></span><br><span class="line">Matches table:</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| match_id   | first_player | second_player | first_score | second_score |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| 1          | 15           | 45            | 3           | 0            |</span><br><span class="line">| 2          | 30           | 25            | 1           | 2            |</span><br><span class="line">| 3          | 30           | 15            | 2           | 0            |</span><br><span class="line">| 4          | 40           | 20            | 5           | 2            |</span><br><span class="line">| 5          | 35           | 50            | 1           | 1            |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+------------+</span><br><span class="line">| group_id  | player_id  |</span><br><span class="line">+-----------+------------+ </span><br><span class="line">| 1         | 15         |</span><br><span class="line">| 2         | 35         |</span><br><span class="line">| 3         | 40         |</span><br><span class="line">+-----------+------------+</span><br></pre></td></tr></table></figure><p>解题思路：本题的意思是每个运动员在5场比赛中获取的分数累加，得到累加和。然后每个运动员又分组，找出每组内累加和最高的运动员，如果累加和一样高，那选出player_id更小的。</p><p>首先找出每个运动员在5场比赛中各自的分数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_player <span class="keyword">AS</span> player_id, first_score <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> Matches</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> second_player <span class="keyword">AS</span> player_id, second_score <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> Matches;</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-------+</span><br><span class="line">| player_id | score |</span><br><span class="line">+-----------+-------+</span><br><span class="line">|        15 |     3 |</span><br><span class="line">|        30 |     1 |</span><br><span class="line">|        30 |     2 |</span><br><span class="line">|        40 |     5 |</span><br><span class="line">|        35 |     1 |</span><br><span class="line">|        45 |     0 |</span><br><span class="line">|        25 |     2 |</span><br><span class="line">|        15 |     0 |</span><br><span class="line">|        20 |     2 |</span><br><span class="line">|        50 |     1 |</span><br><span class="line">+-----------+-------+</span><br></pre></td></tr></table></figure><p>然后把这个表和运动员表连接，并对运动员id分组，求出每个运动员所有分数总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">p.group_id, </span><br><span class="line">    ps.player_id, </span><br><span class="line">    <span class="keyword">SUM</span>(ps.score) <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> Players <span class="keyword">AS</span> p</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> first_player <span class="keyword">AS</span> player_id, first_score <span class="keyword">AS</span> score</span><br><span class="line">    <span class="keyword">FROM</span> Matches</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> second_player <span class="keyword">AS</span> player_id, second_score <span class="keyword">AS</span> score</span><br><span class="line">    <span class="keyword">FROM</span> Matches</span><br><span class="line">) <span class="keyword">AS</span> ps</span><br><span class="line"><span class="keyword">ON</span> p.player_id = ps.player_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ps.player_id</span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> <span class="keyword">group_id</span>, </span><br><span class="line">  score <span class="keyword">DESC</span>, </span><br><span class="line">  player_id;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------+-------+</span><br><span class="line">| group_id | player_id | score |</span><br><span class="line">+----------+-----------+-------+</span><br><span class="line">|        1 |        15 |     3 |</span><br><span class="line">|        1 |        30 |     3 |</span><br><span class="line">|        1 |        25 |     2 |</span><br><span class="line">|        1 |        45 |     0 |</span><br><span class="line">|        2 |        35 |     1 |</span><br><span class="line">|        2 |        50 |     1 |</span><br><span class="line">|        3 |        40 |     5 |</span><br><span class="line">|        3 |        20 |     2 |</span><br><span class="line">+----------+-----------+-------+</span><br></pre></td></tr></table></figure><p>最后，对这个表中的group_id分组，找出每个组内分数最高的，如果分数相同，找出player_id更小的。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">group_id</span>,</span><br><span class="line">    player_id</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> </span><br><span class="line">            p.group_id, </span><br><span class="line">            ps.player_id, </span><br><span class="line">            <span class="keyword">SUM</span>(ps.score) <span class="keyword">AS</span> score</span><br><span class="line">        <span class="keyword">FROM</span> Players <span class="keyword">AS</span> p</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> first_player <span class="keyword">AS</span> player_id, first_score <span class="keyword">AS</span> score</span><br><span class="line">            <span class="keyword">FROM</span> Matches</span><br><span class="line">            <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">            <span class="keyword">SELECT</span> second_player <span class="keyword">AS</span> player_id, second_score <span class="keyword">AS</span> score</span><br><span class="line">            <span class="keyword">FROM</span> Matches</span><br><span class="line">        ) <span class="keyword">AS</span> ps</span><br><span class="line">        <span class="keyword">ON</span> p.player_id = ps.player_id</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> ps.player_id</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">group_id</span>, </span><br><span class="line">                score <span class="keyword">DESC</span>, </span><br><span class="line">                player_id</span><br><span class="line">) <span class="keyword">AS</span> top_scores</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">group_id</span>;</span><br></pre></td></tr></table></figure><h3 id="1225-Report-Contiguous-Dates"><a href="#1225-Report-Contiguous-Dates" class="headerlink" title="1225.Report Contiguous Dates"></a>1225.Report Contiguous Dates</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Table: Failed</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| fail_date    | date    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">Primary key for this table is fail_date.</span><br><span class="line">Failed table contains the days of failed tasks.</span><br><span class="line">Table: Succeeded</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| success_date | date    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">Primary key for this table is success_date.</span><br><span class="line">Succeeded table contains the days of succeeded tasks.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.</span><br><span class="line"></span><br><span class="line">Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.</span><br><span class="line"></span><br><span class="line">period_state is &#39;failed&#39; if tasks in this interval failed or &#39;succeeded&#39; if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.</span><br><span class="line"></span><br><span class="line">Order result by start_date.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Failed table:</span><br><span class="line">+-------------------+</span><br><span class="line">| fail_date         |</span><br><span class="line">+-------------------+</span><br><span class="line">| 2018-12-28        |</span><br><span class="line">| 2018-12-29        |</span><br><span class="line">| 2019-01-04        |</span><br><span class="line">| 2019-01-05        |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line">Succeeded table:</span><br><span class="line">+-------------------+</span><br><span class="line">| success_date      |</span><br><span class="line">+-------------------+</span><br><span class="line">| 2018-12-30        |</span><br><span class="line">| 2018-12-31        |</span><br><span class="line">| 2019-01-01        |</span><br><span class="line">| 2019-01-02        |</span><br><span class="line">| 2019-01-03        |</span><br><span class="line">| 2019-01-06        |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+--------------+--------------+--------------+</span><br><span class="line">| period_state | start_date   | end_date     |</span><br><span class="line">+--------------+--------------+--------------+</span><br><span class="line">| succeeded    | 2019-01-01   | 2019-01-03   |</span><br><span class="line">| failed       | 2019-01-04   | 2019-01-05   |</span><br><span class="line">| succeeded    | 2019-01-06   | 2019-01-06   |</span><br><span class="line">+--------------+--------------+--------------+</span><br><span class="line"></span><br><span class="line">The report ignored the system state in 2018 as we care about the system in the period 2019-01-01 to 2019-12-31.</span><br><span class="line">From 2019-01-01 to 2019-01-03 all tasks succeeded and the system state was &quot;succeeded&quot;.</span><br><span class="line">From 2019-01-04 to 2019-01-05 all tasks failed and system state was &quot;failed&quot;.</span><br><span class="line">From 2019-01-06 to 2019-01-06 all tasks succeeded and system state was &quot;succeeded&quot;.</span><br></pre></td></tr></table></figure><p>解题思路：Failed 和 Succeeded表，用来记录一个每日定时跑的系统任务的失败和成功。要求返回一张结果表，按顺序展示该任务失败和成功的连续时间段以及起止时间。</p><p>首先找出在2019年成功和失败的所有任务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        fail_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">        <span class="string">'failed'</span> <span class="keyword">AS</span> state</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">Failed</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        success_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">        <span class="string">'succeeded'</span> <span class="keyword">AS</span> state</span><br><span class="line">    <span class="keyword">FROM</span> Succeeded</span><br><span class="line">) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">date</span> <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span>;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------+-----------+</span><br><span class="line">| date       | state     |</span><br><span class="line">+------------+-----------+</span><br><span class="line">| 2019-01-01 | succeeded |</span><br><span class="line">| 2019-01-02 | succeeded |</span><br><span class="line">| 2019-01-03 | succeeded |</span><br><span class="line">| 2019-01-04 | failed    |</span><br><span class="line">| 2019-01-05 | failed    |</span><br><span class="line">| 2019-01-06 | succeeded |</span><br><span class="line">+------------+-----------+</span><br></pre></td></tr></table></figure><p>然后在这个表中，继续增加两列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> fail_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">               <span class="string">'failed'</span> <span class="keyword">AS</span> state</span><br><span class="line">        <span class="keyword">FROM</span> <span class="keyword">Failed</span></span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">        <span class="keyword">SELECT</span> success_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">               <span class="string">'succeeded'</span> <span class="keyword">AS</span> state</span><br><span class="line">        <span class="keyword">FROM</span> Succeeded</span><br><span class="line">) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">date</span> <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">) <span class="keyword">AS</span> b, </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">rank</span> := <span class="number">0</span>,</span><br><span class="line">   @prev := <span class="string">"unkonwn"</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AS</span> c;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------+-----------+------------+--------------------+</span><br><span class="line">| date       | state     | @rank :&#x3D; 0 | @prev :&#x3D; &quot;unkonwn&quot; |</span><br><span class="line">+------------+-----------+------------+--------------------+</span><br><span class="line">| 2019-01-01 | succeeded |          0 | unkonwn            |</span><br><span class="line">| 2019-01-02 | succeeded |          0 | unkonwn            |</span><br><span class="line">| 2019-01-03 | succeeded |          0 | unkonwn            |</span><br><span class="line">| 2019-01-04 | failed    |          0 | unkonwn            |</span><br><span class="line">| 2019-01-05 | failed    |          0 | unkonwn            |</span><br><span class="line">| 2019-01-06 | succeeded |          0 | unkonwn            |</span><br><span class="line">+------------+-----------+------------+--------------------+</span><br></pre></td></tr></table></figure><p>然后对rank和prev更新，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">state,</span><br><span class="line">    <span class="built_in">date</span>,</span><br><span class="line">    @<span class="keyword">rank</span> := <span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> @prev = state <span class="keyword">THEN</span> @<span class="keyword">rank</span></span><br><span class="line">                <span class="keyword">ELSE</span> @<span class="keyword">rank</span> + <span class="number">1</span></span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">rank</span>,</span><br><span class="line">@prev := state <span class="keyword">AS</span> prev</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> fail_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">               <span class="string">'failed'</span> <span class="keyword">AS</span> state</span><br><span class="line">        <span class="keyword">FROM</span> <span class="keyword">Failed</span></span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">        <span class="keyword">SELECT</span> success_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">               <span class="string">'succeeded'</span> <span class="keyword">AS</span> state</span><br><span class="line">        <span class="keyword">FROM</span> Succeeded</span><br><span class="line">) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">date</span> <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">) <span class="keyword">AS</span> b, </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">rank</span> := <span class="number">0</span>,</span><br><span class="line">   @prev := <span class="string">"unkonwn"</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AS</span> c;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-----------+------------+------+-----------+</span><br><span class="line">| state     | date       | rank | prev      |</span><br><span class="line">+-----------+------------+------+-----------+</span><br><span class="line">| succeeded | 2019-01-01 |    1 | succeeded |</span><br><span class="line">| succeeded | 2019-01-02 |    1 | succeeded |</span><br><span class="line">| succeeded | 2019-01-03 |    1 | succeeded |</span><br><span class="line">| failed    | 2019-01-04 |    2 | failed    |</span><br><span class="line">| failed    | 2019-01-05 |    2 | failed    |</span><br><span class="line">| succeeded | 2019-01-06 |    3 | succeeded |</span><br><span class="line">+-----------+------------+------+-----------+</span><br></pre></td></tr></table></figure><p>最后，对rank分组，即对任务状态分组，分别求每组date的最小值和最大值就是该组任务的起止时间</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    state     <span class="keyword">AS</span> period_state,</span><br><span class="line">    <span class="keyword">MIN</span>(<span class="built_in">date</span>) <span class="keyword">AS</span> start_date,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="built_in">date</span>) <span class="keyword">AS</span> end_date</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        state,</span><br><span class="line">        <span class="built_in">date</span>,</span><br><span class="line">        @<span class="keyword">rank</span> := <span class="keyword">CASE</span> </span><br><span class="line">                    <span class="keyword">WHEN</span> @prev = state <span class="keyword">THEN</span> @<span class="keyword">rank</span></span><br><span class="line">                    <span class="keyword">ELSE</span> @<span class="keyword">rank</span> + <span class="number">1</span></span><br><span class="line">                <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">rank</span>,</span><br><span class="line">        @prev := state <span class="keyword">AS</span> prev</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> *</span><br><span class="line">        <span class="keyword">FROM</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> fail_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">                <span class="string">'failed'</span> <span class="keyword">AS</span> state</span><br><span class="line">            <span class="keyword">FROM</span> <span class="keyword">Failed</span></span><br><span class="line">            <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">            <span class="keyword">SELECT</span> success_date <span class="keyword">AS</span> <span class="built_in">date</span>,</span><br><span class="line">                <span class="string">'succeeded'</span> <span class="keyword">AS</span> state</span><br><span class="line">            <span class="keyword">FROM</span> Succeeded</span><br><span class="line">        ) <span class="keyword">AS</span> a</span><br><span class="line">        <span class="keyword">WHERE</span> <span class="built_in">date</span> <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span> </span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span></span><br><span class="line">    ) <span class="keyword">AS</span> b, </span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">SELECT</span> @<span class="keyword">rank</span> := <span class="number">0</span>,</span><br><span class="line">        @prev := <span class="string">"unkonwn"</span></span><br><span class="line"></span><br><span class="line">    ) <span class="keyword">AS</span> c</span><br><span class="line">) <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.rank</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> start_date;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含LeetCode中hard部分的SQL练习题的解题思路和通过代码，关于题目描述可以查看&lt;a href=&quot;https://leetcode.com/problemset/database/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode原网站&lt;/a&gt;，或者&lt;a href=&quot;https://leetcode-cn.com/problemset/database/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode中文网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于带锁的部分练习，由于博主没有开会员，所以没有在LeetCode网站上测试过，参考了别的博客写的。&lt;/p&gt;
&lt;p&gt;Easy部分的练习题：&lt;a href=&quot;https://huanyouchen.github.io/2019/09/11/SQL-exercises-in-LeetCode-easy-part/&quot;&gt;点击这里&lt;/a&gt;&lt;br&gt;Medium部分的练习题：&lt;a href=&quot;https://huanyouchen.github.io/2019/09/11/SQL-exercises-LeetCode-medium-part/&quot;&gt;点击这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode中的sql练习题-medium难度部分</title>
    <link href="http://huanyouchen.github.io/2019/10/26/SQL-exercises-LeetCode-medium-part/"/>
    <id>http://huanyouchen.github.io/2019/10/26/SQL-exercises-LeetCode-medium-part/</id>
    <published>2019-10-25T16:00:00.000Z</published>
    <updated>2019-11-07T02:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含LeetCode中medium难度部分的SQL练习题的解题思路和通过代码，关于题目描述可以查看<a href="https://leetcode.com/problemset/database/" target="_blank" rel="noopener">leetcode原网站</a>，或者<a href="https://leetcode-cn.com/problemset/database/?difficulty=%E4%B8%AD%E7%AD%89" target="_blank" rel="noopener">leetcode中文网站</a></p><p>关于带锁的部分练习，由于博主没有开会员，所以没有在LeetCode网站上测试过，参考了别的博客写的。</p><p>Easy部分的练习题：<a href="https://huanyouchen.github.io/2019/09/11/SQL-exercises-in-LeetCode-easy-part/">点击这里</a></p><a id="more"></a><h3 id="177-Nth-Highest-Salary-第N高的薪水"><a href="#177-Nth-Highest-Salary-第N高的薪水" class="headerlink" title="177. Nth Highest Salary 第N高的薪水"></a>177. Nth Highest Salary 第N高的薪水</h3><p>题目描述：<a href="https://leetcode.com/problems/nth-highest-salary/" target="_blank" rel="noopener">https://leetcode.com/problems/nth-highest-salary/</a></p><p>解题思路：和取第二高的思路相同。先把相同薪水的都去重，然后逆序排序，使用LIMIT取第n高的薪水。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> N=N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      <span class="comment"># Write your MySQL query statement below.</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary <span class="keyword">FROM</span> Employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> N, <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>这里<code>SET N=N-1</code>的意思是从第1个位置开始，往后取排在第N-1位置的薪水。比如取第2高的，则<code>LIMIT 1(N=2-1),1</code>，取第5高的，则<code>LIMIT 4(N=5-1),1</code></p><h3 id="178-Rank-Scores-分数排名"><a href="#178-Rank-Scores-分数排名" class="headerlink" title="178. Rank Scores 分数排名"></a>178. Rank Scores 分数排名</h3><p>题目描述：<a href="https://leetcode.com/problems/rank-scores/" target="_blank" rel="noopener">https://leetcode.com/problems/rank-scores/</a></p><p>解题思路：最简单的使用窗口函数dense_rank,在Oracle中可以通过，不过在MySQL中不能。<br>不用窗口函数实现的思路：<br>首先需要对分数表去重，统计共有第n个排名<br>然后把分数表分为两份sa和sb, 对于sa中分数sa.Score，统计去重后的sb表中有比sa.Score大的个数，即是sa.Score的排名。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Oracle中</span></span><br><span class="line"><span class="keyword">SELECT</span> Score, <span class="keyword">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> Scores</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="keyword">SELECT</span> sa.Score, </span><br><span class="line">    (    </span><br><span class="line">        <span class="comment"># 统计去重后的sb表中有比sa.Score大的个数</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> sb.Score)</span><br><span class="line">        <span class="keyword">FROM</span> Scores <span class="keyword">AS</span> sb</span><br><span class="line">        <span class="keyword">WHERE</span> sb.Score &gt;= sa.Score</span><br><span class="line">    ) <span class="keyword">AS</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> Scores <span class="keyword">AS</span> sa</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="180-Consecutive-Numbers连续出现的数字"><a href="#180-Consecutive-Numbers连续出现的数字" class="headerlink" title="180. Consecutive Numbers连续出现的数字"></a>180. Consecutive Numbers连续出现的数字</h3><p>题目描述：<a href="https://leetcode.com/problems/consecutive-numbers/" target="_blank" rel="noopener">https://leetcode.com/problems/consecutive-numbers/</a></p><p>解题思路：找出所有至少连续三次出现的数字，即id是连续至少三次的，且id对应的num是相同的。那么分为两步</p><p>首先判断id是连续至少三次的，可以将表自连接三份，如果表1的第n位的id = 表2的第n+1位的id-1，且表2的第n+1位的id=表3的第n+2位的id-1，那么就表示id是连续至少三次的。</p><p>然后判断id对应的num是否相同，即表1的第n位的id对应的num = 表2的第n+1位的id对应的num = 表3的第n+2位的id对应的num</p><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> L1.Num <span class="keyword">AS</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Logs</span> <span class="keyword">AS</span> L1, <span class="keyword">Logs</span> <span class="keyword">AS</span> L2, <span class="keyword">Logs</span> <span class="keyword">AS</span> L3</span><br><span class="line"><span class="keyword">WHERE</span> L1.Id = L2.Id<span class="number">-1</span> </span><br><span class="line">      <span class="keyword">AND</span> L2.Id = L3.Id<span class="number">-1</span></span><br><span class="line">      <span class="keyword">AND</span> L1.Num = L2.Num</span><br><span class="line">      <span class="keyword">AND</span> L2.Num = L3.Num;</span><br></pre></td></tr></table></figure><p>结果提示错误，报错原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;&quot;headers&quot;: &#123;&quot;Logs&quot;: [&quot;Id&quot;, &quot;Num&quot;]&#125;, &quot;rows&quot;: &#123;&quot;Logs&quot;: [[1, 3], [2, 3], [3, 3], [4, 3]]&#125;&#125;</span><br><span class="line">Output:</span><br><span class="line">&#123;&quot;headers&quot;: [&quot;ConsecutiveNums&quot;], &quot;values&quot;: [[3], [3]]&#125;</span><br><span class="line">Expected:</span><br><span class="line">&#123;&quot;headers&quot;:[&quot;ConsecutiveNums&quot;],&quot;values&quot;:[[3]]&#125;</span><br></pre></td></tr></table></figure><p>可以看出，如果连续出现4个3， 那么会有id为1-2-3的值为3和id为2-3-4的值为3，这两种情况，因此需要对结果去重，通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> L1.Num <span class="keyword">AS</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Logs</span> <span class="keyword">AS</span> L1, <span class="keyword">Logs</span> <span class="keyword">AS</span> L2, <span class="keyword">Logs</span> <span class="keyword">AS</span> L3</span><br><span class="line"><span class="keyword">WHERE</span> L1.Id = L2.Id<span class="number">-1</span> </span><br><span class="line">      <span class="keyword">AND</span> L2.Id = L3.Id<span class="number">-1</span></span><br><span class="line">      <span class="keyword">AND</span> L1.Num = L2.Num</span><br><span class="line">      <span class="keyword">AND</span> L2.Num = L3.Num;</span><br></pre></td></tr></table></figure><h3 id="184-Department-Highest-Salary部门工资最高的员工"><a href="#184-Department-Highest-Salary部门工资最高的员工" class="headerlink" title="184. Department Highest Salary部门工资最高的员工"></a>184. Department Highest Salary部门工资最高的员工</h3><p>题目描述：<a href="https://leetcode.com/problems/department-highest-salary/" target="_blank" rel="noopener">https://leetcode.com/problems/department-highest-salary/</a></p><p>解题思路：要求找出每个部门工资最高的。那么先按部门编号把部门分组，分组后求出每个部门工资最大的，即：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DepartmentId, <span class="keyword">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId</span><br></pre></td></tr></table></figure><p>然后，把部门表和员工表联结，取出需要的信息</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.Name <span class="keyword">AS</span> Department, e.Name <span class="keyword">AS</span> Employee, e.Salary <span class="keyword">AS</span> Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Department <span class="keyword">AS</span> d <span class="keyword">ON</span> e.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">WHERE</span> (DepartmentId, Salary) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> DepartmentId, <span class="keyword">MAX</span>(Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="534-Game-Play-Analysis-III-游戏玩法分析-III"><a href="#534-Game-Play-Analysis-III-游戏玩法分析-III" class="headerlink" title="534    Game Play Analysis III 游戏玩法分析 III"></a>534    Game Play Analysis III 游戏玩法分析 III</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">(player_id, event_date) is the primary key of this table.</span><br><span class="line">This table shows the activity of players of some game.</span><br><span class="line">Each row is a record of a player who logged in and played a number of games (possibly 0) </span><br><span class="line">before logging out on some day using some device.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Write an SQL query that reports for each player and date, how many games played so far by the player.</span><br><span class="line">That is, the total number of games played by the player until that date. Check the example for clarity.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 1         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+------------+---------------------+</span><br><span class="line">| player_id | event_date | games_played_so_far |</span><br><span class="line">+-----------+------------+---------------------+</span><br><span class="line">| 1         | 2016-03-01 | 5                   |</span><br><span class="line">| 1         | 2016-05-02 | 11                  |</span><br><span class="line">| 1         | 2017-06-25 | 12                  |</span><br><span class="line">| 3         | 2016-03-02 | 0                   |</span><br><span class="line">| 3         | 2018-07-03 | 5                   |</span><br><span class="line">+-----------+------------+---------------------+</span><br><span class="line">For the player with id 1, 5 + 6 &#x3D; 11 games played by 2016-05-02, and 5 + 6 + 1 &#x3D; 12 games played by 2017-06-25.</span><br><span class="line">For the player with id 3, 0 + 5 &#x3D; 5 games played by 2018-07-03.</span><br><span class="line">Note that for each player we only care about the days when the player logged in.</span><br></pre></td></tr></table></figure><p>解题思路：累加和问题，题目要求出每个玩家在某个时期之前玩过的游戏个数累加和。<br>那么先找出某个日期之前的所有信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Activity <span class="keyword">AS</span> A1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Activity <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> (A1.player_id = A2.player_id <span class="keyword">AND</span> A1.event_date &lt;= A2.event_date)</span><br></pre></td></tr></table></figure><p>再把玩家和该玩家在某个时期分组，求游戏个数之和。<br>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A2.player_id, A2.event_date, <span class="keyword">SUM</span>(A1.games_played) <span class="keyword">AS</span> games_played_so_far</span><br><span class="line"><span class="keyword">FROM</span> Activity <span class="keyword">AS</span> A1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Activity <span class="keyword">AS</span> A2 </span><br><span class="line"><span class="keyword">ON</span> (A1.player_id = A2.player_id <span class="keyword">AND</span> A1.event_date &lt;= A2.event_date)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> A2.player_id, A2.event_date;</span><br></pre></td></tr></table></figure><h3 id="550-Game-Play-Analysis-IV-游戏玩法分析-IV"><a href="#550-Game-Play-Analysis-IV-游戏玩法分析-IV" class="headerlink" title="550    Game Play Analysis IV 游戏玩法分析 IV"></a>550    Game Play Analysis IV 游戏玩法分析 IV</h3><p>题目描述：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">(player_id, event_date) is the primary key of this table.</span><br><span class="line">This table shows the activity of players of some game.</span><br><span class="line">Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-03-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+</span><br><span class="line">| fraction  |</span><br><span class="line">+-----------+</span><br><span class="line">| 0.33      |</span><br><span class="line">+-----------+</span><br><span class="line">Only the player with id 1 logged back in after the first day he had logged in so the answer is 1&#x2F;3 &#x3D; 0.33</span><br></pre></td></tr></table></figure><p>题目要求出首次登陆后，第二天又登陆的人数占总人数的比例。<br>解题思路：</p><p>按照玩家id分组，找出每个玩家首次登陆和该玩家第二次登陆的时间，来判断是否连续，如果连续，计数器加1<br>将计数器得到的总和除以游戏总人数，得到比例，保留两位小数</p><p>首先找出每个玩家首次登陆的日期：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date)</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br></pre></td></tr></table></figure><p>然后排除表中不是玩家首次登陆的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">WHERE</span> (player_id, event_date) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date)</span><br><span class="line">    <span class="keyword">FROM</span> Activity</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>再然后找出首次登陆后，该玩家第二天也登陆了，这里可以把Activity表自连接，B表时间作为A表时间的第二天，用DATEDIFF函数判断相邻一天。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Activity <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Activity <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.player_id = B.player_id <span class="keyword">AND</span> <span class="keyword">DATEDIFF</span>(B.event_date, A.event_date) = <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> (A.player_id, A.event_date) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date)</span><br><span class="line">    <span class="keyword">FROM</span> Activity</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最后求出比例，用ROUND函数保留两位小数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> B.event_date) / <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> A.player_id), <span class="number">2</span>) <span class="keyword">AS</span> fraction</span><br><span class="line"><span class="keyword">FROM</span> Activity <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Activity <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.player_id = B.player_id <span class="keyword">AND</span> <span class="keyword">DATEDIFF</span>(B.event_date, A.event_date) = <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> (A.player_id, A.event_date) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date)</span><br><span class="line">    <span class="keyword">FROM</span> Activity</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="570-Managers-with-at-Least-5-Direct-Reports-至少有5名直接下属的经理"><a href="#570-Managers-with-at-Least-5-Direct-Reports-至少有5名直接下属的经理" class="headerlink" title="570    Managers with at Least 5 Direct Reports 至少有5名直接下属的经理"></a>570    Managers with at Least 5 Direct Reports 至少有5名直接下属的经理</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</span><br><span class="line"></span><br><span class="line">+------+----------+-----------+----------+</span><br><span class="line">|Id    |Name   |Department |ManagerId |</span><br><span class="line">+------+----------+-----------+----------+</span><br><span class="line">|101   |John   |A       |null      |</span><br><span class="line">|102   |Dan   |A       |101       |</span><br><span class="line">|103   |James   |A       |101       |</span><br><span class="line">|104   |Amy   |A       |101       |</span><br><span class="line">|105   |Anne   |A       |101       |</span><br><span class="line">|106   |Ron   |B       |101       |</span><br><span class="line">+------+----------+-----------+----------+</span><br><span class="line">Given the Employee table, write a SQL query that finds out managers with at least 5 direct report. For the above table, your SQL query should return:</span><br><span class="line"></span><br><span class="line">+-------+</span><br><span class="line">| Name  |</span><br><span class="line">+-------+</span><br><span class="line">| John  |</span><br><span class="line">+-------+</span><br><span class="line">Note:</span><br><span class="line">No one would report to himself.</span><br></pre></td></tr></table></figure><p>解题思路：求出至少有5个直接下属的经理。将Employee表按照经理id分组，使用HAVING过滤出下属至少5个的经理id，将这个查询结果作为临时表与原表内连接查询Name即可</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.Name</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> ManagerId</span><br><span class="line">    <span class="keyword">FROM</span> Employee</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> ManagerId</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">Id</span>) &gt;= <span class="number">5</span></span><br><span class="line">    ) <span class="keyword">AS</span> M</span><br><span class="line"><span class="keyword">ON</span> E.Id = M.ManagerId;</span><br></pre></td></tr></table></figure><h3 id="574-Winning-Candidate-当选者"><a href="#574-Winning-Candidate-当选者" class="headerlink" title="574    Winning Candidate 当选者"></a>574    Winning Candidate 当选者</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Table: Candidate</span><br><span class="line"></span><br><span class="line">+-----+---------+</span><br><span class="line">| id  | Name    |</span><br><span class="line">+-----+---------+</span><br><span class="line">| 1   | A       |</span><br><span class="line">| 2   | B       |</span><br><span class="line">| 3   | C       |</span><br><span class="line">| 4   | D       |</span><br><span class="line">| 5   | E       |</span><br><span class="line">+-----+---------+  </span><br><span class="line">Table: Vote</span><br><span class="line"></span><br><span class="line">+-----+--------------+</span><br><span class="line">| id  | CandidateId  |</span><br><span class="line">+-----+--------------+</span><br><span class="line">| 1   |     2        |</span><br><span class="line">| 2   |     4        |</span><br><span class="line">| 3   |     3        |</span><br><span class="line">| 4   |     2        |</span><br><span class="line">| 5   |     5        |</span><br><span class="line">+-----+--------------+</span><br><span class="line">id is the auto-increment primary key,</span><br><span class="line">CandidateId is the id appeared in Candidate table.</span><br><span class="line">Write a sql to find the name of the winning candidate, the above example will return the winner B.</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line">| Name |</span><br><span class="line">+------+</span><br><span class="line">| B    |</span><br><span class="line">+------+</span><br><span class="line">Notes:</span><br><span class="line"></span><br><span class="line">You may assume there is no tie, in other words there will be at most one winning candidate.</span><br></pre></td></tr></table></figure><p>解题思路：把Vote表按CandidateId分组，统计投票的个数，逆序取最高投票的CandidateId，这个id就是Candidate表中的id，对应的就是得票最多的候选人的名字。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Name</span> </span><br><span class="line"><span class="keyword">FROM</span> Candidate</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> t.CandidateId <span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> CandidateId</span><br><span class="line"><span class="keyword">FROM</span> Vote</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CandidateId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    ) <span class="keyword">AS</span> t</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意IN ()内层的SELECT语句，需要额外嵌套一层，否则会报错：<br>Error Code: 1235. This version of MySQL doesn’t yet support ‘LIMIT &amp; IN/ALL/ANY/SOME subquery’</p><p>也可以这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">FROM</span> Candidate <span class="keyword">AS</span> C <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> V.CandidateId, <span class="keyword">COUNT</span>(V.id) <span class="keyword">AS</span> cnt</span><br><span class="line">    <span class="keyword">FROM</span> Vote <span class="keyword">AS</span> V</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> CandidateId</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> cnt <span class="keyword">DESC</span></span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">) <span class="keyword">AS</span> T</span><br><span class="line"><span class="keyword">ON</span> C.id = T.CandidateId;</span><br></pre></td></tr></table></figure><h3 id="578-Get-Highest-Answer-Rate-Question-查询回答率最高的问题"><a href="#578-Get-Highest-Answer-Rate-Question-查询回答率最高的问题" class="headerlink" title="578    Get Highest Answer Rate Question 查询回答率最高的问题"></a>578    Get Highest Answer Rate Question 查询回答率最高的问题</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Get the highest answer rate question from a table survey_log with these columns: uid, action, question_id, answer_id, q_num, timestamp.</span><br><span class="line"></span><br><span class="line">uid means user id; action has these kind of values: &quot;show&quot;, &quot;answer&quot;, &quot;skip&quot;; answer_id is not null when action column is &quot;answer&quot;, while is null for &quot;show&quot; and &quot;skip&quot;; q_num is the numeral order of the question in current session.</span><br><span class="line"></span><br><span class="line">Write a sql query to identify the question which has the highest answer rate.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">+------+-----------+--------------+------------+-----------+------------+</span><br><span class="line">| uid  | action    | question_id  | answer_id  | q_num     | timestamp  |</span><br><span class="line">+------+-----------+--------------+------------+-----------+------------+</span><br><span class="line">| 5    | show      | 285          | null       | 1         | 123        |</span><br><span class="line">| 5    | answer    | 285          | 124124     | 1         | 124        |</span><br><span class="line">| 5    | show      | 369          | null       | 2         | 125        |</span><br><span class="line">| 5    | skip      | 369          | null       | 2         | 126        |</span><br><span class="line">+------+-----------+--------------+------------+-----------+------------+</span><br><span class="line">Output:</span><br><span class="line">+-------------+</span><br><span class="line">| survey_log  |</span><br><span class="line">+-------------+</span><br><span class="line">|    285      |</span><br><span class="line">+-------------+</span><br><span class="line">Explanation:</span><br><span class="line">question 285 has answer rate 1&#x2F;1, while question 369 has 0&#x2F;1 answer rate, so output 285.</span><br><span class="line"></span><br><span class="line">Note: The highest answer rate meaning is: answer number&#39;s ratio in show number in the same question.</span><br></pre></td></tr></table></figure><p>解题思路：题目要求出回答率最高的问题。首先，题目中表达的action的三个动作的含义，每个问题都有show，该问题下可以选择回答answer和跳过skip，因此，某个问题的<code>回答率 = answer的个数 / show的个数</code>， 然后把问题id分组，每个问题计算其answer的个数，和show的个数，进而得到回答率，将每个问题的回答率逆序排序，取第一个就是最高的回答率</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> question_id <span class="keyword">AS</span> survey_log</span><br><span class="line"><span class="keyword">FROM</span> survey_log</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> question_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="keyword">action</span>=<span class="string">'answer'</span>, <span class="number">1</span>, <span class="number">0</span>)) / <span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="keyword">action</span>=<span class="string">'show'</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>除了用SUM IF，还可以用CASE WHEN方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> question_id <span class="keyword">AS</span> <span class="string">'survey_log'</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> question_id, </span><br><span class="line">           <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">action</span>=<span class="string">'answer'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> num_answer,</span><br><span class="line">           <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">action</span>=<span class="string">'show'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> num_show</span><br><span class="line">    <span class="keyword">FROM</span> survey_log</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> question_id</span><br><span class="line">    ) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (num_answer / num_show) <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="580-Count-Student-Number-in-Departments-统计各专业学生人数"><a href="#580-Count-Student-Number-in-Departments-统计各专业学生人数" class="headerlink" title="580    Count Student Number in Departments 统计各专业学生人数"></a>580    Count Student Number in Departments 统计各专业学生人数</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">A university uses 2 data tables, student and department, to store data about its students and the departments associated with each major.</span><br><span class="line"></span><br><span class="line">Write a query to print the respective department name and number of students majoring in each department for all departments in the department table (even ones with no current students).</span><br><span class="line"></span><br><span class="line">Sort your results by descending number of students; if two or more departments have the same number of students, then sort those departments alphabetically by department name.</span><br><span class="line"></span><br><span class="line">The student is described as follow:</span><br><span class="line"></span><br><span class="line">| Column Name  | Type      |</span><br><span class="line">|--------------|-----------|</span><br><span class="line">| student_id   | Integer   |</span><br><span class="line">| student_name | String    |</span><br><span class="line">| gender       | Character |</span><br><span class="line">| dept_id      | Integer   |</span><br><span class="line">where student_id is the student&#39;s ID number, student_name is the student&#39;s name, gender is their gender, and dept_id is the department ID associated with their declared major.</span><br><span class="line"></span><br><span class="line">And the department table is described as below:</span><br><span class="line"></span><br><span class="line">| Column Name | Type    |</span><br><span class="line">|-------------|---------|</span><br><span class="line">| dept_id     | Integer |</span><br><span class="line">| dept_name   | String  |</span><br><span class="line">where dept_id is the department&#39;s ID number and dept_name is the department name.</span><br><span class="line"></span><br><span class="line">Here is an example input:</span><br><span class="line">student table:</span><br><span class="line"></span><br><span class="line">| student_id | student_name | gender | dept_id |</span><br><span class="line">|------------|--------------|--------|---------|</span><br><span class="line">| 1          | Jack         | M      | 1       |</span><br><span class="line">| 2          | Jane         | F      | 1       |</span><br><span class="line">| 3          | Mark         | M      | 2       |</span><br><span class="line">department table:</span><br><span class="line"></span><br><span class="line">| dept_id | dept_name   |</span><br><span class="line">|---------|-------------|</span><br><span class="line">| 1       | Engineering |</span><br><span class="line">| 2       | Science     |</span><br><span class="line">| 3       | Law         |</span><br><span class="line">The Output should be:</span><br><span class="line"></span><br><span class="line">| dept_name   | student_number |</span><br><span class="line">|-------------|----------------|</span><br><span class="line">| Engineering | 2              |</span><br><span class="line">| Science     | 1              |</span><br><span class="line">| Law         | 0              |</span><br></pre></td></tr></table></figure><p>解题思路：先把部门左连接学生，然后按部门分组，统计每个部门组内的学生，然后按学生数量由高到低排序。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> D.dept_name, <span class="keyword">COUNT</span>(S.student_id) <span class="keyword">AS</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> department <span class="keyword">AS</span> D <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">ON</span> D.dept_id = S.dept_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> D.dept_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_number <span class="keyword">DESC</span>, D.dept_name;</span><br></pre></td></tr></table></figure><h3 id="585-Investments-in-2016-2016年的投资"><a href="#585-Investments-in-2016-2016年的投资" class="headerlink" title="585    Investments in 2016 2016年的投资"></a>585    Investments in 2016 2016年的投资</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Write a query to print the sum of all total investment values in 2016 (TIV_2016), to a scale of 2 decimal places, for all policy holders who meet the following criteria:</span><br><span class="line"></span><br><span class="line">Have the same TIV_2015 value as one or more other policyholders.</span><br><span class="line">Are not located in the same city as any other policyholder (i.e.: the (latitude, longitude) attribute pairs must be unique).</span><br><span class="line">Input Format:</span><br><span class="line">The insurance table is described as follows:</span><br><span class="line"></span><br><span class="line">| Column Name | Type          |</span><br><span class="line">|-------------|---------------|</span><br><span class="line">| PID         | INTEGER(11)   |</span><br><span class="line">| TIV_2015    | NUMERIC(15,2) |</span><br><span class="line">| TIV_2016    | NUMERIC(15,2) |</span><br><span class="line">| LAT         | NUMERIC(5,2)  |</span><br><span class="line">| LON         | NUMERIC(5,2)  |</span><br><span class="line">where PID is the policyholder&#39;s policy ID, TIV_2015 is the total investment value in 2015, TIV_2016 is the total investment value in 2016, LAT is the latitude of the policy holder&#39;s city, and LON is the longitude of the policy holder&#39;s city.</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">| PID | TIV_2015 | TIV_2016 | LAT | LON |</span><br><span class="line">|-----|----------|----------|-----|-----|</span><br><span class="line">| 1   | 10       | 5        | 10  | 10  |</span><br><span class="line">| 2   | 20       | 20       | 20  | 20  |</span><br><span class="line">| 3   | 10       | 30       | 20  | 20  |</span><br><span class="line">| 4   | 10       | 40       | 40  | 40  |</span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line">| TIV_2016 |</span><br><span class="line">|----------|</span><br><span class="line">| 45.00    |</span><br><span class="line">Explanation</span><br><span class="line"></span><br><span class="line">The first record in the table, like the last record, meets both of the two criteria.</span><br><span class="line">The TIV_2015 value &#39;10&#39; is as the same as the third and forth record, and its location unique.</span><br><span class="line"></span><br><span class="line">The second record does not meet any of the two criteria. Its TIV_2015 is not like any other policyholders.</span><br><span class="line"></span><br><span class="line">And its location is the same with the third record, which makes the third record fail, too.</span><br><span class="line"></span><br><span class="line">So, the result is the sum of TIV_2016 of the first and last record, which is 45.</span><br></pre></td></tr></table></figure><p>解题思路：首先读题都不明白，看别人的翻译后才明白。在2016年投资成功的条件是：</p><ul><li>和一个或多个投保人有相同的TIV_2015。</li><li>不和其他投保人在同一城市（就是说（纬度，经度）必须唯一）。</li></ul><p>其中，PID是投保人ID，TIV_2015是2015年投资总额，TIV_2016是2016年投资总额，LAT是投保人城市纬度，LON是投保人城市经度。</p><p>第一条，在 2015 年的投保额 (TIV_2015) 至少跟一个其他投保人在 2015 年的投保额相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIV_2015</span><br><span class="line"><span class="keyword">FROM</span> insurance</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TIV_2015</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>第二条，（纬度，经度）必须唯一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(LAT, LON)</span><br><span class="line"><span class="keyword">FROM</span> insurance</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> LAT,LON</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>将符合这两个条件的TIV_2016值加起来，就是2016年的投资</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(TIV_2016) <span class="keyword">AS</span> TIV_2016</span><br><span class="line"><span class="keyword">FROM</span> insurance</span><br><span class="line"><span class="keyword">WHERE</span> TIV_2015 <span class="keyword">IN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> TIV_2015</span><br><span class="line">        <span class="keyword">FROM</span> insurance</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> TIV_2015</span><br><span class="line">        <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt; <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">CONCAT</span>(LAT, LON) <span class="keyword">IN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(LAT, LON)</span><br><span class="line">        <span class="keyword">FROM</span> insurance</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> LAT,LON</span><br><span class="line">        <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="602-Friend-Requests-II-Who-Has-the-Most-Friends-好友申请-II-：谁有最多的好友"><a href="#602-Friend-Requests-II-Who-Has-the-Most-Friends-好友申请-II-：谁有最多的好友" class="headerlink" title="602 Friend Requests II: Who Has the Most Friends 好友申请 II ：谁有最多的好友"></a>602 Friend Requests II: Who Has the Most Friends 好友申请 II ：谁有最多的好友</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In social network like Facebook or Twitter, people send friend requests and accept others&#39; requests as well.</span><br><span class="line"></span><br><span class="line">Table request_accepted holds the data of friend acceptance, while requester_id and accepter_id both are the id of a person.</span><br><span class="line"> </span><br><span class="line">| requester_id | accepter_id | accept_date|</span><br><span class="line">|--------------|-------------|------------|</span><br><span class="line">| 1            | 2           | 2016_06-03 |</span><br><span class="line">| 1            | 3           | 2016-06-08 |</span><br><span class="line">| 2            | 3           | 2016-06-08 |</span><br><span class="line">| 3            | 4           | 2016-06-09 |</span><br><span class="line">Write a query to find the the people who has most friends and the most friends number. For the sample data above, the result is:</span><br><span class="line">| id | num |</span><br><span class="line">|----|-----|</span><br><span class="line">| 3  | 3   |</span><br><span class="line">Note:</span><br><span class="line">It is guaranteed there is only 1 people having the most friends.</span><br><span class="line">The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The person with id &#39;3&#39; is a friend of people &#39;1&#39;, &#39;2&#39; and &#39;4&#39;, so he has 3 friends in total, which is the most number than any others.</span><br><span class="line"></span><br><span class="line">Follow-up:</span><br><span class="line">In the real world, multiple people could have the same most number of friends, can you find all these people in this case?</span><br></pre></td></tr></table></figure><p>题目要求出谁有最多的好友，及他的好友数量。<br>解题思路：这个题没有思路，看别人写的:</p><p>用UNION ALL把请求id和接受id都找出来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> requester_id <span class="keyword">AS</span> <span class="keyword">id</span> <span class="keyword">FROM</span> request_accepted</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> accepter_id <span class="keyword">AS</span> <span class="keyword">id</span> <span class="keyword">FROM</span> request_accepted</span><br></pre></td></tr></table></figure><p>然后按id分组，计算每个id出现的次数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.id, <span class="keyword">COUNT</span>(t.id) <span class="keyword">AS</span> <span class="keyword">num</span> </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> requester_id <span class="keyword">AS</span> <span class="keyword">id</span> <span class="keyword">FROM</span> request_accepted</span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">        <span class="keyword">SELECT</span> accepter_id <span class="keyword">AS</span> <span class="keyword">id</span> <span class="keyword">FROM</span> request_accepted</span><br><span class="line">    ) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.id</span><br></pre></td></tr></table></figure><p>最后，根据出现次数降序排列，第一条就是好友数量最多的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.id, <span class="keyword">COUNT</span>(t.id) <span class="keyword">AS</span> <span class="keyword">num</span> </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> requester_id <span class="keyword">AS</span> <span class="keyword">id</span> <span class="keyword">FROM</span> request_accepted</span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">        <span class="keyword">SELECT</span> accepter_id <span class="keyword">AS</span> <span class="keyword">id</span> <span class="keyword">FROM</span> request_accepted</span><br><span class="line">    ) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">num</span> <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="608-Tree-Node-树节点"><a href="#608-Tree-Node-树节点" class="headerlink" title="608    Tree Node 树节点"></a>608    Tree Node 树节点</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Given a table tree, id is identifier of the tree node and p_id is its parent node id.</span><br><span class="line"></span><br><span class="line">+----+------+</span><br><span class="line">| id | p_id |</span><br><span class="line">+----+------+</span><br><span class="line">| 1  | null |</span><br><span class="line">| 2  | 1    |</span><br><span class="line">| 3  | 1    |</span><br><span class="line">| 4  | 2    |</span><br><span class="line">| 5  | 2    |</span><br><span class="line">+----+------+</span><br><span class="line">Each node in the tree can be one of three types:</span><br><span class="line">Leaf: if the node is a leaf node.</span><br><span class="line">Root: if the node is the root of the tree.</span><br><span class="line">Inner: If the node is neither a leaf node nor a root node.</span><br><span class="line"></span><br><span class="line">Write a query to print the node id and the type of the node. Sort your output by the node id. The result for the above sample is:</span><br><span class="line"></span><br><span class="line">+----+------+</span><br><span class="line">| id | Type |</span><br><span class="line">+----+------+</span><br><span class="line">| 1  | Root |</span><br><span class="line">| 2  | Inner|</span><br><span class="line">| 3  | Leaf |</span><br><span class="line">| 4  | Leaf |</span><br><span class="line">| 5  | Leaf |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line"></span><br><span class="line">Node &#39;1&#39; is root node, because its parent node is NULL and it has child node &#39;2&#39; and &#39;3&#39;.</span><br><span class="line">Node &#39;2&#39; is inner node, because it has parent node &#39;1&#39; and child node &#39;4&#39; and &#39;5&#39;.</span><br><span class="line">Node &#39;3&#39;, &#39;4&#39; and &#39;5&#39; is Leaf node, because they have parent node and they don&#39;t have child node.</span><br><span class="line"></span><br><span class="line">And here is the image of the sample tree as below:</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">      1</span><br><span class="line">    &#x2F;   \</span><br><span class="line">           2     3</span><br><span class="line">         &#x2F;   \</span><br><span class="line">        4     5</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">If there is only one node on the tree, you only need to output its root attributes.</span><br></pre></td></tr></table></figure><p>解题思路：节点类型判断依据：没有父节点的是根Root，没有子节点的是叶Leaf，其他是内部节点Inner</p><p>首先找出根节点的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="string">'Root'</span> <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">WHERE</span> p_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>然后找出叶节点，叶节点有两个条件，一个是它的父节点不空，第二个是它不是父节点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="string">'Leaf'</span> <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> p_id</span><br><span class="line">    <span class="keyword">FROM</span> tree</span><br><span class="line">    <span class="keyword">WHERE</span> p_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>最后找出内部节点，内部节点的条件，一个是它的父节点不空，第二个是它本身也是父节点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="string">'Inner'</span> <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> p_id</span><br><span class="line">        <span class="keyword">FROM</span> tree</span><br><span class="line">        <span class="keyword">WHERE</span> p_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">    ) </span><br><span class="line"><span class="keyword">AND</span> p_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>将这三个结果用union连接起来，得到题目要求的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="string">'Root'</span> <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">WHERE</span> p_id <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="string">'Leaf'</span> <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> p_id</span><br><span class="line">    <span class="keyword">FROM</span> tree</span><br><span class="line">    <span class="keyword">WHERE</span> p_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="string">'Inner'</span> <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> p_id</span><br><span class="line">        <span class="keyword">FROM</span> tree</span><br><span class="line">        <span class="keyword">WHERE</span> p_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">    ) </span><br><span class="line"><span class="keyword">AND</span> p_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><p>第二种方法，使用CASE WHEN语句来实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,</span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">CASE</span> <span class="keyword">WHEN</span> p_id <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'Root'</span></span><br><span class="line">                 <span class="keyword">WHEN</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> p_id <span class="keyword">FROM</span> tree) <span class="keyword">THEN</span> <span class="string">'Inner'</span></span><br><span class="line">                 <span class="keyword">ELSE</span> <span class="string">'Leaf'</span></span><br><span class="line">            <span class="keyword">END</span></span><br><span class="line">        ) <span class="keyword">AS</span> Tpye</span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><p>第三种方法，把CASE WHEN换成IF语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">IF</span>(<span class="keyword">ISNULL</span>(p_id), <span class="string">'Root'</span>, <span class="keyword">IF</span>(<span class="keyword">id</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> p_id <span class="keyword">FROM</span> tree), <span class="string">'Inner'</span>, <span class="string">'Leaf'</span>)) <span class="keyword">AS</span> <span class="keyword">Type</span></span><br><span class="line"><span class="keyword">FROM</span> tree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><h3 id="612-Shortest-Distance-in-a-Plane-平面上的最近距离"><a href="#612-Shortest-Distance-in-a-Plane-平面上的最近距离" class="headerlink" title="612    Shortest Distance in a Plane 平面上的最近距离"></a>612    Shortest Distance in a Plane 平面上的最近距离</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Table point_2d holds the coordinates (x,y) of some unique points (more than two) in a plane.</span><br><span class="line"></span><br><span class="line">Write a query to find the shortest distance between these points rounded to 2 decimals.</span><br><span class="line"></span><br><span class="line">| x  | y  |</span><br><span class="line">|----|----|</span><br><span class="line">| -1 | -1 |</span><br><span class="line">| 0  | 0  |</span><br><span class="line">| -1 | -2 |</span><br><span class="line"></span><br><span class="line">The shortest distance is 1.00 from point (-1,-1) to (-1,2). So the output should be:</span><br><span class="line"></span><br><span class="line">| shortest |</span><br><span class="line">|----------|</span><br><span class="line">| 1.00     |</span><br><span class="line"></span><br><span class="line">Note: The longest distance among all the points are less than 10000.</span><br></pre></td></tr></table></figure><p>解题思路：有平面上两点的坐标，应用两点之间的距离公式。</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/11385343fbf2b211594f214ac38065380cd78e55.jpg" alt="img"></p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(</span><br><span class="line">         <span class="keyword">SQRT</span>( <span class="keyword">MIN</span>( <span class="keyword">POWER</span>(p1.x - p2.x, <span class="number">2</span>) + <span class="keyword">POWER</span>(p1.y - p2.y, <span class="number">2</span>) )</span><br><span class="line">        ), <span class="number">2</span>) <span class="keyword">AS</span> shortest</span><br><span class="line"><span class="keyword">FROM</span> point_2d <span class="keyword">AS</span> p1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> point_2d <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">ON</span> p1.x != p2.x <span class="keyword">OR</span> p1.y != p2.y</span><br></pre></td></tr></table></figure><p>这里注意表自连接后需要排除点与自身点的距离这种情况，比如(-1,-1)到(-1,-1)这样的</p><h3 id="614-Second-Degree-Follower-二级关注者"><a href="#614-Second-Degree-Follower-二级关注者" class="headerlink" title="614    Second Degree Follower 二级关注者"></a>614    Second Degree Follower 二级关注者</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In facebook, there is a follow table with two columns: followee, follower.</span><br><span class="line"></span><br><span class="line">Please write a sql query to get the amount of each follower’s follower if he&#x2F;she has one.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">+-------------+------------+</span><br><span class="line">| followee    | follower   |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     A       |     B      |</span><br><span class="line">|     B       |     C      |</span><br><span class="line">|     B       |     D      |</span><br><span class="line">|     D       |     E      |</span><br><span class="line">+-------------+------------+</span><br><span class="line">should output:</span><br><span class="line">+-------------+------------+</span><br><span class="line">| follower    | num        |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     B       |  2         |</span><br><span class="line">|     D       |  1         |</span><br><span class="line">+-------------+------------+</span><br><span class="line">Explaination:</span><br><span class="line">Both B and D exist in the follower list, when as a followee, B&#39;s follower is C and D, and D&#39;s follower is E. A does not exist in follower list.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">Followee would not follow himself&#x2F;herself in all cases.</span><br><span class="line">Please display the result in follower&#39;s alphabet order.</span><br></pre></td></tr></table></figure><p>解题思路：follower的follower数量??表有两列，一列是关注者follower，一列是被关注者followee， 关注者本身也可以被其他人关注，求出每一个被关注者的二次关注者（second-degree follower）个数。</p><p>首先将表自连接，找出关注者follower被哪些人关注followee：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> follow <span class="keyword">AS</span> F1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> follow <span class="keyword">AS</span> F2</span><br><span class="line"><span class="keyword">ON</span> F1.follower = F2.followee;</span><br></pre></td></tr></table></figure><p>得到的结果如下，比如B，B是A的关注者(可以理解为粉丝)， 同时，B又被C关注，即C是B的粉丝，B也被D关注，所以B的num是2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------+----------+----------+----------+</span><br><span class="line">| followee | follower | followee | follower |</span><br><span class="line">+----------+----------+----------+----------+</span><br><span class="line">| A        | B        | B        | C        |</span><br><span class="line">| A        | B        | B        | D        |</span><br><span class="line">| B        | D        | D        | E        |</span><br><span class="line">+----------+----------+----------+----------+</span><br></pre></td></tr></table></figure><p>那么接下来把这张表按关注者F1.follower分组，统计组内个数即num</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> F1.follower, <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> F2.follower) <span class="keyword">AS</span> <span class="string">'num'</span></span><br><span class="line"><span class="keyword">FROM</span> follow <span class="keyword">AS</span> F1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> follow <span class="keyword">AS</span> F2</span><br><span class="line"><span class="keyword">ON</span> F1.follower = F2.followee</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> F1.follower;</span><br></pre></td></tr></table></figure><h3 id="626-Exchange-Seats-换座位"><a href="#626-Exchange-Seats-换座位" class="headerlink" title="626. Exchange Seats 换座位"></a>626. Exchange Seats 换座位</h3><p>题目描述：<a href="https://leetcode.com/problems/exchange-seats/" target="_blank" rel="noopener">https://leetcode.com/problems/exchange-seats/</a></p><p>解题思路：这个没有思路，看了别人的解答后才会的。题中表的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure><p>要输出的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure><p>要求id相邻的更换学生名字，原先id=2的学生名字，更换为id=1；原先id=1的学生名字，更换为id=2的</p><p>那么可以推导出：</p><ul><li>如果id=偶数，则将其id-1</li><li>如果id=奇数且是最后一个，则id不变； </li><li>如果id=奇数且不是最后一个，则id+1</li></ul><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="keyword">CASE</span> <span class="keyword">mod</span>(<span class="keyword">id</span>, <span class="number">2</span>) </span><br><span class="line">       <span class="keyword">WHEN</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">id</span><span class="number">-1</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> seat) <span class="keyword">THEN</span> <span class="keyword">id</span></span><br><span class="line">       <span class="keyword">ELSE</span> <span class="keyword">id</span>+<span class="number">1</span></span><br><span class="line">       <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="keyword">id</span>, student</span><br><span class="line"><span class="keyword">FROM</span> seat</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><h3 id="1045-Customers-Who-Bought-All-Products-买下所有产品的客户"><a href="#1045-Customers-Who-Bought-All-Products-买下所有产品的客户" class="headerlink" title="1045 Customers Who Bought All Products 买下所有产品的客户"></a>1045 Customers Who Bought All Products 买下所有产品的客户</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Table: Customer</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| customer_id | int     |</span><br><span class="line">| product_key | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_key is a foreign key to Product table.</span><br><span class="line">Table: Product</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| product_key | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_key is the primary key column for this table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query for a report that provides the customer ids from the Customer table that bought all the products in the Product table.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">Customer table:</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| customer_id | product_key |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 5           |</span><br><span class="line">| 2           | 6           |</span><br><span class="line">| 3           | 5           |</span><br><span class="line">| 3           | 6           |</span><br><span class="line">| 1           | 6           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+-------------+</span><br><span class="line">| product_key |</span><br><span class="line">+-------------+</span><br><span class="line">| 5           |</span><br><span class="line">| 6           |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| customer_id |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">The customers who bought all the products (5 and 6) are customers with id 1 and 3.</span><br></pre></td></tr></table></figure><p>解题思路：找出买了所有商品的用户。先把用户分组，计算每个用户买的商品数量。然后计算商品表中的总数量。最后如果这两个数量相等，那就是全买了</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id</span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> product_key) = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> product_key) <span class="keyword">FROM</span> Product</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1070-Product-Sales-Analysis-III-产品销售分析-III"><a href="#1070-Product-Sales-Analysis-III-产品销售分析-III" class="headerlink" title="1070 Product Sales Analysis III 产品销售分析 III"></a>1070 Product Sales Analysis III 产品销售分析 III</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Table: Sales</span><br><span class="line"></span><br><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">sale_id is the primary key of this table.</span><br><span class="line">product_id is a foreign key to Product table.</span><br><span class="line">Note that the price is per unit.</span><br><span class="line">Table: Product</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id is the primary key of this table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query that selects the product id, year, quantity, and price for the first year of every product sold.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+------------+----------+-------+</span><br><span class="line">| product_id | first_year | quantity | price |</span><br><span class="line">+------------+------------+----------+-------+ </span><br><span class="line">| 100        | 2008       | 10       | 5000  |</span><br><span class="line">| 200        | 2011       | 15       | 9000  |</span><br><span class="line">+------------+------------+----------+-------+</span><br></pre></td></tr></table></figure><p>解题思路：最开始是这样写的，但是不对</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="keyword">MIN</span>(<span class="keyword">year</span>) <span class="keyword">AS</span> first_year, quantity, price</span><br><span class="line"><span class="keyword">FROM</span> Sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><p>不对的原因是MIN(year)只关注一个值，而不是一行值。本题要求每个产品第一年的记录，应该需要把产品id和年份绑定在一起。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="keyword">year</span> <span class="keyword">AS</span> first_year, quantity, price</span><br><span class="line"><span class="keyword">FROM</span> Sales</span><br><span class="line"><span class="keyword">WHERE</span> (product_id, <span class="keyword">year</span>) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> product_id, <span class="keyword">MIN</span>(<span class="keyword">year</span>) </span><br><span class="line">    <span class="keyword">FROM</span> Sales</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1077-Project-Employees-III-项目员工-III"><a href="#1077-Project-Employees-III-项目员工-III" class="headerlink" title="1077 Project Employees III     项目员工 III"></a>1077 Project Employees III     项目员工 III</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Table: Project</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| project_id  | int     |</span><br><span class="line">| employee_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">(project_id, employee_id) is the primary key of this table.</span><br><span class="line">employee_id is a foreign key to Employee table.</span><br><span class="line"></span><br><span class="line">Table: Employee</span><br><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| employee_id      | int     |</span><br><span class="line">| name             | varchar |</span><br><span class="line">| experience_years | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">employee_id is the primary key of this table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the most experienced employees in each project. </span><br><span class="line">In case of a tie, report all employees with the maximum number of experience years.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Project table:</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| project_id  | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">| 1           | 2           |</span><br><span class="line">| 1           | 3           |</span><br><span class="line">| 2           | 1           |</span><br><span class="line">| 2           | 4           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Employee table:</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| employee_id | name   | experience_years |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| 1           | Khaled | 3                |</span><br><span class="line">| 2           | Ali    | 2                |</span><br><span class="line">| 3           | John   | 3                |</span><br><span class="line">| 4           | Doe    | 2                |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| project_id  | employee_id   |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | 1             |</span><br><span class="line">| 1           | 3             |</span><br><span class="line">| 2           | 1             |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">Both employees with id 1 and 3 have the most experience among the employees of the first project. </span><br><span class="line">For the second project, the employee with id 1 has the most experience.</span><br></pre></td></tr></table></figure><p>解题思路：找出每个项目里工作经验最多的员工。先把项目表和员工表连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Project</span> <span class="keyword">AS</span> P <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">ON</span> P.employee_id = E.employee_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> P.project_id;</span><br></pre></td></tr></table></figure><p>得到的结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------+-------------+-------------+------+------------------+</span><br><span class="line">| project_id | employee_id | employee_id | name | experience_years |</span><br><span class="line">+------------+-------------+-------------+------+------------------+</span><br><span class="line">|          1 |           1 |           1 | Kh   |                3 |</span><br><span class="line">|          1 |           2 |           2 | Al   |                2 |</span><br><span class="line">|          1 |           3 |           3 | Jo   |                3 |</span><br><span class="line">|          2 |           1 |           1 | Kh   |                3 |</span><br><span class="line">|          2 |           4 |           4 | Do   |                2 |</span><br><span class="line">+------------+-------------+-------------+------+------------------+</span><br></pre></td></tr></table></figure><p>然后把项目分组，找出每个项目中经验最多的是多少年的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> P.project_id, <span class="keyword">MAX</span>(E.experience_years)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Project</span> <span class="keyword">AS</span> P <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">ON</span> P.employee_id = E.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> P.project_id;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------------+-------------------------+</span><br><span class="line">| project_id | MAX(E.experience_years) |</span><br><span class="line">+------------+-------------------------+</span><br><span class="line">|          1 |                       3 |</span><br><span class="line">|          2 |                       3 |</span><br><span class="line">+------------+-------------------------+</span><br></pre></td></tr></table></figure><p>最后找出项目表中的项目id和员工表中的员工id，其中员工是工作经验最多的</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> P.project_id, E.employee_id</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Project</span> <span class="keyword">AS</span> P <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">ON</span> P.employee_id = E.employee_id</span><br><span class="line"><span class="keyword">WHERE</span> (P.project_id, E.experience_years) <span class="keyword">IN</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> P.project_id, <span class="keyword">MAX</span>(E.experience_years)</span><br><span class="line">        <span class="keyword">FROM</span> <span class="keyword">Project</span> <span class="keyword">AS</span> P <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> E</span><br><span class="line">        <span class="keyword">ON</span> P.employee_id = E.employee_id</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> P.project_id</span><br><span class="line">    )</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="1098-Unpopular-Books-小众书籍"><a href="#1098-Unpopular-Books-小众书籍" class="headerlink" title="1098 Unpopular Books  小众书籍"></a>1098 Unpopular Books  小众书籍</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">Table: Books</span><br><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| book_id        | int     |</span><br><span class="line">| name           | varchar |</span><br><span class="line">| available_from | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">book_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Table: Orders</span><br><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| order_id       | int     |</span><br><span class="line">| book_id        | int     |</span><br><span class="line">| quantity       | int     |</span><br><span class="line">| dispatch_date  | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">order_id is the primary key of this table.</span><br><span class="line">book_id is a foreign key to the Books table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the books that have sold less than 10 copies in the last year, excluding books that have been available for less than 1 month from today. Assume today is 2019-06-23.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Books table:</span><br><span class="line">+---------+--------------------+----------------+</span><br><span class="line">| book_id | name               | available_from |</span><br><span class="line">+---------+--------------------+----------------+</span><br><span class="line">| 1       | &quot;Kalila And Demna&quot; | 2010-01-01     |</span><br><span class="line">| 2       | &quot;28 Letters&quot;       | 2012-05-12     |</span><br><span class="line">| 3       | &quot;The Hobbit&quot;       | 2019-06-10     |</span><br><span class="line">| 4       | &quot;13 Reasons Why&quot;   | 2019-06-01     |</span><br><span class="line">| 5       | &quot;The Hunger Games&quot; | 2008-09-21     |</span><br><span class="line">+---------+--------------------+----------------+</span><br><span class="line"></span><br><span class="line">Orders table:</span><br><span class="line">+----------+---------+----------+---------------+</span><br><span class="line">| order_id | book_id | quantity | dispatch_date |</span><br><span class="line">+----------+---------+----------+---------------+</span><br><span class="line">| 1        | 1       | 2        | 2018-07-26    |</span><br><span class="line">| 2        | 1       | 1        | 2018-11-05    |</span><br><span class="line">| 3        | 3       | 8        | 2019-06-11    |</span><br><span class="line">| 4        | 4       | 6        | 2019-06-05    |</span><br><span class="line">| 5        | 4       | 5        | 2019-06-20    |</span><br><span class="line">| 6        | 5       | 9        | 2009-02-02    |</span><br><span class="line">| 7        | 5       | 8        | 2010-04-13    |</span><br><span class="line">+----------+---------+----------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| book_id   | name               |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| 1         | &quot;Kalila And Demna&quot; |</span><br><span class="line">| 2         | &quot;28 Letters&quot;       |</span><br><span class="line">| 5         | &quot;The Hunger Games&quot; |</span><br><span class="line">+-----------+--------------------+</span><br></pre></td></tr></table></figure><p>解题思路：找出去年到今天销量少于10的书id和名字，最近一个月才开始卖的除外。</p><p>先找出去年到今天，并且排除掉最近一个月的卖书情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> books <span class="keyword">AS</span> B <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">AS</span> O</span><br><span class="line"><span class="keyword">ON</span> O.book_id = B.book_id <span class="keyword">AND</span> O.dispatch_date <span class="keyword">BETWEEN</span> <span class="string">'2018-06-23'</span> <span class="keyword">AND</span> <span class="string">'2019-06-23'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2019-06-23'</span>, B.available_from) &gt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>得到的卖书情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------+------+----------------+----------+---------+----------+---------------+</span><br><span class="line">| book_id | name | available_from | order_id | book_id | quantity | dispatch_date |</span><br><span class="line">+---------+------+----------------+----------+---------+----------+---------------+</span><br><span class="line">|       1 | ka   | 2010-01-01     |        1 |       1 |        2 | 2018-07-26    |</span><br><span class="line">|       1 | ka   | 2010-01-01     |        2 |       1 |        1 | 2018-11-05    |</span><br><span class="line">|       2 | 28   | 2012-05-12     |     NULL |    NULL |     NULL | NULL          |</span><br><span class="line">|       5 | Hu   | 2008-09-21     |     NULL |    NULL |     NULL | NULL          |</span><br><span class="line">+---------+------+----------------+----------+---------+----------+---------------+</span><br></pre></td></tr></table></figure><p>然后，统计每本书的销售数量，找出小于10本的，如果数量quantity是null，用IF语句转换为0</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> B.book_id, B.name</span><br><span class="line"><span class="keyword">FROM</span> books <span class="keyword">AS</span> B <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">AS</span> O</span><br><span class="line"><span class="keyword">ON</span> O.book_id = B.book_id <span class="keyword">AND</span> O.dispatch_date <span class="keyword">BETWEEN</span> <span class="string">'2018-06-23'</span> <span class="keyword">AND</span> <span class="string">'2019-06-23'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2019-06-23'</span>, B.available_from) &gt; <span class="number">30</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> B.book_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(<span class="keyword">IF</span>(O.quantity <span class="keyword">IS</span> <span class="literal">NULL</span>, <span class="number">0</span>, O.quantity)) &lt; <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="1107-New-Users-Daily-Count-每日新用户统计"><a href="#1107-New-Users-Daily-Count-每日新用户统计" class="headerlink" title="1107.New Users Daily Count 每日新用户统计"></a>1107.New Users Daily Count 每日新用户统计</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Table: Traffic</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| activity      | enum    |</span><br><span class="line">| activity_date | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line">The activity column is an ENUM type of (&#39;login&#39;, &#39;logout&#39;, &#39;jobs&#39;, &#39;groups&#39;, &#39;homepage&#39;).</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query that reports for every date within at most 90 days from today, the number of users that logged in for the first time on that date. Assume today is 2019-06-30.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Traffic table:</span><br><span class="line">+---------+----------+---------------+</span><br><span class="line">| user_id | activity | activity_date |</span><br><span class="line">+---------+----------+---------------+</span><br><span class="line">| 1       | login    | 2019-05-01    |</span><br><span class="line">| 1       | homepage | 2019-05-01    |</span><br><span class="line">| 1       | logout   | 2019-05-01    |</span><br><span class="line">| 2       | login    | 2019-06-21    |</span><br><span class="line">| 2       | logout   | 2019-06-21    |</span><br><span class="line">| 3       | login    | 2019-01-01    |</span><br><span class="line">| 3       | jobs     | 2019-01-01    |</span><br><span class="line">| 3       | logout   | 2019-01-01    |</span><br><span class="line">| 4       | login    | 2019-06-21    |</span><br><span class="line">| 4       | groups   | 2019-06-21    |</span><br><span class="line">| 4       | logout   | 2019-06-21    |</span><br><span class="line">| 5       | login    | 2019-03-01    |</span><br><span class="line">| 5       | logout   | 2019-03-01    |</span><br><span class="line">| 5       | login    | 2019-06-21    |</span><br><span class="line">| 5       | logout   | 2019-06-21    |</span><br><span class="line">+---------+----------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+-------------+</span><br><span class="line">| login_date | user_count  |</span><br><span class="line">+------------+-------------+</span><br><span class="line">| 2019-05-01 | 1           |</span><br><span class="line">| 2019-06-21 | 2           |</span><br><span class="line">+------------+-------------+</span><br><span class="line">Note that we only care about dates with non zero user count.</span><br><span class="line">The user with id 5 first logged in on 2019-03-01 so he&#39;s not counted on 2019-06-21.</span><br></pre></td></tr></table></figure><p>解题思路：先找出每个用户最早的登陆日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id, <span class="keyword">MIN</span>(activity_date) <span class="keyword">AS</span> login_date</span><br><span class="line"><span class="keyword">FROM</span> Traffic</span><br><span class="line"><span class="keyword">WHERE</span> activity = <span class="string">'login'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+------------+</span><br><span class="line">| user_id | login_date |</span><br><span class="line">+---------+------------+</span><br><span class="line">|       1 | 2019-05-01 |</span><br><span class="line">|       2 | 2019-06-21 |</span><br><span class="line">|       3 | 2019-01-01 |</span><br><span class="line">|       4 | 2019-06-21 |</span><br><span class="line">|       5 | 2019-03-01 |</span><br><span class="line">+---------+------------+</span><br></pre></td></tr></table></figure><p>然后找出最近90天的，并根据登陆时间分组，统计用户数量<br>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> login_date, <span class="keyword">COUNT</span>(user_id) <span class="keyword">AS</span> user_count</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> user_id, <span class="keyword">MIN</span>(activity_date) <span class="keyword">AS</span> login_date</span><br><span class="line"><span class="keyword">FROM</span> Traffic</span><br><span class="line"><span class="keyword">WHERE</span> activity = <span class="string">'login'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id</span><br><span class="line">    )<span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2019-06-30'</span>, login_date) &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> login_date;</span><br></pre></td></tr></table></figure><h3 id="1112-Highest-Grade-For-Each-Student-每个同学的最高分"><a href="#1112-Highest-Grade-For-Each-Student-每个同学的最高分" class="headerlink" title="1112 Highest Grade For Each Student 每个同学的最高分"></a>1112 Highest Grade For Each Student 每个同学的最高分</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Table: Enrollments</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| student_id    | int     |</span><br><span class="line">| course_id     | int     |</span><br><span class="line">| grade         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(student_id, course_id) is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Enrollments table:</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| student_id | course_id | grade |</span><br><span class="line">+------------+-----------+-------+</span><br><span class="line">| 2          | 2         | 95    |</span><br><span class="line">| 2          | 3         | 95    |</span><br><span class="line">| 1          | 1         | 90    |</span><br><span class="line">| 1          | 2         | 99    |</span><br><span class="line">| 3          | 1         | 80    |</span><br><span class="line">| 3          | 2         | 75    |</span><br><span class="line">| 3          | 3         | 82    |</span><br><span class="line">+------------+-----------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| student_id | course_id | grade |</span><br><span class="line">+------------+-----------+-------+</span><br><span class="line">| 1          | 2         | 99    |</span><br><span class="line">| 2          | 2         | 95    |</span><br><span class="line">| 3          | 3         | 82    |</span><br><span class="line">+------------+-----------+-------+</span><br></pre></td></tr></table></figure><p>解题思路：题目有三个条件，第一个，找出每个学生的最高分成绩。第二个，如果多个课程的最高分相同，那么选出最小的课程id。第三个，按学生id升序排列。</p><p>首先找出每个学生的最高分数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_id, <span class="keyword">MAX</span>(grade)</span><br><span class="line"><span class="keyword">FROM</span> Enrollments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> student_id;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+------------+</span><br><span class="line">| student_id | MAX(grade) |</span><br><span class="line">+------------+------------+</span><br><span class="line">|          1 |         99 |</span><br><span class="line">|          2 |         95 |</span><br><span class="line">|          3 |         82 |</span><br><span class="line">+------------+------------+</span><br></pre></td></tr></table></figure><p>可以看出2号的最高分数是95，但是TA有两门课程都是95，按照题意应选出id=2的课程</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_id, <span class="keyword">MIN</span>(course_id), grade</span><br><span class="line"><span class="keyword">FROM</span> Enrollments</span><br><span class="line"><span class="keyword">WHERE</span> (student_id, grade) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> student_id, <span class="keyword">MAX</span>(grade)</span><br><span class="line">    <span class="keyword">FROM</span> Enrollments</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> student_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> student_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_id;</span><br></pre></td></tr></table></figure><h3 id="1126-Active-Businesses-活跃业务"><a href="#1126-Active-Businesses-活跃业务" class="headerlink" title="1126 Active Businesses 活跃业务"></a>1126 Active Businesses 活跃业务</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Table: Events</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| business_id   | int     |</span><br><span class="line">| event_type    | varchar |</span><br><span class="line">| occurences    | int     | </span><br><span class="line">+---------------+---------+</span><br><span class="line">(business_id, event_type) is the primary key of this table.</span><br><span class="line">Each row in the table logs the info that an event of some type occured at some business for a number of times.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find all active businesses.</span><br><span class="line"></span><br><span class="line">An active business is a business that has more than one event type with occurences greater than the average occurences of that event type among all businesses.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Events table:</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">| business_id | event_type | occurences |</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">| 1           | reviews    | 7          |</span><br><span class="line">| 3           | reviews    | 3          |</span><br><span class="line">| 1           | ads        | 11         |</span><br><span class="line">| 2           | ads        | 7          |</span><br><span class="line">| 3           | ads        | 6          |</span><br><span class="line">| 1           | page views | 3          |</span><br><span class="line">| 2           | page views | 12         |</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| business_id |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">+-------------+ </span><br><span class="line">Average for &#39;reviews&#39;, &#39;ads&#39; and &#39;page views&#39; are (7+3)&#x2F;2&#x3D;5, (11+7+6)&#x2F;3&#x3D;8, (3+12)&#x2F;2&#x3D;7.5 respectively.</span><br><span class="line">Business with id 1 has 7 &#39;reviews&#39; events (more than 5) and 11 &#39;ads&#39; events (more than 8) so it is an active business.</span><br></pre></td></tr></table></figure><p>解题思路：求出每个事件类型的平均发生频率，找出这样的id，它有至少两种事件类型的发生频率是超过该事件类型平均发生频率的。</p><p>第一步，求出每个事件类型的平均发生频率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> event_type, <span class="keyword">AVG</span>(occurences) <span class="keyword">AS</span> event_avg</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Events</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> event_type;</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+-----------+</span><br><span class="line">| event_type | event_avg |</span><br><span class="line">+------------+-----------+</span><br><span class="line">| ads        |    8.0000 |</span><br><span class="line">| page views |    7.5000 |</span><br><span class="line">| reviews    |    5.0000 |</span><br><span class="line">+------------+-----------+</span><br></pre></td></tr></table></figure><p>第二步，因为需要比较每个事件的发生次数和平均发生次数，因此把平均发生次数的列拼接到原表的右列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.*, A.event_avg</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Events</span> <span class="keyword">AS</span> E </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> event_type, <span class="keyword">AVG</span>(occurences) <span class="keyword">AS</span> event_avg</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Events</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> event_type</span><br><span class="line"></span><br><span class="line">) <span class="keyword">AS</span> A </span><br><span class="line"><span class="keyword">ON</span> E.event_type = A.event_type;</span><br></pre></td></tr></table></figure><p>得到结果的如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------------+------------+-----------+</span><br><span class="line">| business_id | event_type | occurences | event_avg |</span><br><span class="line">+-------------+------------+------------+-----------+</span><br><span class="line">|           1 | reviews    |          7 |    5.0000 |</span><br><span class="line">|           3 | reviews    |          3 |    5.0000 |</span><br><span class="line">|           1 | ads        |         11 |    8.0000 |</span><br><span class="line">|           2 | ads        |          7 |    8.0000 |</span><br><span class="line">|           3 | ads        |          6 |    8.0000 |</span><br><span class="line">|           1 | page views |          3 |    7.5000 |</span><br><span class="line">|           2 | page views |         12 |    7.5000 |</span><br><span class="line">+-------------+------------+------------+-----------+</span><br></pre></td></tr></table></figure><p>最后，对id分组，过滤出实际发生次数大于平均发生次数的，且事件数量大于1 的</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> T.business_id</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> E.*, A.event_avg</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Events</span> <span class="keyword">AS</span> E <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> event_type, <span class="keyword">AVG</span>(occurences) <span class="keyword">AS</span> event_avg</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Events</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> event_type</span><br><span class="line">) <span class="keyword">AS</span> A <span class="keyword">ON</span> E.event_type = A.event_type</span><br><span class="line">) <span class="keyword">AS</span> T</span><br><span class="line"><span class="keyword">WHERE</span> T.occurences &gt; T.event_avg</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T.business_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(T.event_type) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="1132-Reported-Posts-II"><a href="#1132-Reported-Posts-II" class="headerlink" title="1132 Reported Posts II"></a>1132 Reported Posts II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">Table: Actions</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| post_id       | int     |</span><br><span class="line">| action_date   | date    |</span><br><span class="line">| action        | enum    |</span><br><span class="line">| extra         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line">The action column is an ENUM type of (&#39;view&#39;, &#39;like&#39;, &#39;reaction&#39;, &#39;comment&#39;, &#39;report&#39;, &#39;share&#39;).</span><br><span class="line">The extra column has optional information about the action such as a reason for report or a type of reaction. </span><br><span class="line">Table: Removals</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| post_id       | int     |</span><br><span class="line">| remove_date   | date    | </span><br><span class="line">+---------------+---------+</span><br><span class="line">post_id is the primary key of this table.</span><br><span class="line">Each row in this table indicates that some post was removed as a result of being reported or as a result of an admin review.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find the average for daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Actions table:</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| user_id | post_id | action_date | action | extra  |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| 1       | 1       | 2019-07-01  | view   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | like   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | share  | null   |</span><br><span class="line">| 2       | 2       | 2019-07-04  | view   | null   |</span><br><span class="line">| 2       | 2       | 2019-07-04  | report | spam   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | view   | null   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | report | spam   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | view   | null   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | report | spam   |</span><br><span class="line">| 5       | 2       | 2019-07-03  | view   | null   |</span><br><span class="line">| 5       | 2       | 2019-07-03  | report | racism |</span><br><span class="line">| 5       | 5       | 2019-07-03  | view   | null   |</span><br><span class="line">| 5       | 5       | 2019-07-03  | report | racism |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line"></span><br><span class="line">Removals table:</span><br><span class="line">+---------+-------------+</span><br><span class="line">| post_id | remove_date |</span><br><span class="line">+---------+-------------+</span><br><span class="line">| 2       | 2019-07-20  |</span><br><span class="line">| 3       | 2019-07-18  |</span><br><span class="line">+---------+-------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------------------+</span><br><span class="line">| average_daily_percent |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 75.00                 |</span><br><span class="line">+-----------------------+</span><br><span class="line">The percentage for 2019-07-04 is 50% because only one post of two spam reported posts was removed.</span><br><span class="line">The percentage for 2019-07-02 is 100% because one post was reported as spam and it was removed.</span><br><span class="line">The other days had no spam reports so the average is (50 + 100) &#x2F; 2 &#x3D; 75%</span><br><span class="line">Note that the output is only one number and that we do not care about the remove dates.</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1149-Article-Views-II"><a href="#1149-Article-Views-II" class="headerlink" title="1149 Article Views II"></a>1149 Article Views II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Table: Views</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| article_id    | int     |</span><br><span class="line">| author_id     | int     |</span><br><span class="line">| viewer_id     | int     |</span><br><span class="line">| view_date     | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line">Each row of this table indicates that some viewer viewed an article (written by some author) on some date. </span><br><span class="line">Note that equal author_id and viewer_id indicate the same person.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find all the people who viewed more than one article on the same date, sorted in ascending order by their id.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Views table:</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| article_id | author_id | viewer_id | view_date  |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| 1          | 3         | 5         | 2019-08-01 |</span><br><span class="line">| 3          | 4         | 5         | 2019-08-01 |</span><br><span class="line">| 1          | 3         | 6         | 2019-08-02 |</span><br><span class="line">| 2          | 7         | 7         | 2019-08-01 |</span><br><span class="line">| 2          | 7         | 6         | 2019-08-02 |</span><br><span class="line">| 4          | 7         | 1         | 2019-07-22 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>解题思路：那么先按阅读者-日期分组，找出某读者在该日期阅读的文章数量总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> article_id) <span class="keyword">AS</span> articles, viewer_id <span class="keyword">as</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">FROM</span> Views</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> viewer_id, view_date;</span><br></pre></td></tr></table></figure><p>得出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------+------+</span><br><span class="line">| articles | id   |</span><br><span class="line">+----------+------+</span><br><span class="line">|        1 |    1 |</span><br><span class="line">|        1 |    4 |</span><br><span class="line">|        2 |    5 |</span><br><span class="line">|        2 |    6 |</span><br><span class="line">|        1 |    7 |</span><br><span class="line">+----------+------+</span><br></pre></td></tr></table></figure><p>然后找出文章总数量超过1的读者id</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> t.id</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> article_id) <span class="keyword">AS</span> articles, viewer_id <span class="keyword">as</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">FROM</span> Views</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> viewer_id, view_date</span><br><span class="line">) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.articles &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t.id;</span><br></pre></td></tr></table></figure><h3 id="1158-Market-Analysis-I"><a href="#1158-Market-Analysis-I" class="headerlink" title="1158 Market Analysis I"></a>1158 Market Analysis I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">Table: Users</span><br><span class="line"></span><br><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| user_id        | int     |</span><br><span class="line">| join_date      | date    |</span><br><span class="line">| favorite_brand | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">user_id is the primary key of this table.</span><br><span class="line">This table has the info of the users of an online shopping website where users can sell and buy items.</span><br><span class="line">Table: Orders</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| buyer_id      | int     |</span><br><span class="line">| seller_id     | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id is the primary key of this table.</span><br><span class="line">item_id is a foreign key to the Items table.</span><br><span class="line">buyer_id and seller_id are foreign keys to the Users table.</span><br><span class="line">Table: Items</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| item_brand    | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">item_id is the primary key of this table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find for each user, the join date and the number of orders they made as a buyer in 2019.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Users table:</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| user_id | join_date  | favorite_brand |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| 1       | 2018-01-01 | Lenovo         |</span><br><span class="line">| 2       | 2018-02-09 | Samsung        |</span><br><span class="line">| 3       | 2018-01-19 | LG             |</span><br><span class="line">| 4       | 2018-05-21 | HP             |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line"></span><br><span class="line">Orders table:</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| order_id | order_date | item_id | buyer_id | seller_id |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| 1        | 2019-08-01 | 4       | 1        | 2         |</span><br><span class="line">| 2        | 2018-08-02 | 2       | 1        | 3         |</span><br><span class="line">| 3        | 2019-08-03 | 3       | 2        | 3         |</span><br><span class="line">| 4        | 2018-08-04 | 1       | 4        | 2         |</span><br><span class="line">| 5        | 2018-08-04 | 1       | 3        | 4         |</span><br><span class="line">| 6        | 2019-08-05 | 2       | 2        | 4         |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line"></span><br><span class="line">Items table:</span><br><span class="line">+---------+------------+</span><br><span class="line">| item_id | item_brand |</span><br><span class="line">+---------+------------+</span><br><span class="line">| 1       | Samsung    |</span><br><span class="line">| 2       | Lenovo     |</span><br><span class="line">| 3       | LG         |</span><br><span class="line">| 4       | HP         |</span><br><span class="line">+---------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+------------+----------------+</span><br><span class="line">| buyer_id  | join_date  | orders_in_2019 |</span><br><span class="line">+-----------+------------+----------------+</span><br><span class="line">| 1         | 2018-01-01 | 1              |</span><br><span class="line">| 2         | 2018-02-09 | 2              |</span><br><span class="line">| 3         | 2018-01-19 | 0              |</span><br><span class="line">| 4         | 2018-05-21 | 0              |</span><br><span class="line">+-----------+------------+----------------+</span><br></pre></td></tr></table></figure><p>解题思路：每个用户的id，加入时间，在2019年的订单数量。首先找出每个用户每一笔的订单情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> O.buyer_id, O.order_date, U.join_date</span><br><span class="line"><span class="keyword">FROM</span> Orders2 <span class="keyword">AS</span> O <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">Users</span> <span class="keyword">AS</span> U</span><br><span class="line"><span class="keyword">ON</span> O.buyer_id = U.user_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> O.buyer_id, O.order_date;</span><br></pre></td></tr></table></figure><p>得到的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----------+------------+------------+</span><br><span class="line">| buyer_id | order_date | join_date  |</span><br><span class="line">+----------+------------+------------+</span><br><span class="line">|        1 | 2018-08-02 | 2018-01-01 |</span><br><span class="line">|        1 | 2019-08-01 | 2018-01-01 |</span><br><span class="line">|        2 | 2019-08-03 | 2018-02-09 |</span><br><span class="line">|        2 | 2019-08-05 | 2018-02-09 |</span><br><span class="line">|        3 | 2018-08-04 | 2018-01-19 |</span><br><span class="line">|        4 | 2018-08-04 | 2018-05-21 |</span><br><span class="line">+----------+------------+------------+</span><br></pre></td></tr></table></figure><p>以这个表为基础，按购买者id分类，统计其在2019年的订单总量，</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.buyer_id, t.join_date, <span class="keyword">SUM</span>(<span class="keyword">IF</span>(<span class="keyword">YEAR</span>(t.order_date)=<span class="number">2019</span>, <span class="number">1</span>,<span class="number">0</span>)) <span class="keyword">AS</span> orders_id_2019</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> O.buyer_id, O.order_date, U.join_date</span><br><span class="line"><span class="keyword">FROM</span> Orders2 <span class="keyword">AS</span> O <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">Users</span> <span class="keyword">AS</span> U</span><br><span class="line"><span class="keyword">ON</span> O.buyer_id = U.user_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> O.buyer_id, O.order_date</span><br><span class="line">) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t.buyer_id;</span><br></pre></td></tr></table></figure><h3 id="1164-Product-Price-at-a-Given-Date"><a href="#1164-Product-Price-at-a-Given-Date" class="headerlink" title="1164 Product Price at a Given Date"></a>1164 Product Price at a Given Date</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Table: Products</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| new_price     | int     |</span><br><span class="line">| change_date   | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(product_id, change_date) is the primary key of this table.</span><br><span class="line">Each row of this table indicates that the price of some product was changed to a new price at some date.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Products table:</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">| product_id | new_price | change_date |</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">| 1          | 20        | 2019-08-14  |</span><br><span class="line">| 2          | 50        | 2019-08-14  |</span><br><span class="line">| 1          | 30        | 2019-08-15  |</span><br><span class="line">| 1          | 35        | 2019-08-16  |</span><br><span class="line">| 2          | 65        | 2019-08-17  |</span><br><span class="line">| 3          | 20        | 2019-08-18  |</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+-------+</span><br><span class="line">| product_id | price |</span><br><span class="line">+------------+-------+</span><br><span class="line">| 2          | 50    |</span><br><span class="line">| 1          | 35    |</span><br><span class="line">| 3          | 10    |</span><br><span class="line">+------------+-------+</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1174-Immediate-Food-Delivery-II"><a href="#1174-Immediate-Food-Delivery-II" class="headerlink" title="1174 Immediate Food Delivery II"></a>1174 Immediate Food Delivery II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Table: Delivery</span><br><span class="line"></span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| Column Name                 | Type    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| delivery_id                 | int     |</span><br><span class="line">| customer_id                 | int     |</span><br><span class="line">| order_date                  | date    |</span><br><span class="line">| customer_pref_delivery_date | date    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">delivery_id is the primary key of this table.</span><br><span class="line">The table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">If the preferred delivery date of the customer is the same as the order date then the order is called immediate otherwise it&#39;s called scheduled.</span><br><span class="line"></span><br><span class="line">The first order of a customer is the order with the earliest order date that customer made. It is guaranteed that a customer has exactly one first order.</span><br><span class="line"></span><br><span class="line">Write an SQL query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Delivery table:</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| delivery_id | customer_id | order_date | customer_pref_delivery_date |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| 1           | 1           | 2019-08-01 | 2019-08-02                  |</span><br><span class="line">| 2           | 2           | 2019-08-02 | 2019-08-02                  |</span><br><span class="line">| 3           | 1           | 2019-08-11 | 2019-08-12                  |</span><br><span class="line">| 4           | 3           | 2019-08-24 | 2019-08-24                  |</span><br><span class="line">| 5           | 3           | 2019-08-21 | 2019-08-22                  |</span><br><span class="line">| 6           | 2           | 2019-08-11 | 2019-08-13                  |</span><br><span class="line">| 7           | 4           | 2019-08-09 | 2019-08-09                  |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+----------------------+</span><br><span class="line">| immediate_percentage |</span><br><span class="line">+----------------------+</span><br><span class="line">| 50.00                |</span><br><span class="line">+----------------------+</span><br><span class="line">The customer id 1 has a first order with delivery id 1 and it is scheduled.</span><br><span class="line">The customer id 2 has a first order with delivery id 2 and it is immediate.</span><br><span class="line">The customer id 3 has a first order with delivery id 5 and it is scheduled.</span><br><span class="line">The customer id 4 has a first order with delivery id 7 and it is immediate.</span><br><span class="line">Hence, half the customers have immediate first orders.</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1193-Monthly-Transactions-I"><a href="#1193-Monthly-Transactions-I" class="headerlink" title="1193 Monthly Transactions I"></a>1193 Monthly Transactions I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Table: Transactions</span><br><span class="line"></span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| country       | varchar |</span><br><span class="line">| state         | enum    |</span><br><span class="line">| amount        | int     |</span><br><span class="line">| trans_date    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id is the primary key of this table.</span><br><span class="line">The table has information about incoming transactions.</span><br><span class="line">The state column is an enum of type [&quot;approved&quot;, &quot;declined&quot;].</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Transactions table:</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| id   | country | state    | amount | trans_date |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| 121  | US      | approved | 1000   | 2018-12-18 |</span><br><span class="line">| 122  | US      | declined | 2000   | 2018-12-19 |</span><br><span class="line">| 123  | US      | approved | 2000   | 2019-01-01 |</span><br><span class="line">| 124  | DE      | approved | 2000   | 2019-01-07 |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br><span class="line">| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br><span class="line">| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |</span><br><span class="line">| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |</span><br><span class="line">| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br></pre></td></tr></table></figure><p>解题思路：根据月份和国家分组，然后统计每组内的题目要求的数据即可。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">LEFT</span>(trans_date, <span class="number">7</span>) <span class="keyword">AS</span> <span class="string">'month'</span>, </span><br><span class="line">    country, </span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">AS</span> <span class="string">'trans_count'</span>, </span><br><span class="line">    <span class="keyword">SUM</span>(<span class="keyword">IF</span>(state=<span class="string">'approved'</span>, <span class="number">1</span>,<span class="number">0</span>)) <span class="keyword">AS</span> <span class="string">'approved_count'</span>, </span><br><span class="line">    <span class="keyword">SUM</span>(amount) <span class="keyword">AS</span> <span class="string">'trans_total_amount'</span>, </span><br><span class="line">    <span class="keyword">IF</span>(state=<span class="string">'approved'</span>, amount, <span class="number">0</span>) <span class="keyword">AS</span> <span class="string">'approved_total_amount'</span></span><br><span class="line"><span class="keyword">FROM</span> Transactions</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">MONTH</span>(trans_date), country</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> trans_count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="1204-Last-Person-to-Fit-in-the-Elevator"><a href="#1204-Last-Person-to-Fit-in-the-Elevator" class="headerlink" title="1204. Last Person to Fit in the Elevator"></a>1204. Last Person to Fit in the Elevator</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Table: Queue</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| person_id   | int     |</span><br><span class="line">| person_name | varchar |</span><br><span class="line">| weight      | int     |</span><br><span class="line">| turn        | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">person_id is the primary key column for this table.</span><br><span class="line">This table has the information about all people waiting for an elevator.</span><br><span class="line">The person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">The maximum weight the elevator can hold is 1000.</span><br><span class="line"></span><br><span class="line">Write an SQL query to find the person_name of the last person who will fit in the elevator without exceeding the weight limit. It is guaranteed that the person who is first in the queue can fit in the elevator.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Queue table</span><br><span class="line">+-----------+-------------------+--------+------+</span><br><span class="line">| person_id | person_name       | weight | turn |</span><br><span class="line">+-----------+-------------------+--------+------+</span><br><span class="line">| 5         | George Washington | 250    | 1    |</span><br><span class="line">| 3         | John Adams        | 350    | 2    |</span><br><span class="line">| 6         | Thomas Jefferson  | 400    | 3    |</span><br><span class="line">| 2         | Will Johnliams    | 200    | 4    |</span><br><span class="line">| 4         | Thomas Jefferson  | 175    | 5    |</span><br><span class="line">| 1         | James Elephant    | 500    | 6    |</span><br><span class="line">+-----------+-------------------+--------+------+</span><br><span class="line"></span><br><span class="line">Result table</span><br><span class="line">+-------------------+</span><br><span class="line">| person_name       |</span><br><span class="line">+-------------------+</span><br><span class="line">| Thomas Jefferson  |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line">Queue table is ordered by turn in the example for simplicity.</span><br><span class="line">In the example George Washington(id 5), John Adams(id 3) and Thomas Jefferson(id 6) will enter the elevator as their weight sum is 250 + 350 + 400 &#x3D; 1000.</span><br><span class="line">Thomas Jefferson(id 6) is the last person to fit in the elevator because he has the last turn in these three people.</span><br></pre></td></tr></table></figure><p>解题思路：按照进电梯的顺序对每个人的体重累加，求出累加和为1000时的人的名字。先对weight进行累加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SUM</span>(weight)</span><br><span class="line">    <span class="keyword">FROM</span> Queue</span><br><span class="line">    <span class="keyword">WHERE</span> turn &lt;= Q.turn</span><br><span class="line">) <span class="keyword">AS</span> leijia</span><br><span class="line"><span class="keyword">FROM</span> Queue <span class="keyword">AS</span> Q</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> turn;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-------------------+--------+------+--------+</span><br><span class="line">| person_id | person_name       | weight | turn | leijia |</span><br><span class="line">+-----------+-------------------+--------+------+--------+</span><br><span class="line">|         5 | George Washington |    250 |    1 |    250 |</span><br><span class="line">|         3 | John Adams        |    350 |    2 |    600 |</span><br><span class="line">|         6 | Thomas Jefferson  |    400 |    3 |   1000 |</span><br><span class="line">|         2 | Will Johnliams    |    200 |    4 |   1200 |</span><br><span class="line">|         4 | Thomas Jefferson  |    175 |    5 |   1375 |</span><br><span class="line">|         1 | James Elephant    |    500 |    6 |   1875 |</span><br><span class="line">+-----------+-------------------+--------+------+--------+</span><br></pre></td></tr></table></figure><p>再以这张表为基础，找出leijia列值为1000的人的名字<br>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> person_name </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> *, (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="keyword">SUM</span>(weight)</span><br><span class="line">            <span class="keyword">FROM</span> Queue</span><br><span class="line">            <span class="keyword">WHERE</span> turn &lt;= Q.turn</span><br><span class="line">        ) <span class="keyword">AS</span> leijia</span><br><span class="line">    <span class="keyword">FROM</span> Queue <span class="keyword">AS</span> Q</span><br><span class="line">) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.leijia = <span class="number">1000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> turn;</span><br></pre></td></tr></table></figure><h3 id="1205-Monthly-Transactions-II"><a href="#1205-Monthly-Transactions-II" class="headerlink" title="1205 Monthly Transactions II"></a>1205 Monthly Transactions II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">Table: Transactions</span><br><span class="line"></span><br><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| id             | int     |</span><br><span class="line">| country        | varchar |</span><br><span class="line">| state          | enum    |</span><br><span class="line">| amount         | int     |</span><br><span class="line">| trans_date     | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">id is the primary key of this table.</span><br><span class="line">The table has information about incoming transactions.</span><br><span class="line">The state column is an enum of type [&quot;approved&quot;, &quot;declined&quot;].</span><br><span class="line">Table: Chargebacks</span><br><span class="line"></span><br><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| trans_id       | int     |</span><br><span class="line">| charge_date    | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">Chargebacks contains basic information regarding incoming chargebacks from some transactions placed in Transactions table.</span><br><span class="line">trans_id is a foreign key to the id column of Transactions table.</span><br><span class="line">Each chargeback corresponds to a transaction made previously even if they were not approved.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find for each month and country, the number of approved transactions and their total amount, the number of chargebacks and their total amount.</span><br><span class="line"></span><br><span class="line">Note: In your query, given the month and country, ignore rows with all zeros.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Transactions table:</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| id   | country | state    | amount | trans_date |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| 101  | US      | approved | 1000   | 2019-05-18 |</span><br><span class="line">| 102  | US      | declined | 2000   | 2019-05-19 |</span><br><span class="line">| 103  | US      | approved | 3000   | 2019-06-10 |</span><br><span class="line">| 104  | US      | approved | 4000   | 2019-06-13 |</span><br><span class="line">| 105  | US      | approved | 5000   | 2019-06-15 |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line"></span><br><span class="line">Chargebacks table:</span><br><span class="line">+------------+------------+</span><br><span class="line">| trans_id   | trans_date |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 102        | 2019-05-29 |</span><br><span class="line">| 101        | 2019-06-30 |</span><br><span class="line">| 105        | 2019-09-18 |</span><br><span class="line">+------------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+----------+---------+----------------+-----------------+-------------------+--------------------+</span><br><span class="line">| month    | country | approved_count | approved_amount | chargeback_count  | chargeback_amount  |</span><br><span class="line">+----------+---------+----------------+-----------------+-------------------+--------------------+</span><br><span class="line">| 2019-05  | US      | 1              | 1000            | 1                 | 2000               |</span><br><span class="line">| 2019-06  | US      | 3              | 12000           | 1                 | 1000               |</span><br><span class="line">| 2019-09  | US      | 0              | 0               | 1                 | 5000               |</span><br><span class="line">+----------+---------+----------------+-----------------+-------------------+--------------------+</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1212-Team-Scores-in-Football-Tournament"><a href="#1212-Team-Scores-in-Football-Tournament" class="headerlink" title="1212 Team Scores in Football Tournament"></a>1212 Team Scores in Football Tournament</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Table: Teams</span><br><span class="line"></span><br><span class="line">+---------------+----------+</span><br><span class="line">| Column Name   | Type     |</span><br><span class="line">+---------------+----------+</span><br><span class="line">| team_id       | int      |</span><br><span class="line">| team_name     | varchar  |</span><br><span class="line">+---------------+----------+</span><br><span class="line">team_id is the primary key of this table.</span><br><span class="line">Each row of this table represents a single football team.</span><br><span class="line"></span><br><span class="line">Table: Matches</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| match_id      | int     |</span><br><span class="line">| host_team     | int     |</span><br><span class="line">| guest_team    | int     | </span><br><span class="line">| host_goals    | int     |</span><br><span class="line">| guest_goals   | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">match_id is the primary key of this table.</span><br><span class="line">Each row is a record of a finished match between two different teams. </span><br><span class="line">Teams host_team and guest_team are represented by their IDs in the teams table (team_id) and they scored host_goals and guest_goals goals respectively.</span><br><span class="line"> </span><br><span class="line">You would like to compute the scores of all teams after all matches. Points are awarded as follows:</span><br><span class="line">A team receives three points if they win a match (Score strictly more goals than the opponent team).</span><br><span class="line">A team receives one point if they draw a match (Same number of goals as the opponent team).</span><br><span class="line">A team receives no points if they lose a match (Score less goals than the opponent team).</span><br><span class="line"></span><br><span class="line">Write an SQL query that selects the team_id, team_name and num_points of each team in the tournament after all described matches. Result table should be ordered by num_points (decreasing order). In case of a tie, order the records by team_id (increasing order).</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Teams table:</span><br><span class="line">+-----------+--------------+</span><br><span class="line">| team_id   | team_name    |</span><br><span class="line">+-----------+--------------+</span><br><span class="line">| 10        | Leetcode FC  |</span><br><span class="line">| 20        | NewYork FC   |</span><br><span class="line">| 30        | Atlanta FC   |</span><br><span class="line">| 40        | Chicago FC   |</span><br><span class="line">| 50        | Toronto FC   |</span><br><span class="line">+-----------+--------------+</span><br><span class="line"></span><br><span class="line">Matches table:</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| match_id   | host_team    | guest_team    | host_goals  | guest_goals  |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| 1          | 10           | 20            | 3           | 0            |</span><br><span class="line">| 2          | 30           | 10            | 2           | 2            |</span><br><span class="line">| 3          | 10           | 50            | 5           | 1            |</span><br><span class="line">| 4          | 20           | 30            | 1           | 0            |</span><br><span class="line">| 5          | 50           | 30            | 1           | 0            |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line">| team_id    | team_name    | num_points    |</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line">| 10         | Leetcode FC  | 7             |</span><br><span class="line">| 20         | NewYork FC   | 3             |</span><br><span class="line">| 50         | Toronto FC   | 3             |</span><br><span class="line">| 30         | Atlanta FC   | 1             |</span><br><span class="line">| 40         | Chicago FC   | 0             |</span><br><span class="line">+------------+--------------+---------------+</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含LeetCode中medium难度部分的SQL练习题的解题思路和通过代码，关于题目描述可以查看&lt;a href=&quot;https://leetcode.com/problemset/database/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode原网站&lt;/a&gt;，或者&lt;a href=&quot;https://leetcode-cn.com/problemset/database/?difficulty=%E4%B8%AD%E7%AD%89&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode中文网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于带锁的部分练习，由于博主没有开会员，所以没有在LeetCode网站上测试过，参考了别的博客写的。&lt;/p&gt;
&lt;p&gt;Easy部分的练习题：&lt;a href=&quot;https://huanyouchen.github.io/2019/09/11/SQL-exercises-in-LeetCode-easy-part/&quot;&gt;点击这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>海上升明月，天涯共此时</title>
    <link href="http://huanyouchen.github.io/2019/09/13/hai-shang-sheng-mingyue-tian-ya-gong-ci-shi/"/>
    <id>http://huanyouchen.github.io/2019/09/13/hai-shang-sheng-mingyue-tian-ya-gong-ci-shi/</id>
    <published>2019-09-12T16:00:00.000Z</published>
    <updated>2019-09-13T11:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>2019年的中秋节</p><p>早上起来9点多了，洗洗脸穿上衣服，去食堂吃早饭，刷卡付钱的时候阿姨提醒我短袖穿反了。。一脸尴尬，赶紧跑到厕所换了一下，拿着包子和粥边走边吃，到实验室，写leetcode的sql练习题</p><p>中午点了外卖回宿舍吃，吃完又午睡了一觉，起来2点多了</p><p>下午在实验室接着写sql</p><p>晚上到校外的一家店吃饭，本来想吃胡辣汤+肉夹馍，，但是店长说胡辣汤没有了，，好吧，吃了凉面和肉夹馍</p><p>好久没喝家里的胡辣汤了</p><p>晚饭后在回校路上走着，给家里打了电话，家里在包饺子，买了月饼和苹果，我妈还说我离家太远了，要不然就下好饺子给我送过来吃了，，我爸让我多吃点好的，家里都没事，好好照顾自己。然后我妈又问了我有没有找到对象，我也还是说没有。。被家里催要抓紧了，遇到喜欢的就追，我“呃呃，好，我尽量”这样应付着，后来觉得没啥话说了，就挂了</p><p>一个人走在学校路上，不知道什么时候可以牵着她的手一起赏月亮，一起给家里打电话，一起告诉家里说我有对象了，，那个时候应该很幸福吧</p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/zhongqiujie.jpeg" width="70%" height="70%" title="实验室外的月亮">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年的中秋节&lt;/p&gt;
&lt;p&gt;早上起来9点多了，洗洗脸穿上衣服，去食堂吃早饭，刷卡付钱的时候阿姨提醒我短袖穿反了。。一脸尴尬，赶紧跑到厕所换了一下，拿着包子和粥边走边吃，到实验室，写leetcode的sql练习题&lt;/p&gt;
&lt;p&gt;中午点了外卖回宿舍吃，吃完又午睡了一觉，起
      
    
    </summary>
    
    
      <category term="生活杂记" scheme="http://huanyouchen.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杭州" scheme="http://huanyouchen.github.io/tags/%E6%9D%AD%E5%B7%9E/"/>
    
  </entry>
  
  <entry>
    <title>sql中使用LIMIT和OFFSET分页查询例子</title>
    <link href="http://huanyouchen.github.io/2019/09/11/SQL-sample-paging-queries-using-LIMIT-and-OFFSET/"/>
    <id>http://huanyouchen.github.io/2019/09/11/SQL-sample-paging-queries-using-LIMIT-and-OFFSET/</id>
    <published>2019-09-10T16:00:00.000Z</published>
    <updated>2019-09-11T03:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>LIMIT 1 OFFSET 1</code>，其中OFFSET表示从哪里往后开始取，LIMIT表示取多少个。这里是从1往后开始取，取1个，即取第二高薪水的。</p><p>需要注意的是<code>LIMIT m OFFSET n</code>和<code>LIMIT m,n</code>的区别：</p><ul><li>LIMIT m OFFSET n，表示从第n个数往后开始取，取m个</li><li>LIMIT m,n ，等同于 LIMIT n OFFSET m， 表示从第m个数往后开始取，取n个<a id="more"></a></li></ul><p>LIMIT OFFSET 测试例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM employees;</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">| emp_no | birth_date | first_name | last_name | gender | hire_date  |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |</span><br><span class="line">|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |</span><br><span class="line">|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |</span><br><span class="line">|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |</span><br><span class="line">|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |</span><br><span class="line">|  10006 | 1953-04-20 | Anneke     | Preusig   | F      | 1989-06-02 |</span><br><span class="line">|  10007 | 1957-05-23 | Tzvetan    | Zielinski | F      | 1989-02-10 |</span><br><span class="line">|  10008 | 1958-02-19 | Saniya     | Kalloufi  | M      | 1994-09-15 |</span><br><span class="line">|  10009 | 1952-04-19 | Sumant     | Peac      | F      | 1985-02-18 |</span><br><span class="line">|  10010 | 1963-06-01 | Duangkaew  | Piveteau  | F      | 1989-08-24 |</span><br><span class="line">|  10011 | 1953-11-07 | Mary       | Sluis     | F      | 1990-01-22 |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">11 rows in <span class="keyword">set</span> (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">| emp_no | birth_date | first_name | last_name | gender | hire_date  |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |</span><br><span class="line">|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |</span><br><span class="line">|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">LIMIT</span> <span class="number">2</span> <span class="keyword">OFFSET</span> <span class="number">3</span>;</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">| emp_no | birth_date | first_name | last_name | gender | hire_date  |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |</span><br><span class="line">|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">LIMIT</span> <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">2</span>;</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">| emp_no | birth_date | first_name | last_name | gender | hire_date  |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |</span><br><span class="line">|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |</span><br><span class="line">|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |</span><br><span class="line">+<span class="comment">--------+------------+------------+-----------+--------+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;LIMIT 1 OFFSET 1&lt;/code&gt;，其中OFFSET表示从哪里往后开始取，LIMIT表示取多少个。这里是从1往后开始取，取1个，即取第二高薪水的。&lt;/p&gt;
&lt;p&gt;需要注意的是&lt;code&gt;LIMIT m OFFSET n&lt;/code&gt;和&lt;code&gt;LIMIT m,n&lt;/code&gt;的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LIMIT m OFFSET n，表示从第n个数往后开始取，取m个&lt;/li&gt;
&lt;li&gt;LIMIT m,n ，等同于 LIMIT n OFFSET m， 表示从第m个数往后开始取，取n个
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode中的sql练习题-easy难度部分</title>
    <link href="http://huanyouchen.github.io/2019/09/11/SQL-exercises-in-LeetCode-easy-part/"/>
    <id>http://huanyouchen.github.io/2019/09/11/SQL-exercises-in-LeetCode-easy-part/</id>
    <published>2019-09-10T16:00:00.000Z</published>
    <updated>2019-09-15T04:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文包含LeetCode中easy难度的sql练习题的解题思路和通过代码，关于题目描述可以查看<a href="https://leetcode.com/problemset/database/?difficulty=Easy" target="_blank" rel="noopener">leetcode原网站</a>，或者<a href="https://leetcode-cn.com/problemset/database/?difficulty=%E7%AE%80%E5%8D%95" target="_blank" rel="noopener">leetcode中文网站</a></p><p>关于带锁的部分练习，由于博主没有开会员，所以没有在LeetCode网站上测试过，参考了别的博客写的。另外题目编号1113,1141,1142,1148,1173这几道题还没写出来。</p><a id="more"></a><h3 id="175-Combine-Two-Tables组合两个表"><a href="#175-Combine-Two-Tables组合两个表" class="headerlink" title="175. Combine Two Tables组合两个表"></a>175. Combine Two Tables组合两个表</h3><p>题目描述：<a href="https://leetcode.com/problems/combine-two-tables/" target="_blank" rel="noopener">https://leetcode.com/problems/combine-two-tables/</a></p><p>思路：题中给出的条件是无论 person 是否有地址信息，都需要基于上述两表提供 Person 的以下信息。也就是说以Person表为主表，主表中有的人有Address表中的地址信息，有的人没有。因此使用<code>LEFT JOIN</code></p><p>MySQL通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> P.FirstName, P.LastName, A.City, A.State</span><br><span class="line"><span class="keyword">FROM</span> Person <span class="keyword">AS</span> P <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">ON</span> P.PersonId = A.PersonId;</span><br></pre></td></tr></table></figure><h3 id="176-Second-Highest-Salary-第二高的薪水"><a href="#176-Second-Highest-Salary-第二高的薪水" class="headerlink" title="176. Second Highest Salary    第二高的薪水"></a>176. Second Highest Salary    第二高的薪水</h3><p>题目描述： <a href="https://leetcode.com/problems/second-highest-salary/" target="_blank" rel="noopener">https://leetcode.com/problems/second-highest-salary/</a></p><p>我最开始的思路是:先将薪水最高的找出来排除掉，然后再在剩下的中找出最高的，那就是第二高的，另外再加上CASE WHEN判断第二高是否为空，<br>第一次代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">MAX</span>(Salary) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">    <span class="keyword">THEN</span> Salary </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="literal">NULL</span> </span><br><span class="line">    <span class="keyword">END</span> </span><br><span class="line"><span class="keyword">FROM</span> Employee </span><br><span class="line"><span class="keyword">WHERE</span> Salary &lt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>但是这样写报错不能通过，我又检查好多遍，，发现了两个错误，一个是<code>THEN Salary</code>如果第二最大不是空值的话应该返回第二最大值的，但是我写的还是Salary。第二个错误是没有仔细审题，题目要求返回的第二高命名为<code>SecondHighestSalary</code>，但是我没有命名。</p><p>正确通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">MAX</span>(Salary) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="keyword">MAX</span>(Salary)</span><br><span class="line">    <span class="keyword">ELSE</span> <span class="literal">NULL</span> </span><br><span class="line">    <span class="keyword">END</span>  <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span> Employee </span><br><span class="line"><span class="keyword">WHERE</span> Salary &lt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>再看关于题目讨论时候，发现CASE WHEN是多余的，可以省去，</p><p>简化后的通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">MAX</span>(Salary) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span> Employee </span><br><span class="line"><span class="keyword">WHERE</span> Salary &lt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>但是这个思路如果题目换成求第4高，第5高的话，那就再换个思路了。</p><p>第二种思路：先把所有工资降序排序，并用DISTINCT去重，排除第1，第2高的工资有并列的情况；然后使用LIMIT和OFFSET语句取出第二高薪水的。关于如果第二是空的返回NULL，使用IFNULL函数判断。</p><p>第二种思路通过代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary <span class="keyword">FROM</span> Employee</span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">     <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span></span><br><span class="line">    ), <span class="literal">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><p>而且也可以扩展，比如换成取第四高薪水的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary <span class="keyword">FROM</span> Employee</span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">     <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">3</span></span><br><span class="line">    ), <span class="literal">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><p>这里用到一个我以前不常用的知识点：</p><blockquote><p>IFNULL() 函数语法格式为：IFNULL(expression, alt_value)。用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。</p></blockquote><p>IFNULL() 函数测试例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="literal">NULL</span>, <span class="string">"RUNOOB"</span>);</span><br><span class="line"><span class="comment">-- 以上实例输出结果为：RUNOOB</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="string">"Hello"</span>, <span class="string">"RUNOOB"</span>);</span><br><span class="line"><span class="comment">-- 以上实例输出结果为：Hello</span></span><br></pre></td></tr></table></figure><h3 id="181-Employees-Earning-More-Than-Their-Managers超过经理收入的员工"><a href="#181-Employees-Earning-More-Than-Their-Managers超过经理收入的员工" class="headerlink" title="181. Employees Earning More Than Their Managers超过经理收入的员工"></a>181. Employees Earning More Than Their Managers超过经理收入的员工</h3><p>题目描述：<a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener">https://leetcode.com/problems/employees-earning-more-than-their-managers/</a></p><p>思路：使用内连接，</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E1.Name <span class="keyword">AS</span> Employee</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> E2</span><br><span class="line"><span class="keyword">ON</span> E1.ManagerId = E2.Id</span><br><span class="line"><span class="keyword">WHERE</span> E1.Salary &gt; E2.Salary;</span><br></pre></td></tr></table></figure><h3 id="182-Duplicate-Emails查找重复的电子邮箱"><a href="#182-Duplicate-Emails查找重复的电子邮箱" class="headerlink" title="182. Duplicate Emails查找重复的电子邮箱"></a>182. Duplicate Emails查找重复的电子邮箱</h3><p>题目描述：<a href="https://leetcode.com/problems/duplicate-emails/" target="_blank" rel="noopener">https://leetcode.com/problems/duplicate-emails/</a></p><p>思路：使用GROUP BY对邮箱分组，如果邮箱重复了那么该邮箱对应的Id肯定&gt;1，使用HAVING过滤。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Email</span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">Id</span>) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="183-Customers-Who-Never-Order-从不订购的客户"><a href="#183-Customers-Who-Never-Order-从不订购的客户" class="headerlink" title="183. Customers Who Never Order    从不订购的客户"></a>183. Customers Who Never Order    从不订购的客户</h3><p>题目描述：<a href="https://leetcode.com/problems/customers-who-never-order/" target="_blank" rel="noopener">https://leetcode.com/problems/customers-who-never-order/</a></p><p>思路：以客户表Customers为主表，左联结订单表Orders，联结条件设为客户表中的Id与订单表中的CustomerId相同，联结后如果客户表中有客户没有下过单，那么订单表中的Id就是空的，以此筛选出符合条件的。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.Name <span class="keyword">AS</span> Customers</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders <span class="keyword">AS</span> O</span><br><span class="line"><span class="keyword">ON</span> C.Id = O.CustomerId</span><br><span class="line"><span class="keyword">WHERE</span> O.Id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>第二种思路：选出已经下过单的用户，使用NOT EXISTS将这些订购过的排除，得到的就是没有下过单的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">AS</span> Customers </span><br><span class="line"><span class="keyword">from</span> Customers <span class="keyword">AS</span> C </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> Orders <span class="keyword">AS</span> O </span><br><span class="line">    <span class="keyword">where</span> O.customerid=C.id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>EXISTS的作用是判断：如果在订单表中下过单，就返回真。<br>然后使用NOT EXISTS取反，取反后的作用是判断：如果在订单表中没有下过单，就返回真。</p><p>这里解释下为什么使用<code>SELECT 1</code>，<code>SELECT 1</code>存在记录的话查询结果就会全部被1替代，而<code>SELECT *</code> 会返回所有的字段。<code>SELECT 1</code>与<code>SELECT *</code>或者<code>select 某个字段</code>从功能上来说是等效的，都是用来查询是否有记录。但是从效率上来说，<code>SELECT 1</code>语句的运行效率更高。</p><h3 id="196-Delete-Duplicate-Emails删除重复的电子邮箱"><a href="#196-Delete-Duplicate-Emails删除重复的电子邮箱" class="headerlink" title="196. Delete Duplicate Emails删除重复的电子邮箱"></a>196. Delete Duplicate Emails删除重复的电子邮箱</h3><p>题目描述：<a href="https://leetcode.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener">https://leetcode.com/problems/delete-duplicate-emails/</a></p><p>最开始思路：先对Email分组，分组后同一Email组中取Id最小的，然后将该分组中其他的Id都删掉，<br>代码如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> <span class="keyword">Id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="keyword">Id</span>)</span><br><span class="line">    <span class="keyword">FROM</span> Person</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>但是这样写出错了，提示：You can’t specify target table ‘Person’ for update in FROM clause<br>意思是：不能先select出同一表中的某些值，再update或delete这个表中的这些值(在同一语句中)</p><p>该错误解决方法： 嵌套一个子查询，将查询结果作为临时表，然后从临时表里查询Id，将其作为NOT IN的查询集合，然后再删除。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">Id</span> <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="keyword">Id</span>) <span class="keyword">AS</span> <span class="keyword">Id</span></span><br><span class="line">        <span class="keyword">FROM</span> Person</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</span><br><span class="line">    ) <span class="keyword">AS</span> min_id  <span class="comment">-- 此处需使用别名，否则会发生报错</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>需要注意的是，进行嵌套查询的时候子查询出来的的结果是作为一个派生表来进行上一级的查询的，所以子查询的结果必须要有一个别名<code>min_id</code>，否则会提示报错：<code>Every derived table must have its own alias</code></p><p>第二种思路： 将Person表与自身联结，设过滤条件为两个表中的Email相同，但p1表中的Id&gt;p2表中的Id</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1 <span class="keyword">FROM</span> Person <span class="keyword">AS</span> p1, Person <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">WHERE</span> p1.Email = p2.Email <span class="keyword">AND</span> p1.Id &gt; p2.Id</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>DELETE p1 FROM</code>中的p1是不能省略的，需要指定删除p1还是p2表。<br>另外当delete语句中使用表的别名时，要在delete和from间加上删除表的别名，否则会报错：You have an error in your SQL syntax;</p><h3 id="197-Rising-Temperature上升的温度"><a href="#197-Rising-Temperature上升的温度" class="headerlink" title="197. Rising Temperature上升的温度"></a>197. Rising Temperature上升的温度</h3><p>题目描述：<a href="https://leetcode.com/problems/rising-temperature/" target="_blank" rel="noopener">https://leetcode.com/problems/rising-temperature/</a></p><p>开始的错误思路：今天的日期 = 昨天的日期+1</p><p>错误代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT W2.Id AS Id</span><br><span class="line">FROM Weather AS W1, Weather AS W2</span><br><span class="line">WHERE W2.Id &#x3D; W1.Id + 1 AND W2.Temperature &gt; W1.Temperature</span><br></pre></td></tr></table></figure><p>这种写法报错是因为要考虑到日期为月末的情况，如果是31号，那么+1就是32号了，而不是次月1日。</p><p>正确思路：用datediff()函数来实现判断今天和昨天</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> W1.Id <span class="keyword">AS</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">AS</span> W1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Weather <span class="keyword">AS</span> W2 </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DATEDIFF</span>(W1.RecordDate, W2.RecordDate) = <span class="number">1</span>  <span class="comment">-- W1为今天的温度，W2为昨天的温度。</span></span><br><span class="line"><span class="keyword">WHERE</span> W1.Temperature &gt; W2.Temperature;</span><br></pre></td></tr></table></figure><p>关于datediff()函数的知识点：</p><blockquote><p>DATEDIFF(expr1,expr2)<br>DATEDIFF() returns expr1 − expr2 expressed as a value in days from one date to the other. expr1 and expr2 are date or date-and-time expressions. Only the date parts of the values are used in the calculation.</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');</span><br><span class="line">        -&gt; 1</span><br><span class="line">mysql&gt; SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');</span><br><span class="line">        -&gt; -31</span><br></pre></td></tr></table></figure><h3 id="511-Game-Play-Analysis-I-游戏玩法分析-I"><a href="#511-Game-Play-Analysis-I-游戏玩法分析-I" class="headerlink" title="511. Game Play Analysis I     游戏玩法分析 I"></a>511. Game Play Analysis I     游戏玩法分析 I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">(player_id, event_date) is the primary key of this table.</span><br><span class="line">This table shows the activity of players of some game.</span><br><span class="line">Each row is a record of a player who logged in and played </span><br><span class="line">a number of games (possibly 0) before logging out on some day using some device.</span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the first login date for each player.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| player_id | first_login |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| 1         | 2016-03-01  |</span><br><span class="line">| 2         | 2017-06-25  |</span><br><span class="line">| 3         | 2016-03-02  |</span><br><span class="line">+-----------+-------------+</span><br></pre></td></tr></table></figure><p>思路：题目要求找出每个玩家第一次登录的日期，那么可以把每个玩家分组，每组内是该玩家所有的登录日期，然后取最小的日期，就是该玩家第一次登录的日期</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date) <span class="keyword">AS</span> first_login</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id;</span><br></pre></td></tr></table></figure><h3 id="512-Game-Play-Analysis-II-游戏玩法分析-II"><a href="#512-Game-Play-Analysis-II-游戏玩法分析-II" class="headerlink" title="512. Game Play Analysis II 游戏玩法分析 II"></a>512. Game Play Analysis II 游戏玩法分析 II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">(player_id, event_date) is the primary key of this table.</span><br><span class="line">This table shows the activity of players of some game.</span><br><span class="line"></span><br><span class="line">Each row is a record of a player who logged in and played a number of </span><br><span class="line">games (possibly 0) before logging out on some day using some device.</span><br><span class="line"></span><br><span class="line">Write a SQL query that reports the device that is first logged in for each player.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| player_id | device_id |</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| 1         | 2         |</span><br><span class="line">| 2         | 3         |</span><br><span class="line">| 3         | 1         |</span><br><span class="line">+-----------+-----------+</span><br></pre></td></tr></table></figure><p>思路：题目要求找出每个玩家最早登录的设备号，先对玩家分组，找出玩家最早的登录日期，通过最早日期筛选出登录的最早设备。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.player_id, A.device_id</span><br><span class="line"><span class="keyword">FROM</span> Activity <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">WHERE</span> (A.player_id, A.event_date) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date) <span class="keyword">AS</span> min_date</span><br><span class="line">    <span class="keyword">FROM</span> Activity</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>或者也可以用内连接的方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.player_id, A.device_id</span><br><span class="line"><span class="keyword">FROM</span> Activity <span class="keyword">AS</span> A </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> player_id, <span class="keyword">MIN</span>(event_date) <span class="keyword">AS</span> min_date</span><br><span class="line">    <span class="keyword">FROM</span> Activity</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id;</span><br><span class="line">) AS B</span><br><span class="line">ON A.player_id = B.player_id AND A.event_date = B.min_date</span><br></pre></td></tr></table></figure><h3 id="577-Employee-Bonus-员工奖金"><a href="#577-Employee-Bonus-员工奖金" class="headerlink" title="577. Employee Bonus  员工奖金"></a>577. Employee Bonus  员工奖金</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Select all employee&#39;&#39;s name and bonus whose bonus is &lt; 1000.</span><br><span class="line"></span><br><span class="line">Table:Employee</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">| empId |  name  | supervisor| salary |</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">|   1   | John   |  3        | 1000   |</span><br><span class="line">|   2   | Dan    |  3        | 2000   |</span><br><span class="line">|   3   | Brad   |  null     | 4000   |</span><br><span class="line">|   4   | Thomas |  3        | 4000   |</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">empId is the primary key column for this table.</span><br><span class="line"></span><br><span class="line">Table: Bonus</span><br><span class="line">+-------+-------+</span><br><span class="line">| empId | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| 2     | 500   |</span><br><span class="line">| 4     | 2000  |</span><br><span class="line">+-------+-------+</span><br><span class="line">empId is the primary key column for this table.</span><br><span class="line"></span><br><span class="line">Example ouput:</span><br><span class="line">+-------+-------+</span><br><span class="line">| name  | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| John  | null  |</span><br><span class="line">| Dan   | 500   |</span><br><span class="line">| Brad  | null  |</span><br><span class="line">+-------+-------+</span><br></pre></td></tr></table></figure><p>思路：题目要求找出奖金少于1000的员工，从给出的示例输出可知，少于1000包含两种：一种是有奖金，但不到1000，比如500；另一种是没有奖金null，因此，在设过滤条件时这两者应该是OR的关系。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.name, B.bonus</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> E <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Bonus <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> E.empId = B.empId</span><br><span class="line"><span class="keyword">WHERE</span> B.bonus <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> B.bonus &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="584-Find-Customer-Referee-寻找用户推荐人"><a href="#584-Find-Customer-Referee-寻找用户推荐人" class="headerlink" title="584. Find Customer Referee     寻找用户推荐人"></a>584. Find Customer Referee     寻找用户推荐人</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Given a table customer holding customers information and the referee.</span><br><span class="line"></span><br><span class="line">customer</span><br><span class="line">+------+------+-----------+</span><br><span class="line">| id   | name | referee_id|</span><br><span class="line">+------+------+-----------+</span><br><span class="line">|    1 | Will |      NULL |</span><br><span class="line">|    2 | Jane |      NULL |</span><br><span class="line">|    3 | Alex |         2 |</span><br><span class="line">|    4 | Bill |      NULL |</span><br><span class="line">|    5 | Zack |         1 |</span><br><span class="line">|    6 | Mark |         2 |</span><br><span class="line">+------+------+-----------+</span><br><span class="line"></span><br><span class="line">Write a query to return the list of customers NOT referred by the person with id &#39;2&#39;. </span><br><span class="line">Include those has no referee.</span><br><span class="line"></span><br><span class="line">For the sample data above, the result is:</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>思路：注意没有推荐人的情况，过滤条件有两种：推荐人id不是2，或者，没有推荐人</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> customer</span><br><span class="line"><span class="keyword">WHERE</span> referee_id != <span class="number">2</span> <span class="keyword">OR</span> referee_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="586-Customer-Placing-the-Largest-Number-of-Orders-订单最多的客户"><a href="#586-Customer-Placing-the-Largest-Number-of-Orders-订单最多的客户" class="headerlink" title="586. Customer Placing the Largest Number of Orders 订单最多的客户"></a>586. Customer Placing the Largest Number of Orders 订单最多的客户</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Query the customer_number from the orders table for the customer who has placed the largest number of orders.</span><br><span class="line"></span><br><span class="line">It is guaranteed that exactly one customer will have placed more orders than any other customer.</span><br><span class="line"></span><br><span class="line">The orders table is defined as follows:</span><br><span class="line"></span><br><span class="line">| Column            | Type      |</span><br><span class="line">|-------------------|-----------|</span><br><span class="line">| order_number (PK) | int       |</span><br><span class="line">| customer_number   | int       |</span><br><span class="line">| order_date        | date      |</span><br><span class="line">| required_date     | date      |</span><br><span class="line">| shipped_date      | date      |</span><br><span class="line">| status            | char(15)  |</span><br><span class="line">| comment           | char(200) |</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line">| order_number | customer_number | order_date | required_date | shipped_date | status | comment |</span><br><span class="line">|--------------|-----------------|------------|---------------|--------------|--------|---------|</span><br><span class="line">| 1            | 1               | 2017-04-09 | 2017-04-13    | 2017-04-12   | Closed |         |</span><br><span class="line">| 2            | 2               | 2017-04-15 | 2017-04-20    | 2017-04-18   | Closed |         |</span><br><span class="line">| 3            | 3               | 2017-04-16 | 2017-04-25    | 2017-04-20   | Closed |         |</span><br><span class="line">| 4            | 3               | 2017-04-18 | 2017-04-28    | 2017-04-25   | Closed |         |</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">| customer_number |</span><br><span class="line">|-----------------|</span><br><span class="line">| 3               |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">The customer with number &#39;3&#39; has two orders, which is greater than either customer &#39;1&#39; or &#39;2&#39; because each of them  only has one order. </span><br><span class="line"></span><br><span class="line">So the result is customer_number &#39;3&#39;.</span><br><span class="line"></span><br><span class="line">Follow up: What if more than one customer have the largest number of orders, </span><br><span class="line">can you find all the customer_number in this case?</span><br></pre></td></tr></table></figure><p>思路：题目要求查询 orders 表中下了最多订单的客户对应的 customer_number 。且假设只有一个客户的订单数比其他所有客户多。那么可以先对客户分组，然后计算每个客户的订单数量，把数量逆序排序，取第一个就是下单最多的客户。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_number</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_number</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(order_number) <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>进阶问题：如果最大订单数量的客户有多个，怎么把这些客户都找出来？比如：有n个客户，他们的订单量都是最大的订单量，怎么把这n个人的customer_number找出来？</p><p>思路：还是先把客户分组，计算每个客户的订单量，然后从这些订单量中找出最大的数量，然后在各组客户中设置分组条件：客户的订单数量等于最大的订单数量，这样就能选出拥有最大订单量的各个客户。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_number</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_number</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) = (   <span class="comment">-- 最后设置分组条件：客户的订单数量等于最大的订单数量</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(cnt)   <span class="comment">-- 然后从这些订单量中找出最大的数量</span></span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> cnt       <span class="comment">-- 先把客户分组，计算每个客户的订单量</span></span><br><span class="line">        <span class="keyword">FROM</span> orders</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_number</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="595-Big-Countries-大的国家"><a href="#595-Big-Countries-大的国家" class="headerlink" title="595. Big Countries 大的国家"></a>595. Big Countries 大的国家</h3><p>题目描述：<a href="https://leetcode.com/problems/big-countries/" target="_blank" rel="noopener">https://leetcode.com/problems/big-countries/</a></p><p>思路：注意单位是 million，百万。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span> World</span><br><span class="line"><span class="keyword">WHERE</span> area &gt; <span class="number">3000000</span> <span class="keyword">OR</span> population &gt; <span class="number">25000000</span>;</span><br></pre></td></tr></table></figure><h3 id="596-Classes-More-Than-5-Students-超过5名学生的课"><a href="#596-Classes-More-Than-5-Students-超过5名学生的课" class="headerlink" title="596. Classes More Than 5 Students 超过5名学生的课"></a>596. Classes More Than 5 Students 超过5名学生的课</h3><p>题目描述：<a href="https://leetcode.com/problems/classes-more-than-5-students/" target="_blank" rel="noopener">https://leetcode.com/problems/classes-more-than-5-students/</a></p><p>思路：对课程分组，查找某课程下学生数量&gt;=5个人的。</p><p>没通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">FROM</span> courses</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>看了下没通过的原因，测试的例子是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;headers&quot;: &#123;&quot;courses&quot;: [&quot;student&quot;, &quot;class&quot;]&#125;, &quot;rows&quot;: &#123;&quot;courses&quot;: [[&quot;A&quot;, &quot;Math&quot;], [&quot;B&quot;, &quot;English&quot;], [&quot;C&quot;, &quot;Math&quot;], [&quot;D&quot;, &quot;Biology&quot;], [&quot;E&quot;, &quot;Math&quot;], [&quot;F&quot;, &quot;Math&quot;], [&quot;A&quot;, &quot;Math&quot;]]&#125;&#125;</span><br></pre></td></tr></table></figure><p>发现例子中有重复的，两个[“A”, “Math”]，需要对学生去重，</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">FROM</span> courses</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>( <span class="keyword">DISTINCT</span> student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="597-Friend-Requests-I-Overall-Acceptance-Rate-好友申请-I-：总体通过率"><a href="#597-Friend-Requests-I-Overall-Acceptance-Rate-好友申请-I-：总体通过率" class="headerlink" title="597. Friend Requests I: Overall Acceptance Rate 好友申请 I ：总体通过率"></a>597. Friend Requests I: Overall Acceptance Rate 好友申请 I ：总体通过率</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">In social network like Facebook or Twitter, people send friend requests and accept others requests as well. </span><br><span class="line">Now given two tables as below:</span><br><span class="line"></span><br><span class="line">Table: friend_request</span><br><span class="line">| sender_id | send_to_id |request_date|</span><br><span class="line">|-----------|------------|------------|</span><br><span class="line">| 1         | 2          | 2016_06-01 |</span><br><span class="line">| 1         | 3          | 2016_06-01 |</span><br><span class="line">| 1         | 4          | 2016_06-01 |</span><br><span class="line">| 2         | 3          | 2016_06-02 |</span><br><span class="line">| 3         | 4          | 2016-06-09 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Table: request_accepted</span><br><span class="line">| requester_id | accepter_id |accept_date |</span><br><span class="line">|--------------|-------------|------------|</span><br><span class="line">| 1            | 2           | 2016_06-03 |</span><br><span class="line">| 1            | 3           | 2016-06-08 |</span><br><span class="line">| 2            | 3           | 2016-06-08 |</span><br><span class="line">| 3            | 4           | 2016-06-09 |</span><br><span class="line">| 3            | 4           | 2016-06-10 |</span><br><span class="line"></span><br><span class="line">Write a query to find the overall acceptance rate of requests rounded to 2 decimals, which is the number of acceptance divide the number of requests.</span><br><span class="line"></span><br><span class="line">For the sample data above, your query should return the following result.</span><br><span class="line">|accept_rate|</span><br><span class="line">|-----------|</span><br><span class="line">|       0.80|</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">    The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.</span><br><span class="line">    It is possible that a sender sends multiple requests to the same receiver, and a request could be accepted more than once. In this case, the ‘duplicated’ requests or acceptances are only counted once.</span><br><span class="line">    If there is no requests at all, you should return 0.00 as the accept_rate.</span><br><span class="line"></span><br><span class="line">Explanation: There are 4 unique accepted requests, and there are 5 requests in total. So the rate is 0.80.</span><br><span class="line"></span><br><span class="line">Follow-up:</span><br><span class="line">Can you write a query to return the accept rate but for every month?</span><br><span class="line">How about the cumulative accept rate for every day?</span><br></pre></td></tr></table></figure><p>思路：题目求好友请求的接受率，即接受请求的数量除以总请求数量，并保留2位小数。注意去重和没有请求的情况。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">ROUND</span>( </span><br><span class="line">        <span class="keyword">IFNULL</span>(</span><br><span class="line">             <span class="comment">-- 统计被接受的请求量，一个请求可能接受多次，但是统计时只算一次，因此去重</span></span><br><span class="line">             (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> requester_id, accepter_id <span class="keyword">FROM</span> request_accepted) <span class="keyword">AS</span> A)</span><br><span class="line">             /    <span class="comment">-- 接受率 = 被接受的请求的数量 / 总的请求量</span></span><br><span class="line">             <span class="comment">-- 统计总的请求量，一个人可能向同一人发送多次请求，只算一次，因此去重</span></span><br><span class="line">             (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sender_id, send_to_id <span class="keyword">FROM</span> friend_request) <span class="keyword">AS</span> B)</span><br><span class="line">        , <span class="number">0</span>)  <span class="comment">-- 如果没有请求，返回0.00作为接受率</span></span><br><span class="line">    , <span class="number">2</span>)   <span class="comment">-- round()函数保留两位小数</span></span><br><span class="line">) <span class="keyword">AS</span> accept_rate;</span><br></pre></td></tr></table></figure><p><strong>进阶问题，求出每个月的好友请求接受率和每天的好友请求接受率？</strong></p><h3 id="603-Consecutive-Available-Seats-连续空余座位"><a href="#603-Consecutive-Available-Seats-连续空余座位" class="headerlink" title="603. Consecutive Available Seats 连续空余座位"></a>603. Consecutive Available Seats 连续空余座位</h3><p>题目描述：<a href="https://leetcode.com/articles/consecutive-available-seats/" target="_blank" rel="noopener">https://leetcode.com/articles/consecutive-available-seats/</a></p><p>思路：找出的座位需要符合两个条件，一个是空余的，即<code>free=1</code>，另一个是要连续，连续指的是&gt;=2个空余的座位，且seat_id是相邻的，相邻即两个id号之间的差为1。<br>那么可以将表自连接，首先找出空余的，然后找出座位id差1的，这个可以用<code>ABS(a.seat_id - b.seat_id) = 1</code>来判定，但是需要注意的是，可能产生的重复值，比如：</p><p>将表自连接后，对于id=4的座位，和id=3和id=5的座位相邻，在相邻条件判定的时候：<code>4-3=1,5-4=1</code>， 那么就会出现座位id为4的重复座位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seat_idfreeseat_idfree</span><br><span class="line">4131</span><br><span class="line">3141</span><br><span class="line">5141</span><br><span class="line">4151</span><br></pre></td></tr></table></figure><p>因此，需要在最后对<code>seat_id</code>进行去重，然后在对id号排序。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.seat_id</span><br><span class="line"><span class="keyword">FROM</span> cinema <span class="keyword">AS</span> a <span class="keyword">JOIN</span> cinema <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> a.free = <span class="number">1</span> <span class="keyword">AND</span> b.free = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">ABS</span>(a.seat_id - b.seat_id) = <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.seat_id;</span><br></pre></td></tr></table></figure><h3 id="607-Sales-Person-销售员"><a href="#607-Sales-Person-销售员" class="headerlink" title="607. Sales Person 销售员"></a>607. Sales Person 销售员</h3><p>题目描述：<a href="https://leetcode.com/articles/sales-person/" target="_blank" rel="noopener">https://leetcode.com/articles/sales-person/</a></p><p>思路：题目要求给出对’RED’公司没有销量的销售姓名，那么可以先找出对RED公司有销量的所有销售的姓名，然后使用NOT IN 排除掉这些人，剩下的就是对该公司没有销量的销售姓名。<br>在找对’RED’公司有销量的销售姓名时，需要将公司表company和订单表orders联结，并指定RED公司为过滤条件，找出销售员id。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name</span><br><span class="line"><span class="keyword">FROM</span> salesperson <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">WHERE</span> sales_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> o.sales_id</span><br><span class="line">    <span class="keyword">FROM</span> orders <span class="keyword">AS</span> o <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> company <span class="keyword">AS</span> c</span><br><span class="line">    <span class="keyword">ON</span> o.com_id = c.com_id</span><br><span class="line">    <span class="keyword">WHERE</span> c.name = <span class="string">'RED'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="610-判断三角形"><a href="#610-判断三角形" class="headerlink" title="610. 判断三角形"></a>610. 判断三角形</h3><p>题目描述：<a href="https://leetcode.com/articles/triangle-judgement/" target="_blank" rel="noopener">https://leetcode.com/articles/triangle-judgement/</a></p><p>思路：一开始忘记了三角形的判定条件了。。查了下才知道任意两边之和大于第三边，然后使用CASE WHEN来判定，或者if()函数也可以</p><p>通过代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x,y,z</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> x + y &gt; z <span class="keyword">AND</span> x + z &gt; y <span class="keyword">AND</span> y + z &gt; x <span class="keyword">THEN</span> <span class="string">'Yes'</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">'No'</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'triangle'</span></span><br><span class="line"><span class="keyword">FROM</span> triangle;</span><br></pre></td></tr></table></figure><p>使用if()函数通过代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x,y,z</span><br><span class="line">    <span class="keyword">IF</span>(x + y &gt; z <span class="keyword">AND</span> x + z &gt; y <span class="keyword">AND</span> y + z &gt; x, <span class="string">'Yes'</span>, <span class="string">'No'</span>) <span class="keyword">AS</span> <span class="string">'triangle'</span></span><br><span class="line"><span class="keyword">FROM</span> triangle;</span><br></pre></td></tr></table></figure><h3 id="613-Shortest-Distance-in-a-Line-直线上的最近距离"><a href="#613-Shortest-Distance-in-a-Line-直线上的最近距离" class="headerlink" title="613. Shortest Distance in a Line 直线上的最近距离"></a>613. Shortest Distance in a Line 直线上的最近距离</h3><p>题目描述：<a href="https://leetcode.com/articles/shortest-distance-in-a-line/" target="_blank" rel="noopener">https://leetcode.com/articles/shortest-distance-in-a-line/</a></p><p>思路：开始是想到用自连接将point表连接的，但是对于连接条件on有点蒙，不知道怎么设，后来看了下解答，才注意到有个条件，每个点都是唯一的， point 表中没有重复记录。因此连接条件设为<code>p1.x != p2.x</code>。<br>连接完成后，有了所有可能的点对，先求出每两个点之间的距离，再用MIN()函数得到最小的距离。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="keyword">ABS</span>(p1.x-p2.x)) <span class="keyword">AS</span> shortest</span><br><span class="line"><span class="keyword">FROM</span> point <span class="keyword">AS</span> p1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> point <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">ON</span> p1.x != p2.x</span><br></pre></td></tr></table></figure><p>这种方法把每两个点之间的距离计算了两次，在讨论区看到第二种更好的解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(p1.x - p2.x) <span class="keyword">AS</span> shortest</span><br><span class="line"><span class="keyword">FROM</span> point <span class="keyword">AS</span> p1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> point <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">ON</span> p1.x &gt; p2.x;</span><br></pre></td></tr></table></figure><p>第二种方法通过<code>p1.x &gt; p2.x</code>的连接条件，避免了重复计算，把效率提升了一倍。</p><h3 id="619-Biggest-Single-Number-只出现一次的最大数字"><a href="#619-Biggest-Single-Number-只出现一次的最大数字" class="headerlink" title="619. Biggest Single Number    只出现一次的最大数字"></a>619. Biggest Single Number    只出现一次的最大数字</h3><p>题目描述：<a href="https://leetcode.com/articles/biggest-single-number/" target="_blank" rel="noopener">https://leetcode.com/articles/biggest-single-number/</a></p><p>思路：使用子查询找出只出现一次的数字，然后使用MAX找出这些数字中的最大值。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">num</span>) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">FROM</span> my_numbers</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">num</span>) = <span class="number">1</span></span><br><span class="line">) <span class="keyword">AS</span> m;  <span class="comment">-- 注意子查询必须命名别称</span></span><br></pre></td></tr></table></figure><h3 id="620-Not-Boring-Movies-有趣的电影"><a href="#620-Not-Boring-Movies-有趣的电影" class="headerlink" title="620. Not Boring Movies     有趣的电影"></a>620. Not Boring Movies     有趣的电影</h3><p>题目描述：<a href="https://leetcode.com/problems/not-boring-movies/" target="_blank" rel="noopener">https://leetcode.com/problems/not-boring-movies/</a></p><p>思路：过滤条件一个是<code>description != &#39;boring&#39;</code>，另一个是id为奇数，可以用<code>id % 2 = 1</code>判断奇数。最后根据rating逆序排序。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> cinema</span><br><span class="line"><span class="keyword">WHERE</span> description != <span class="string">'boring'</span> <span class="keyword">AND</span> <span class="keyword">id</span> % <span class="number">2</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> rating <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>关于奇数的判断，也可以用MOD()函数来完成，<code>MOD(id, 2) = 1</code>确定奇数id。</p><h3 id="627-Swap-Salary-交换工资"><a href="#627-Swap-Salary-交换工资" class="headerlink" title="627. Swap Salary 交换工资"></a>627. Swap Salary 交换工资</h3><p>题目描述：<a href="https://leetcode.com/problems/swap-salary/" target="_blank" rel="noopener">https://leetcode.com/problems/swap-salary/</a></p><p>思路：感觉这个题目应该叫交换性别。。使用CASE WHEN或者IF语句实现判断</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span> sex = (</span><br><span class="line">    <span class="keyword">CASE</span> sex</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">'f'</span> <span class="keyword">THEN</span> <span class="string">'m'</span> </span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">'f'</span> </span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span> sex = <span class="keyword">IF</span>( sex=<span class="string">'f'</span>, <span class="string">'m'</span>, <span class="string">'f'</span>);</span><br></pre></td></tr></table></figure><h3 id="1050-Actors-and-Directors-Who-Cooperated-At-Least-Three-Times-合作过至少三次的演员和导演"><a href="#1050-Actors-and-Directors-Who-Cooperated-At-Least-Three-Times-合作过至少三次的演员和导演" class="headerlink" title="1050 Actors and Directors Who Cooperated At Least Three Times 合作过至少三次的演员和导演"></a>1050 Actors and Directors Who Cooperated At Least Three Times 合作过至少三次的演员和导演</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Table: ActorDirector</span><br><span class="line"></span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| actor_id    | int     |</span><br><span class="line">| director_id | int     |</span><br><span class="line">| timestamp   | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">timestamp is the primary key column for this table.</span><br><span class="line"></span><br><span class="line">Write a SQL query for a report that provides the pairs (actor_id, director_id) where</span><br><span class="line">the actor have cooperated with the director at least 3 times.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">ActorDirector table:</span><br><span class="line">+-------------+-------------+-------------+</span><br><span class="line">| actor_id    | director_id | timestamp   |</span><br><span class="line">+-------------+-------------+-------------+</span><br><span class="line">| 1           | 1           | 0           |</span><br><span class="line">| 1           | 1           | 1           |</span><br><span class="line">| 1           | 1           | 2           |</span><br><span class="line">| 1           | 2           | 3           |</span><br><span class="line">| 1           | 2           | 4           |</span><br><span class="line">| 2           | 1           | 5           |</span><br><span class="line">| 2           | 1           | 6           |</span><br><span class="line">+-------------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| actor_id    | director_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">The only pair is (1, 1) where they cooperated exactly 3 times.</span><br></pre></td></tr></table></figure><p>思路：找出合作至少三次的(演员，导演)，那么将ActorDirector分组，只有actor_id和director_id一样的才算一组，然后统计这样的组的数量。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> actor_id, director_id</span><br><span class="line"><span class="keyword">FROM</span> ActorDirector</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> actor_id, director_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="1068-Product-Sales-Analysis-I-产品销售分析-I"><a href="#1068-Product-Sales-Analysis-I-产品销售分析-I" class="headerlink" title="1068 Product Sales Analysis I  产品销售分析 I"></a>1068 Product Sales Analysis I  产品销售分析 I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Table: Sales</span><br><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">(sale_id, year) is the primary key of this table.</span><br><span class="line">product_id is a foreign key to Product table.</span><br><span class="line">Note that the price is per unit.</span><br><span class="line"></span><br><span class="line">Table: Product</span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Write an SQL query that reports all product names of the products in the </span><br><span class="line">Sales table along with their selling year and price.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+--------------+-------+-------+</span><br><span class="line">| product_name | year  | price |</span><br><span class="line">+--------------+-------+-------+</span><br><span class="line">| Nokia        | 2008  | 5000  |</span><br><span class="line">| Nokia        | 2009  | 5000  |</span><br><span class="line">| Apple        | 2011  | 9000  |</span><br><span class="line">+--------------+-------+-------+</span><br></pre></td></tr></table></figure><p>思路：将Sales表和Product外连接，条件设为产品id相同，取出题目要求的内容。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> P.product_name, S.year, S.price</span><br><span class="line"><span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> S.product_id = P.product_id;</span><br></pre></td></tr></table></figure><h3 id="1069-Product-Sales-Analysis-II-产品销售分析-II"><a href="#1069-Product-Sales-Analysis-II-产品销售分析-II" class="headerlink" title="1069 Product Sales Analysis II    产品销售分析 II"></a>1069 Product Sales Analysis II    产品销售分析 II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Table: Sales</span><br><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">sale_id is the primary key of this table.</span><br><span class="line">product_id is a foreign key to Product table.</span><br><span class="line">Note that the price is per unit.</span><br><span class="line"></span><br><span class="line">Table: Product</span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the total quantity sold for every product id.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+--------------+----------------+</span><br><span class="line">| product_id   | total_quantity |</span><br><span class="line">+--------------+----------------+</span><br><span class="line">| 100          | 22             |</span><br><span class="line">| 200          | 15             |</span><br><span class="line">+--------------+----------------+</span><br></pre></td></tr></table></figure><p>思路：按照 <code>product_id</code> 进行分组，对每组内的<code>quantity</code>求和。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> P.product_id, <span class="keyword">SUM</span>(S.quantity) <span class="keyword">AS</span> total_quantity</span><br><span class="line"><span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> S.product_id = P.product_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><h3 id="1075-Project-Employees-I-项目员工-I"><a href="#1075-Project-Employees-I-项目员工-I" class="headerlink" title="1075 Project Employees I 项目员工 I"></a>1075 Project Employees I 项目员工 I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Table: Project</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| project_id  | int     |</span><br><span class="line">| employee_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">(project_id, employee_id) is the primary key of this table.</span><br><span class="line">employee_id is a foreign key to Employee table.</span><br><span class="line"></span><br><span class="line">Table: Employee</span><br><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| employee_id      | int     |</span><br><span class="line">| name             | varchar |</span><br><span class="line">| experience_years | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">employee_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the average experience years of all the employees </span><br><span class="line">for each project, rounded to 2 digits.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Project table:</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| project_id  | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">| 1           | 2           |</span><br><span class="line">| 1           | 3           |</span><br><span class="line">| 2           | 1           |</span><br><span class="line">| 2           | 4           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Employee table:</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| employee_id | name   | experience_years |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| 1           | Khaled | 3                |</span><br><span class="line">| 2           | Ali    | 2                |</span><br><span class="line">| 3           | John   | 1                |</span><br><span class="line">| 4           | Doe    | 2                |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| project_id  | average_years |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | 2.00          |</span><br><span class="line">| 2           | 2.50          |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">The average experience years for the first project is (3 + 2 + 1) &#x2F; 3 &#x3D; 2.00 and </span><br><span class="line">for the second project is (3 + 2) &#x2F; 2 &#x3D; 2.50</span><br></pre></td></tr></table></figure><p>思路：连接项目表和员工表，对项目表中的项目id进行分组，求出每个组中的员工的平均工作年龄，取2位小数。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> P.project_id, <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(E.experience_years), <span class="number">2</span>) <span class="keyword">AS</span> average_years</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Project</span> <span class="keyword">AS</span> P <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">ON</span> P.employee_id = E.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> P.project_id;</span><br></pre></td></tr></table></figure><h3 id="1076-Project-Employees-II-项目员工-II"><a href="#1076-Project-Employees-II-项目员工-II" class="headerlink" title="1076 Project Employees II  项目员工 II"></a>1076 Project Employees II  项目员工 II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Table: Project</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| project_id  | int     |</span><br><span class="line">| employee_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">(project_id, employee_id) is the primary key of this table.</span><br><span class="line">employee_id is a foreign key to Employee table.</span><br><span class="line"></span><br><span class="line">Table: Employee</span><br><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| employee_id      | int     |</span><br><span class="line">| name             | varchar |</span><br><span class="line">| experience_years | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">employee_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Write an SQL query that reports all the projects that have the most employees.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Project table:</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| project_id  | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">| 1           | 2           |</span><br><span class="line">| 1           | 3           |</span><br><span class="line">| 2           | 1           |</span><br><span class="line">| 2           | 4           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Employee table:</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| employee_id | name   | experience_years |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| 1           | Khaled | 3                |</span><br><span class="line">| 2           | Ali    | 2                |</span><br><span class="line">| 3           | John   | 1                |</span><br><span class="line">| 4           | Doe    | 2                |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| project_id  |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">+-------------+</span><br><span class="line">The first project has 3 employees while the second one has 2.</span><br></pre></td></tr></table></figure><p>思路：题目要求出员工最多的项目，那么先找出每个项目都有多少人，这里需要将项目分组，利用COUNT()函数计算人数，然后将人数逆序，取第一个，就到得了员工最多的。最后利用HAVING条件过滤得到项目id。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> project_id </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Project</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> project_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(employee_id) = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(employee_id) <span class="keyword">AS</span> cnt</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">Project</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> project_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(employee_id) <span class="keyword">DESC</span>  <span class="comment">--得到各组项目员工人数的逆序</span></span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1082-Sales-Analysis-I-销售分析-I"><a href="#1082-Sales-Analysis-I-销售分析-I" class="headerlink" title="1082. Sales Analysis I     销售分析 I"></a>1082. Sales Analysis I     销售分析 I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Table: Product</span><br><span class="line"></span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Table: Sales</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">This table has no primary key, it can have repeated rows.</span><br><span class="line">product_id is a foreign key to Product table.</span><br><span class="line"> </span><br><span class="line">Write an SQL query that reports the best seller by total sales price, If there is a tie,</span><br><span class="line">report them all.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| seller_id   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">Both sellers with id 1 and 3 sold products with the most total price of 2800.</span><br></pre></td></tr></table></figure><p>思路：找出总售价最高的卖家，和上面一道员工最多的项目思路是一样的，只不过那个是统计数量，这个是计算总和。先找出每个卖家的总售价和，逆序排序取第一个得到最高的总售价，最后使用HAVING过滤出与最高总售价相等的卖家id。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> seller_id</span><br><span class="line"><span class="keyword">FROM</span> Sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> seller_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(price) = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SUM</span>(price)</span><br><span class="line">    <span class="keyword">FROM</span> Sales</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> seller_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUM</span>(price) <span class="keyword">DESC</span></span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1083-Sales-Analysis-II-销售分析-II"><a href="#1083-Sales-Analysis-II-销售分析-II" class="headerlink" title="1083 Sales Analysis II 销售分析 II"></a>1083 Sales Analysis II 销售分析 II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Table: Product</span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Table: Sales</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">This table has no primary key, it can have repeated rows.</span><br><span class="line">product_id is a foreign key to Product table.</span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the buyers who have bought S8 but not iPhone. </span><br><span class="line">Note that S8 and iPhone are products present in the Product table.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 1          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 3        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| buyer_id    |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">+-------------+</span><br><span class="line">The buyer with id 1 bought an S8 but didn&#39;t buy an iPhone. </span><br><span class="line">The buyer with id 3 bought both.</span><br></pre></td></tr></table></figure><p>思路：要找出购买了S8但是没有买iPhone的，那么首先找出所有买了S8的buyer_id，再找出这些buyer_id中没有买过iPhone的。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> S.buyer_id</span><br><span class="line"><span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> S.product_id = P.product_id</span><br><span class="line"><span class="keyword">WHERE</span> P.product_name = <span class="string">'S8'</span></span><br><span class="line"><span class="keyword">AND</span> S.buyer_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> S.buyer_id</span><br><span class="line">    <span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line">    <span class="keyword">ON</span> S.product_id = P.product_id</span><br><span class="line">    <span class="keyword">WHERE</span> P.product_name = <span class="string">'iPhone'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="1084-Sales-Analysis-III-销售分析-III"><a href="#1084-Sales-Analysis-III-销售分析-III" class="headerlink" title="1084 Sales Analysis III 销售分析 III"></a>1084 Sales Analysis III 销售分析 III</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Table: Product</span><br><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id is the primary key of this table.</span><br><span class="line"></span><br><span class="line">Table: Sales</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">This table has no primary key, it can have repeated rows.</span><br><span class="line">product_id is a foreign key to Product table.</span><br><span class="line"> </span><br><span class="line">Write an SQL query that reports the products that were only sold in spring 2019. </span><br><span class="line">That is, between 2019-01-01 and 2019-03-31 inclusive.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| product_id  | product_name |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | S8           |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">The product with id 1 was only sold in spring 2019 while the other two were sold after.</span><br></pre></td></tr></table></figure><p>思路：跟上一题类似，找出<strong>只在</strong>第一季度卖过的商品，那么先找出第一季卖的商品，再找出这些商品中没有在其他季度卖过的。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> P.product_id, P.product_name</span><br><span class="line"><span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> S.product_id = P.product_id</span><br><span class="line"><span class="keyword">WHERE</span> S.sale_date <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-03-31'</span></span><br><span class="line"><span class="keyword">AND</span> P.product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> P.product_id</span><br><span class="line">    <span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line">    <span class="keyword">ON</span> S.product_id = P.product_id</span><br><span class="line">    <span class="keyword">WHERE</span> S.sale_date <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-03-31'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>另一种思路：先找出所有卖过的商品记为A，选出在其他季度卖过的商品记为B，那么A-B做差就是只在第一季度卖的商品。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> P.product_id, P.product_name</span><br><span class="line"><span class="keyword">FROM</span> Product <span class="keyword">AS</span> P <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Sales <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">ON</span> P.product_id = A.product_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> S.product_id</span><br><span class="line">    <span class="keyword">FROM</span> Sales <span class="keyword">AS</span> S</span><br><span class="line">    <span class="keyword">WHERE</span> S.sale_date <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-03-31'</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.product_id = B.product_id</span><br><span class="line"><span class="keyword">WHERE</span> B.product_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>本题思路来自：<a href="http://www.jasonpeng.cn/2019/08/18/leetcode1084-sales-analysis-iii/" target="_blank" rel="noopener">http://www.jasonpeng.cn/2019/08/18/leetcode1084-sales-analysis-iii/</a></p><h3 id="1113-Reported-Posts"><a href="#1113-Reported-Posts" class="headerlink" title="1113 Reported Posts"></a>1113 Reported Posts</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Table: Actions</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| post_id       | int     |</span><br><span class="line">| action_date   | date    | </span><br><span class="line">| action        | enum    |</span><br><span class="line">| extra         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line"></span><br><span class="line">The action column is an ENUM type of (&#39;view&#39;, &#39;like&#39;, &#39;reaction&#39;, </span><br><span class="line">&#39;comment&#39;, &#39;report&#39;, &#39;share&#39;).</span><br><span class="line"></span><br><span class="line">The extra column has optional information about the action such as a reason for </span><br><span class="line">report or a type of reaction. </span><br><span class="line"></span><br><span class="line">Write an SQL query that reports the number of posts reported yesterday for </span><br><span class="line">each report reason. Assume today is 2019-07-05.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Actions table:</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| user_id | post_id | action_date | action | extra  |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| 1       | 1       | 2019-07-01  | view   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | like   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | share  | null   |</span><br><span class="line">| 2       | 4       | 2019-07-04  | view   | null   |</span><br><span class="line">| 2       | 4       | 2019-07-04  | report | spam   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | view   | null   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | report | spam   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | view   | null   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | report | spam   |</span><br><span class="line">| 5       | 2       | 2019-07-04  | view   | null   |</span><br><span class="line">| 5       | 2       | 2019-07-04  | report | racism |</span><br><span class="line">| 5       | 5       | 2019-07-04  | view   | null   |</span><br><span class="line">| 5       | 5       | 2019-07-04  | report | racism |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| report_reason | report_count |</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| spam          | 1            |</span><br><span class="line">| racism        | 2            |</span><br><span class="line">+---------------+--------------+ </span><br><span class="line">Note that we only care about report reasons with non zero number of reports.</span><br></pre></td></tr></table></figure><p>思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1141-User-Activity-for-the-Past-30-Days-I"><a href="#1141-User-Activity-for-the-Past-30-Days-I" class="headerlink" title="1141 User Activity for the Past 30 Days I"></a>1141 User Activity for the Past 30 Days I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| session_id    | int     |</span><br><span class="line">| activity_date | date    |</span><br><span class="line">| activity_type | enum    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line">The activity_type column is an ENUM of type (&#39;open_session&#39;, &#39;end_session&#39;, &#39;scroll_down&#39;, &#39;send_message&#39;).</span><br><span class="line">The table shows the user activities for a social media website. </span><br><span class="line">Note that each session belongs to exactly one user.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Write an SQL query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on some day if he&#x2F;she made at least one activity on that day.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| user_id | session_id | activity_date | activity_type |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| 1       | 1          | 2019-07-20    | open_session  |</span><br><span class="line">| 1       | 1          | 2019-07-20    | scroll_down   |</span><br><span class="line">| 1       | 1          | 2019-07-20    | end_session   |</span><br><span class="line">| 2       | 4          | 2019-07-20    | open_session  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | send_message  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | end_session   |</span><br><span class="line">| 3       | 2          | 2019-07-21    | open_session  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | send_message  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | end_session   |</span><br><span class="line">| 4       | 3          | 2019-06-25    | open_session  |</span><br><span class="line">| 4       | 3          | 2019-06-25    | end_session   |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+--------------+ </span><br><span class="line">| day        | active_users |</span><br><span class="line">+------------+--------------+ </span><br><span class="line">| 2019-07-20 | 2            |</span><br><span class="line">| 2019-07-21 | 2            |</span><br><span class="line">+------------+--------------+ </span><br><span class="line">Note that we do not care about days with zero active users.</span><br></pre></td></tr></table></figure><p>思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1142-User-Activity-for-the-Past-30-Days-II"><a href="#1142-User-Activity-for-the-Past-30-Days-II" class="headerlink" title="1142 User Activity for the Past 30 Days II"></a>1142 User Activity for the Past 30 Days II</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Table: Activity</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| session_id    | int     |</span><br><span class="line">| activity_date | date    |</span><br><span class="line">| activity_type | enum    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line">The activity_type column is an ENUM of type (&#39;open_session&#39;, &#39;end_session&#39;, &#39;scroll_down&#39;, &#39;send_message&#39;).</span><br><span class="line">The table shows the user activities for a social media website.</span><br><span class="line">Note that each session belongs to exactly one user.</span><br><span class="line"></span><br><span class="line">Write an SQL query to find the average number of sessions per user for a period of 30 days ending 2019-07-27 inclusively, rounded to 2 decimal places. The sessions we want to count for a user are those with at least one activity in that time period.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Activity table:</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| user_id | session_id | activity_date | activity_type |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| 1       | 1          | 2019-07-20    | open_session  |</span><br><span class="line">| 1       | 1          | 2019-07-20    | scroll_down   |</span><br><span class="line">| 1       | 1          | 2019-07-20    | end_session   |</span><br><span class="line">| 2       | 4          | 2019-07-20    | open_session  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | send_message  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | end_session   |</span><br><span class="line">| 3       | 2          | 2019-07-21    | open_session  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | send_message  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | end_session   |</span><br><span class="line">| 3       | 5          | 2019-07-21    | open_session  |</span><br><span class="line">| 3       | 5          | 2019-07-21    | scroll_down   |</span><br><span class="line">| 3       | 5          | 2019-07-21    | end_session   |</span><br><span class="line">| 4       | 3          | 2019-06-25    | open_session  |</span><br><span class="line">| 4       | 3          | 2019-06-25    | end_session   |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+---------------------------+ </span><br><span class="line">| average_sessions_per_user |</span><br><span class="line">+---------------------------+ </span><br><span class="line">| 1.33                      |</span><br><span class="line">+---------------------------+ </span><br><span class="line">User 1 and 2 each had 1 session in the past 30 days while user 3 had 2 sessions so the average is (1 + 1 + 2) &#x2F; 3 &#x3D; 1.33.</span><br></pre></td></tr></table></figure><p>思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1148-Article-Views-I"><a href="#1148-Article-Views-I" class="headerlink" title="1148 Article Views I"></a>1148 Article Views I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Table: Views</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| article_id    | int     |</span><br><span class="line">| author_id     | int     |</span><br><span class="line">| viewer_id     | int     |</span><br><span class="line">| view_date     | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">There is no primary key for this table, it may have duplicate rows.</span><br><span class="line">Each row of this table indicates that some viewer viewed an article (written by some author) on some date. </span><br><span class="line">Note that equal author_id and viewer_id indicate the same person.</span><br><span class="line"></span><br><span class="line">Write an SQL query to find all the authors that viewed at least one of their own articles, sorted in ascending order by their id.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Views table:</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| article_id | author_id | viewer_id | view_date  |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| 1          | 3         | 5         | 2019-08-01 |</span><br><span class="line">| 1          | 3         | 6         | 2019-08-02 |</span><br><span class="line">| 2          | 7         | 7         | 2019-08-01 |</span><br><span class="line">| 2          | 7         | 6         | 2019-08-02 |</span><br><span class="line">| 4          | 7         | 1         | 2019-07-22 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 4    |</span><br><span class="line">| 7    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1173-Immediate-Food-Delivery-I"><a href="#1173-Immediate-Food-Delivery-I" class="headerlink" title="1173 Immediate Food Delivery I"></a>1173 Immediate Food Delivery I</h3><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Table: Delivery</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| Column Name                 | Type    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| delivery_id                 | int     |</span><br><span class="line">| customer_id                 | int     |</span><br><span class="line">| order_date                  | date    |</span><br><span class="line">| customer_pref_delivery_date | date    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">delivery_id is the primary key of this table.</span><br><span class="line">The table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">If the preferred delivery date of the customer is the same as the order date then the order is called immediate otherwise it&#39;s called scheduled.</span><br><span class="line"></span><br><span class="line">Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.</span><br><span class="line"></span><br><span class="line">The query result format is in the following example:</span><br><span class="line"></span><br><span class="line">Delivery table:</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| delivery_id | customer_id | order_date | customer_pref_delivery_date |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| 1           | 1           | 2019-08-01 | 2019-08-02                  |</span><br><span class="line">| 2           | 5           | 2019-08-02 | 2019-08-02                  |</span><br><span class="line">| 3           | 1           | 2019-08-11 | 2019-08-11                  |</span><br><span class="line">| 4           | 3           | 2019-08-24 | 2019-08-26                  |</span><br><span class="line">| 5           | 4           | 2019-08-21 | 2019-08-22                  |</span><br><span class="line">| 6           | 2           | 2019-08-11 | 2019-08-13                  |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+----------------------+</span><br><span class="line">| immediate_percentage |</span><br><span class="line">+----------------------+</span><br><span class="line">| 33.33                |</span><br><span class="line">+----------------------+</span><br><span class="line">The orders with delivery id 2 and 3 are immediate while the others are scheduled.</span><br></pre></td></tr></table></figure><p>思路：</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1179-Reformat-Department-Table"><a href="#1179-Reformat-Department-Table" class="headerlink" title="1179. Reformat Department Table"></a>1179. Reformat Department Table</h3><p>题目描述：<a href="https://leetcode.com/problems/reformat-department-table/" target="_blank" rel="noopener">https://leetcode.com/problems/reformat-department-table/</a></p><p>思路：题目要求出每个id在1-12个月的收入，那么先把id进行分组，然后使用CASE WHEN来判断某月是否有收入，如果有就显示收入，没有就显示null。也可以把CASE WHEN换成IF()语句。</p><p>通过代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jan'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jan_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'feb'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Feb_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'mar'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Mar_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'apr'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Apr_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'may'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> May_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jun'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jun_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jul'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jul_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'aug'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Aug_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'sep'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Sep_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'oct'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Oct_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'nov'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Nov_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'dec'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Dec_Revenue</span><br><span class="line"><span class="keyword">from</span> department</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文包含LeetCode中easy难度的sql练习题的解题思路和通过代码，关于题目描述可以查看&lt;a href=&quot;https://leetcode.com/problemset/database/?difficulty=Easy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode原网站&lt;/a&gt;，或者&lt;a href=&quot;https://leetcode-cn.com/problemset/database/?difficulty=%E7%AE%80%E5%8D%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode中文网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于带锁的部分练习，由于博主没有开会员，所以没有在LeetCode网站上测试过，参考了别的博客写的。另外题目编号1113,1141,1142,1148,1173这几道题还没写出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>使用SQL统计某个字符串中出现子串的次数</title>
    <link href="http://huanyouchen.github.io/2019/09/09/SQL-counts-the-number-of-occurrences-of-substrings-in-a-string/"/>
    <id>http://huanyouchen.github.io/2019/09/09/SQL-counts-the-number-of-occurrences-of-substrings-in-a-string/</id>
    <published>2019-09-08T16:00:00.000Z</published>
    <updated>2019-09-08T12:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文方法来自：<a href="https://www.nowcoder.com/questionTerminal/e3870bd5d6744109a902db43c105bd50?f=discussion" target="_blank" rel="noopener">牛客网：查找字符串’10,A,B’ 中逗号’,’出现的次数cnt</a></p><p>题目：查找字符串’10,A,B’ 中逗号’,’出现的次数cnt。</p><p>思路：先用replace函数将原串中出现的子串用空串替换，再用原串长度减去替换后字符串的长度，最后除以子串的长度。</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">    (<span class="keyword">length</span>(<span class="string">"10,A,B"</span>) - <span class="keyword">length</span>(<span class="keyword">replace</span>(<span class="string">"10,A,B"</span>, <span class="string">","</span>, <span class="string">""</span>))) / <span class="keyword">length</span>(<span class="string">","</span>)</span><br><span class="line">) <span class="keyword">AS</span> cnt;</span><br></pre></td></tr></table></figure><p>(原串<code>10,A,B</code>长度6-替换串<code>10AB</code>长度4) / 子串<code>,</code>长度1 = 子串出现次数2</p><p><strong>扩展1</strong></p><p>题目：查找字符串’10,,A,,B’ 中逗号’,,’出现的次数cnt。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">    (<span class="keyword">length</span>(<span class="string">"10,,A,,B"</span>) - <span class="keyword">length</span>(<span class="keyword">replace</span>(<span class="string">"10,,A,,B"</span>, <span class="string">",,"</span>, <span class="string">""</span>))) / <span class="keyword">length</span>(<span class="string">",,"</span>)</span><br><span class="line">) <span class="keyword">AS</span> cnt;</span><br></pre></td></tr></table></figure><p>因为原串中的子串使用空串代替的，所以当子串的长度超过1时，还需要除去子串本身的长度。<br>(原串<code>10,,A,,B</code>长度8-替换串<code>10AB</code>长度4) / 子串<code>,,</code>长度2 = 子串出现次数2</p><p><strong>扩展2</strong></p><p>题目：查找字符串’我。。喜欢。。你’ 中句号’。。’出现的次数cnt。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">    (<span class="keyword">char_length</span>(<span class="string">"我。。喜欢。。你"</span>) - <span class="keyword">char_length</span>(<span class="keyword">replace</span>(<span class="string">"我。。喜欢。。你"</span>, <span class="string">"。。"</span>, <span class="string">""</span>))) / <span class="keyword">char_length</span>(<span class="string">"。。"</span>)</span><br><span class="line">) <span class="keyword">AS</span> cnt;</span><br></pre></td></tr></table></figure><p>如果考虑到中文的话，其实应该用char_length()函数，统计的是字符长度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文方法来自：&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/e3870bd5d6744109a902db43c105bd50?f=discussion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;牛客网：查找字符串’10,A,B’ 中逗号’,’出现的次数cnt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目：查找字符串’10,A,B’ 中逗号’,’出现的次数cnt。&lt;/p&gt;
&lt;p&gt;思路：先用replace函数将原串中出现的子串用空串替换，再用原串长度减去替换后字符串的长度，最后除以子串的长度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>牛客网上sql专项练习记录</title>
    <link href="http://huanyouchen.github.io/2019/09/09/SQL-specific-exercise-records-on-nowcoder/"/>
    <id>http://huanyouchen.github.io/2019/09/09/SQL-specific-exercise-records-on-nowcoder/</id>
    <published>2019-09-08T16:00:00.000Z</published>
    <updated>2019-09-09T13:23:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容来自牛客网上数据库SQL实战，题目描述地址： <a href="https://www.nowcoder.com/ta/sql" target="_blank" rel="noopener">https://www.nowcoder.com/ta/sql</a></p><p>题目顺序按照热度指数排序的，部分题目的思路来自该题目下热门讨论内容。</p><a id="more"></a><hr><p><strong>1.查找最晚入职员工的所有信息</strong></p><p>思路：找出最晚入职的员工，即入职的时间是最大的，使用子查询将该条件作为过滤条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> hire_date = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(hire_date) <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><p>其他思路：把入职时间降序排序，那么排在最前面的就是入职时间最大的，也是最晚入职的员工,然后取该排序序列的第一个。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>但是这个思路不太严谨，摘自该题目后fsy351的解释：最晚入职的当天未必就一个人，也许有多人，使用排序并限制得只能取得指定数量的结果</p><p><strong>2.查找入职员工时间排名倒数第三的员工所有信息</strong></p><p>思路：把入职时间倒序排序，然后使用LIMIT关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>LIMIT m,n : 表示从第m+1条开始，取n条数据；<br>LIMIT n ： 表示从第0条开始，取n条数据，是limit(0,n)的缩写。</p><p>但是这样写不太严谨，比如有多个员工在同一天入职，那么应该按入职日期进行分组，将多个入职日期相同的分为一组，再排序，这样入职时间倒数第三的员工就都可以查出来了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> hire_date = (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> hire_date <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>3.查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no</strong></p><p>思路：把两张表关联起来，设定条件为to_date=9999-01-01  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sa.*,dm.dept_no</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_manager <span class="keyword">AS</span> dm <span class="keyword">ON</span> dm.emp_no = sa.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> sa.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> dm.to_date=<span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><p><strong>4.查找所有已经分配部门的员工的last_name和first_name</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> em.last_name, em.first_name, de.dept_no</span><br><span class="line"><span class="keyword">FROM</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees <span class="keyword">AS</span> em <span class="keyword">ON</span> de.emp_no = em.emp_no;</span><br></pre></td></tr></table></figure><p><strong>5.查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工</strong></p><p>思路：以员工为主表，这样即使没有分配部门的员工也可展示出来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> em.last_name, em.first_name, de.dept_no</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> em <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">ON</span> de.emp_no = em.emp_no;</span><br></pre></td></tr></table></figure><p><strong>6.查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</strong></p><p>第一次我的错误的写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ep.emp_no, sa.salary</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> ep <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa <span class="keyword">ON</span> ep.emp_no = sa.emp_no</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ep.emp_no <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>刚开始没有明白错在哪里，看讨论区后才知道读题不认真，要求的是查入职时候的薪水，而在salaries表中，每个号码为emp_no的员工会在不同时间段涨薪，这样一个emp_no就对应了多个salary。</p><p>因此按照题目要求的查入职时候的薪水，添加条件sa.from_date = ep.hire_date，正确写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ep.emp_no, sa.salary</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> ep <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa <span class="keyword">ON</span> ep.emp_no = sa.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> sa.from_date = ep.hire_date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ep.emp_no <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><strong>7.查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</strong></p><p>思路：把员工分组，使用COUNT()函数计算涨幅次数，使用HAVING条件过滤涨幅次数大于15的，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_no, <span class="keyword">COUNT</span>(salary) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> emp_no</span><br><span class="line"><span class="keyword">HAVING</span> t&gt;<span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>这样虽然可以通过，但是并不完全正确。COUNT()只是统计次数，并不能判定“涨薪”。<br>比如emp_no为10002的员工：<br>+——–+——–+————+————+<br>| emp_no | salary | from_date  | to_date    |<br>+——–+——–+————+————+<br>| 10002  |  72527 | 1996-08-03 | 1997-08-03 |<br>|  10002 |  72527 | 1997-08-03 | 1998-08-03 |<br>|  10002 |  72527 | 1998-08-03 | 1999-08-03 |<br>|  10002 |  72527 | 1999-08-03 | 2000-08-02 |<br>|  10002 |  72527 | 2000-08-02 | 2001-08-02 |<br>|  10002 |  72527 | 2001-08-02 | 9999-01-01 |</p><p>COUNT()统计次数有6次，但是涨薪次数为0次。<br>因此还应该加入下次的salary比本次的salary高，才统计为一次涨薪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.emp_no, <span class="keyword">COUNT</span>(s1.emp_no) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> s2</span><br><span class="line"><span class="keyword">ON</span> s1.emp_no = s2.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> s1.salary &lt; s2.salary <span class="keyword">AND</span> s1.to_date = s2.from_date</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> emp_no</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(s1.emp_no)&gt;<span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>不过这个题目这样解没有给通过</p><p><strong>8.找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</strong></p><p>思路：使用DISTINCT去重，DESC逆序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>其他思路： 如果是针对大量数据的去重，可以使用GROUP BY解决去重，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> salary</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><strong>9. 获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</strong></p><p>思路：将两表联结，取出题目需要的。注意要求的是当前manager的当前薪水情况，两个当前条件都要满足，这里又错了一遍。。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dm.dept_no, dm.emp_no, sa.salary</span><br><span class="line"><span class="keyword">FROM</span> dept_manager <span class="keyword">AS</span> dm <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa <span class="keyword">ON</span> dm.emp_no = sa.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> dm.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> sa.to_date = <span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><p><strong>10. 获取所有非manager的员工emp_no</strong></p><p>思路：先选出所有manager员工的emp_no，再用NOT IN过滤掉这些emp_no</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_no <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> emp_no <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> emp_no</span><br><span class="line">    <span class="keyword">FROM</span> dept_manager</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其他思路：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> em.emp_no</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> em</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> emp_no</span><br><span class="line">    <span class="keyword">FROM</span> dept_manager <span class="keyword">AS</span> dm</span><br><span class="line">    <span class="keyword">WHERE</span> em.emp_no = dm.emp_no</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其他思路：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> em.emp_no</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> em <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept_manager <span class="keyword">AS</span> dm</span><br><span class="line"><span class="keyword">ON</span> em.emp_no = dm.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> dm.dept_no <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><strong>11.获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</strong><br>思路：员工的当前管理者：那么员工所在部门<code>dept_no</code>与管理者所在部门<code>dept_no</code>应该是相同的，通过这点将dept_emp表和dept_manager表联结起来，然后判断当前的manager是自己，可以通过员工表中的emp_no和管理者表中emp_no，这两个编号相同即当前的manager是自己，最后设定当前时间。还需要注意员工的manager对应的manager_no在表中是没有的，这个编号就是管理表中的emp_no,把他起个别名manager_no就可以。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> de.emp_no,dm.emp_no <span class="keyword">AS</span> manager_no</span><br><span class="line"><span class="keyword">FROM</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_manager <span class="keyword">AS</span> dm <span class="keyword">ON</span> de.dept_no = dm.dept_no</span><br><span class="line"><span class="keyword">WHERE</span> de.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">AND</span> dm.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> de.emp_no != dm.emp_no;</span><br></pre></td></tr></table></figure><p><strong>12.获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> de.dept_no,  <span class="keyword">MAX</span>(sa.salary) <span class="keyword">AS</span> salary</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de</span><br><span class="line"><span class="keyword">ON</span> sa.emp_no = de.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> de.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">AND</span> sa.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> de.dept_no</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> de.dept_no;</span><br></pre></td></tr></table></figure><p><strong>13.从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title, <span class="keyword">COUNT</span>(title) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">FROM</span> titles</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> title</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(title) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>14.从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的title进行忽略。</strong><br>思路： 这个题和13题的区别在于，对重复的title进行去重，比如题目给的数据中，<br>+——–+——————–+————+————+<br>| emp_no | title              | from_date  | to_date    |<br>+——–+——————–+————+————+<br>|  10010 | Engineer           | 1996-11-24 | 9999-01-01 |<br>|  10010 | Engineer           | 1996-11-24 | 9999-01-01 |<br>+——–+——————–+————+————+<br>重复的title指的是emp_no中重复的，因此对emp_no去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title, <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> emp_no) <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">FROM</span> titles</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> title</span><br><span class="line"><span class="keyword">HAVING</span> t &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>15.查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> emp_no % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">AND</span> last_name != <span class="string">'Mary'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><strong>16. 统计出当前各个title类型对应的员工当前（to_date=’9999-01-01’）薪水对应的平均工资。结果给出title以及平均工资avg。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title, <span class="keyword">AVG</span>(sa.salary) <span class="keyword">AS</span> <span class="keyword">avg</span></span><br><span class="line"><span class="keyword">FROM</span> titles <span class="keyword">AS</span> ti <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa <span class="keyword">ON</span> ti.emp_no = sa.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> sa.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> ti.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ti.title;</span><br></pre></td></tr></table></figure><p><strong>17.获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</strong></p><p>我开始是这样写的，也通过了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_no,salary</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>但是看评论时候才发现不严谨，自己想的不够周全，题目要的是薪水第二多的，假如在公司中，当前薪水第一多(设为100万)的有3个人，薪水第二多的有1个人(设为80万)，那么按照上面的排序，结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100万</span><br><span class="line">100万</span><br><span class="line">100万</span><br><span class="line">80万</span><br></pre></td></tr></table></figure><p>而<code>LIMIT 1,1</code>选到的是第二个，是100万，但是题目要的是选出80万的，因此，应该对薪水同样多的进行去重，正确的写法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_no,salary</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">WHERE</span> salary = (</span><br><span class="line">    <span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> salaries</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> salary</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><p><strong>18.查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</strong></p><p>先用MAX()函数选出当前最高者：<code>SELECT MAX(salary) FROM salaries WHERE to_date=&#39;9999-01-01&#39;</code><br>然后在小于最高者的薪水中再选出最高者，即当前排名第二高的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> salaries</span><br><span class="line">    <span class="keyword">WHERE</span> salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> salaries <span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span>)</span><br><span class="line">          <span class="keyword">AND</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br></pre></td></tr></table></figure><p>最后，联结employees表，选出编号，姓名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp.emp_no,sa.salary,emp.last_name,emp.first_name</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees <span class="keyword">AS</span> emp </span><br><span class="line"><span class="keyword">ON</span> sa.emp_no = emp.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span> <span class="keyword">AND</span> salary = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> salaries</span><br><span class="line">    <span class="keyword">WHERE</span> salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> salaries <span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span>)</span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>19.查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</strong><br>思路：将三张表联结起来，因为要包括暂时没有分配部门的员工，使用LEFT JOIN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp.last_name, emp.first_name, dpm.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> emp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> dep <span class="keyword">ON</span> emp.emp_no = dep.emp_no</span><br><span class="line">                      <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> dpm <span class="keyword">ON</span> dep.dept_no = dpm.dept_no;</span><br></pre></td></tr></table></figure><p><strong>20.查找员工编号emp_no为10001其自入职以来的薪水salary涨幅值growth</strong></p><p>可以通过但是不严谨的写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="keyword">MAX</span>(salary)-<span class="keyword">MIN</span>(salary)) <span class="keyword">AS</span> growth</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">WHERE</span> emp_no = <span class="number">10001</span>;</span><br></pre></td></tr></table></figure><p>如果考虑到工资不是一直涨的，比如入职时工资1万，两年后3万，再过半年降成2.5万，现在工资是2.7万，那么入职以来薪水涨幅值是1.7万，而不是3-1=2万<br>因此，应该将最近一次工资减去入职时候第一次的工资，得到的才是涨幅值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">    (<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> salaries <span class="keyword">WHERE</span> emp_no = <span class="number">10001</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">to_date</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">1</span>) -</span><br><span class="line">    (<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> salaries <span class="keyword">WHERE</span> emp_no = <span class="number">10001</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">to_date</span> <span class="keyword">ASC</span> <span class="keyword">LIMIT</span> <span class="number">1</span>)</span><br><span class="line">) <span class="keyword">AS</span> growth;</span><br></pre></td></tr></table></figure><p><strong>21.查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序</strong><br>思路：本题是求所有员工的，因此可以考虑把薪水salaries表做两份，一份表示当前的，用来得到当前的薪水sa1.salary，另一份是入职时的，用来得到入职时候的薪水sa2.salary。当前这个条件可以设为<code>to_date=&#39;9999-01-01&#39;</code>，入职时候的条件可以设为<code>emp.hire_date = sa2.from_date</code>，那么涨幅情况就可以用当前薪水-入职时的薪水：<code>sa1.salary-sa2.salary</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp.emp_no, (sa1.salary-sa2.salary) <span class="keyword">AS</span> growth</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa1 </span><br><span class="line">                            <span class="keyword">ON</span> emp.emp_no = sa1.emp_no <span class="keyword">AND</span> sa1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">                      <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa2</span><br><span class="line">                            <span class="keyword">ON</span> emp.emp_no = sa2.emp_no <span class="keyword">AND</span> emp.hire_date = sa2.from_date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> growth <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p><strong>22.统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum</strong></p><p>思路：可以通过牛客网提交但是不周全的方案：三表联结，对部分分组，使用COUNT()统计次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dm.dept_no, dm.dept_name, <span class="keyword">COUNT</span>(salary) <span class="keyword">AS</span> <span class="keyword">sum</span></span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">ON</span> sa.emp_no = de.emp_no</span><br><span class="line">                    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> dm <span class="keyword">ON</span> dm.dept_no = de.dept_no</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dm.dept_no, dm.dept_name;</span><br></pre></td></tr></table></figure><p>和前面一道涨幅次数超过15次的题目很像，需要判定是涨的记录，而不是不变或降的记录。因此我这样写的，但是没有通过提交。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dm.dept_no, dm.dept_name, <span class="keyword">COUNT</span>(sa1.emp_no) <span class="keyword">AS</span> <span class="keyword">sum</span></span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa2 <span class="keyword">ON</span> sa1.emp_no = sa2.emp_no</span><br><span class="line">                     <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">ON</span> sa1.emp_no = de.emp_no</span><br><span class="line">                     <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> dm <span class="keyword">ON</span> dm.dept_no = de.dept_no</span><br><span class="line"><span class="keyword">WHERE</span> sa1.salary&lt;sa2.salary <span class="keyword">AND</span> sa1.to_date = sa2.from_date</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dm.dept_no, dm.dept_name;</span><br></pre></td></tr></table></figure><p><strong>23.对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列</strong></p><p>思路：如果支持窗口函数，根据相同的salary并列，排名为：1,2,2,3,3,3,4这样的顺序，那么可以使用dense_rank()窗口函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_no, salary, <span class="keyword">dense_rank</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> salaries </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>, emp_no <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>但是如果不支持窗口函数，要对工资进行1-N的排名，不用窗口函数对单个表显示排名，我一开始没有思路，，后来看了讨论区，理解了热评里的实现过程。把salary表做成两份，进行对比，一份是原表sa1，另一份是排名用的表sa2。如果某工资排名第五，那么就是说有比他工资高(<code>sa1.salary &lt;= sa2.salary</code>)的有4份，如果某工资排名第二，那么就是说有比他工资高有1份，可以使用COUNT()来统计比某份工资高的个数来当做排名。<br>还需要注意去重，比如s1.salary=94409时，有3个s2.salary（分别为94692,94409,94409）大于等于它，但由于94409重复，利用COUNT(DISTINCT s2.salary)去重可得工资为94409的rank等于2<br>最后排名时，工资salary逆序排，最大的为第一名，emp_no升序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sa1.emp_no, sa1.salary, <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> sa2.salary) <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa2 <span class="keyword">ON</span> sa2.emp_no = sa2.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> sa1.to_date = <span class="string">'9999-01-01'</span> <span class="keyword">AND</span> sa2.to_date = <span class="string">'9999-01-01'</span> </span><br><span class="line">      <span class="keyword">AND</span> sa1.salary &lt;= sa2.salary</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sa1.emp_no,sa1.salary</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sa1.salary <span class="keyword">DESC</span>, sa1.emp_no <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p><strong>24.获取所有非manager员工当前的薪水情况，给出dept_no、emp_no以及salary ，当前表示to_date=’9999-01-01’</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> de.dept_no, sa.emp_no, sa.salary</span><br><span class="line"><span class="keyword">FROM</span> dept_emp <span class="keyword">AS</span> de <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa </span><br><span class="line"><span class="keyword">ON</span> sa.emp_no = de.emp_no <span class="keyword">AND</span> sa.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">WHERE</span> de.emp_no <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> emp_no <span class="keyword">FROM</span> dept_manager <span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>25.获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to_date=’9999-01-01’,结果第一列给出员工的emp_no，第二列给出其manager的manager_no，第三列给出该员工当前的薪水emp_salary,第四列给该员工对应的manager当前的薪水manager_salary</strong></p><p>来自本题热评中wasrehpic的思路：<br>本题主要思想是创建两张表（一张记录当前所有员工的工资，另一张只记录部门经理的工资）进行比较，具体思路如下：<br>1、先用INNER JOIN连接salaries和demp_emp，建立当前所有员工的工资记录sde<br>2、再用INNER JOIN连接salaries和demp_manager，建立当前所有经理的工资记录sdm<br>3、最后用限制条件sem.dept_no = sdm.dept_no AND sem.salary &gt; sdm.salary找出同一部门中工资比经理高的员工，并根据题意依次输出emp_no、manager_no、emp_salary、manager_salary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sde.emp_no <span class="keyword">AS</span> emp_no, sdm.emp_no <span class="keyword">AS</span> manager_no, sde.salary <span class="keyword">AS</span> emp_salary, sdm.salary <span class="keyword">AS</span> manager_salary</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sa.salary, sa.emp_no, de.dept_no</span><br><span class="line">    <span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de</span><br><span class="line">    <span class="keyword">ON</span> sa.emp_no = de.emp_no <span class="keyword">AND</span> sa.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">    )<span class="keyword">AS</span> sde,</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> sa.salary, sa.emp_no, dm.dept_no</span><br><span class="line">        <span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_manager <span class="keyword">AS</span> dm</span><br><span class="line">        <span class="keyword">ON</span> sa.emp_no = dm.emp_no <span class="keyword">AND</span> sa.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">    ) <span class="keyword">AS</span> sdm</span><br><span class="line"><span class="keyword">WHERE</span> sde.dept_no = sdm.dept_no <span class="keyword">AND</span> sde.salary &gt; sdm.salary;</span><br></pre></td></tr></table></figure><p><strong>26.汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept_no、dept_name、其当前员工所有的title以及该类型title对应的数目count</strong><br>思路：首先需要对各个部门进行分组,分组后得到的每组是某个部门的员工。员工可能有多个类型的title，要统计某类型title对应的数目，还需要对title进行分组，这样两次分组后，只有同一部门且同一title的才是一个组。当前员工的当前title，员工和title都需要加to_date的限制。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> de.dept_no, dm.dept_name, t.title, <span class="keyword">COUNT</span>(t.title)</span><br><span class="line"><span class="keyword">FROM</span> departments <span class="keyword">AS</span> dm <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de </span><br><span class="line">                       <span class="keyword">ON</span> dm.dept_no = de.dept_no <span class="keyword">AND</span> de.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">                       <span class="keyword">INNER</span> <span class="keyword">JOIN</span> titles <span class="keyword">AS</span> t</span><br><span class="line">                       <span class="keyword">ON</span> de.emp_no = t.emp_no <span class="keyword">AND</span> t.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> de.dept_no, t.title;</span><br></pre></td></tr></table></figure><p><strong>27.给出每个员工每年薪水涨幅超过5000的员工编号emp_no、薪水变更开始日期from_date以及薪水涨幅值salary_growth，并按照salary_growth逆序排列。提示：在sqlite中获取datetime时间对应的年份函数为strftime(‘%Y’, to_date)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sa1.emp_no, sa2.from_date, (sa2.salary - sa1.salary) <span class="keyword">AS</span> salary_growth</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa2 <span class="keyword">ON</span> sa1.emp_no = sa2.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> sa2.salary-sa1.salary&gt;<span class="number">5000</span> </span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line">    strftime(<span class="string">'%Y'</span>, sa2.to_date) - strftime(<span class="string">'%Y'</span>, sa1.to_date) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">OR</span></span><br><span class="line">    strftime(<span class="string">'%Y'</span>, sa2.from_date) - strftime(<span class="string">'%Y'</span>, sa1.from_date) = <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary_growth <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><strong>28.查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量&gt;=5部</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.name,<span class="keyword">COUNT</span>(fc.film_id)</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> category_id</span><br><span class="line">        <span class="keyword">FROM</span> film_category</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id</span><br><span class="line">        <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(film_id) &gt;= <span class="number">5</span></span><br><span class="line">    ) <span class="keyword">AS</span> cc,</span><br><span class="line">    film <span class="keyword">AS</span> f,</span><br><span class="line">    <span class="keyword">category</span> <span class="keyword">AS</span> c,</span><br><span class="line">    film_category <span class="keyword">AS</span> fc</span><br><span class="line"><span class="keyword">WHERE</span> f.description <span class="keyword">LIKE</span> <span class="string">'%robot%'</span></span><br><span class="line"><span class="keyword">AND</span> c.category_id = fc.category_id</span><br><span class="line"><span class="keyword">AND</span> c.category_id = cc.category_id</span><br><span class="line"><span class="keyword">AND</span> fc.film_id = f.film_id;</span><br></pre></td></tr></table></figure><p><strong>29.使用join查询方式找出没有分类的电影id以及名称</strong><br>方法一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f.film_id, f.title</span><br><span class="line"><span class="keyword">FROM</span> film <span class="keyword">AS</span> f <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> film_category <span class="keyword">AS</span> fc</span><br><span class="line"><span class="keyword">ON</span> f.film_id = fc.film_id</span><br><span class="line"><span class="keyword">WHERE</span> fc.category_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> film.film_id, film.title</span><br><span class="line"><span class="keyword">FROM</span> film</span><br><span class="line"><span class="keyword">WHERE</span> film.film_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> film_id</span><br><span class="line">    <span class="keyword">FROM</span> film_category</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>30.使用子查询的方式找出属于Action分类的所有电影对应的title,description</strong></p><p>子查询方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title, description</span><br><span class="line"><span class="keyword">FROM</span> film</span><br><span class="line"><span class="keyword">WHERE</span> film_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> film_id</span><br><span class="line">    <span class="keyword">FROM</span> film_category</span><br><span class="line">    <span class="keyword">WHERE</span> category_id <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> category_id</span><br><span class="line">        <span class="keyword">FROM</span> <span class="keyword">category</span></span><br><span class="line">        <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Action'</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>非子查询方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f.title, f.description</span><br><span class="line"><span class="keyword">FROM</span> film <span class="keyword">AS</span> f <span class="keyword">INNER</span> <span class="keyword">JOIN</span> film_category <span class="keyword">AS</span> fc <span class="keyword">ON</span> f.film_id =fc.film_id</span><br><span class="line">               <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">category</span> <span class="keyword">AS</span> c <span class="keyword">ON</span> c.category_id = fc.category_id</span><br><span class="line"><span class="keyword">WHERE</span> c.name = <span class="string">'Action'</span>;</span><br></pre></td></tr></table></figure><p><strong>31.获取select * from employees对应的执行计划</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>32.将employees表的所有员工的last_name和first_name拼接起来作为Name，中间以一个空格区分</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// mysql写法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="keyword">concat</span>(last_name, <span class="string">" "</span>), first_name)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line">//sqlite写法</span><br><span class="line"><span class="keyword">SELECT</span> last_name||<span class="string">" "</span>||first_name <span class="keyword">AS</span> <span class="keyword">Name</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>33.创建一个actor表，包含如下列信息</strong></p><p>列表    类型    是否为NULL    含义<br>actor_id    smallint(5)    not null    主键id<br>first_name    varchar(45)    not null    名字<br>last_name    varchar(45)    not null    姓氏<br>last_update    timestamp    not null    最后更新时间，默认是系统的当前时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//sqlite写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> actor(</span><br><span class="line">    actor_id <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    first_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_update <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> (datetime(<span class="string">'now'</span>, <span class="string">'localtime'</span>)),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(actor_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//mysql写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> actor(</span><br><span class="line">    actor_id <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    first_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_update <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">current_timestamp</span> <span class="keyword">COMMENT</span> <span class="string">'最后更新时间，默认是系统的当前时间'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(actor_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>34.对于表actor批量插入如下数据</strong><br>actor_id    first_name    last_name    last_update<br>1    PENELOPE    GUINESS    2006-02-15 12:34:33<br>2    NICK    WAHLBERG    2006-02-15 12:34:33</p><p>注意插入字符串时用引号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'PENELOPE'</span>, <span class="string">'GUINESS'</span>, <span class="string">'2006-02-15 12:34:33'</span>),</span><br><span class="line">                        (<span class="number">2</span>, <span class="string">'NICK'</span>, <span class="string">'WAHLBERG'</span>, <span class="string">'2006-02-15 12:34:33'</span>);</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> actor(actor_id, first_name, last_name, last_update) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'PENELOPE'</span>, <span class="string">'GUINESS'</span>, <span class="string">'2006-02-15 12:34:33'</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">'NICK'</span>, <span class="string">'WAHLBERG'</span>, <span class="string">'2006-02-15 12:34:33'</span>);</span><br></pre></td></tr></table></figure><p><strong>35. 对于表actor批量插入如下数据,如果数据已经存在，请忽略，不使用replace操作</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//sqlite</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'ED'</span>, <span class="string">'CHASE'</span>, <span class="string">'2006-02-15 12:34:33'</span>);</span><br><span class="line"></span><br><span class="line">//mysql</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'ED'</span>, <span class="string">'CHASE'</span>, <span class="string">'2006-02-15 12:34:33'</span>);</span><br></pre></td></tr></table></figure><p><strong>36.对于如下表actor，其对应的数据为:</strong><br>actor_id    first_name    last_name    last_update<br>1    PENELOPE    GUINESS    2006-02-15 12:34:33<br>2    NICK    WAHLBERG    2006-02-15 12:34:33</p><p>创建一个actor_name表，将actor表中的所有first_name以及last_name导入改表。 actor_name表结构如下：<br>列表    类型    是否为NULL    含义<br>first_name    varchar(45)    not null    名字<br>last_name    varchar(45)    not null    姓氏</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> actor_name(</span><br><span class="line">    first_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_name  <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> actor_name (first_name, last_name) <span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> actor_name <span class="keyword">as</span> <span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> actor;</span><br></pre></td></tr></table></figure><p><strong>37. 对first_name创建唯一索引uniq_idx_firstname，对last_name创建普通索引idx_lastname</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> uniq_idx_firstname <span class="keyword">ON</span> actor(first_name);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_lastname <span class="keyword">ON</span> actor(last_name);</span><br></pre></td></tr></table></figure><p><strong>38.针对actor表创建视图actor_name_view，只包含first_name以及last_name两列，并对这两列重新命名，first_name为first_name_v，last_name修改为last_name_v</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> actor_name_view (first_name_v, last_name_v) <span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> first_name,last_name <span class="keyword">FROM</span> actor</span><br></pre></td></tr></table></figure><p><strong>39.针对salaries表emp_no字段创建索引idx_emp_no，查询emp_no为10005, 使用强制索引。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//SQLite</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> salaries INDEXED <span class="keyword">BY</span> idx_emp_no <span class="keyword">WHERE</span> emp_no = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line">//MySQL</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> salaries <span class="keyword">FORCE</span> <span class="keyword">INDEX</span> idx_emp_no <span class="keyword">WHERE</span> emp_no = <span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p><strong>40. 现在在last_update后面新增加一列名字为create_date, 类型为datetime, NOT NULL，默认值为’0000 00:00:00’</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> actor <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> create_date datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00'</span>;</span><br></pre></td></tr></table></figure><p><strong>41. 构造一个触发器audit_log，在向employees_test表中插入一条数据的时候，触发插入相关的数据到audit中。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> audit_log <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> employees_test</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">audit</span> <span class="keyword">VALUES</span> (NEW.ID, NEW.NAME);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><strong>42. 删除emp_no重复的记录，只保留最小的id对应的记录。</strong><br>思路：先把emp_no分组，在每组中找出最小的id，然后把非最小的都给删掉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> titles_test <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> titles_test <span class="keyword">GROUP</span> <span class="keyword">BY</span> emp_no</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>43. 将所有to_date为9999-01-01的全部更新为NULL,且 from_date更新为2001-01-01。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> titles_test <span class="keyword">SET</span> <span class="keyword">to_date</span> = <span class="literal">NULL</span>, from_date = <span class="string">'2001-01-01'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><p><strong>44. 将id=5以及emp_no=10001的行数据替换成id=5以及emp_no=10005,其他数据保持不变，使用replace实现。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> titles_test <span class="keyword">VALUES</span>(<span class="string">'5'</span>, <span class="string">'10005'</span>, <span class="string">'Senior Engineer'</span>, <span class="string">'1986-06-26'</span>, <span class="string">'9999-01-01'</span>);</span><br></pre></td></tr></table></figure><p><strong>45. 将titles_test表名修改为titles_2017。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> titles_test <span class="keyword">RENAME</span> <span class="keyword">TO</span> titles_2017;</span><br></pre></td></tr></table></figure><p><strong>46.在audit表上创建外键约束，其emp_no对应employees_test表的主键id。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//mysql</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">audit</span> <span class="keyword">ADD</span> FROEIGN <span class="keyword">KEY</span> (emp_no) REFERNCES employees_test (<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line">//通过测试</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">audit</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">audit</span>(</span><br><span class="line">    EMP_no <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    create_date datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(EMP_no) <span class="keyword">REFERENCES</span> employees_test(<span class="keyword">ID</span>));</span><br></pre></td></tr></table></figure><p><strong>47.存在如下的视图：create view emp_v as select * from employees where emp_no &gt;10005;如何获取emp_v和employees有相同的数据?</strong></p><p>INETRSECT和 UNION 指令类似，INTERSECT 也是对两个 SQL 语句所产生的结果做处理的。不同的地方是， UNION 基本上是一个 OR (如果这个值存在于第一句或是第二句，它就会被选出)，而 INTERSECT 则比较像 AND ( 这个值要存在于第一句和第二句才会被选出)。UNION 是联集，而 INTERSECT 是交集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">INTERSECT</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp_v;</span><br></pre></td></tr></table></figure><p><strong>48. 将所有获取奖金的员工当前的薪水增加10%。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salaries <span class="keyword">SET</span> salary = salary * <span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span> <span class="keyword">AND</span> emp_no <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> emp_no <span class="keyword">FROM</span> emp_bonus</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>49. 针对库中的所有表生成select count(*)对应的SQL语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//sqlite</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">"select count(*) from "</span> || <span class="keyword">name</span> || <span class="string">";"</span> <span class="keyword">AS</span> cnts</span><br><span class="line"><span class="keyword">FROM</span> sqlite_master <span class="keyword">WHERE</span> <span class="keyword">type</span> = <span class="string">'table'</span>;</span><br><span class="line"></span><br><span class="line">//mysql</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="string">'SELECT COUNT(*) FROM '</span>, new.table_name, <span class="string">';'</span>) <span class="keyword">AS</span> cnts</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> table_name</span><br><span class="line">    <span class="keyword">FROM</span> information_schema.tables</span><br><span class="line">    <span class="keyword">WHERE</span> table_schema = <span class="string">'sql_nowcoder'</span></span><br><span class="line">) <span class="keyword">AS</span> <span class="keyword">new</span>;</span><br></pre></td></tr></table></figure><p><strong>50.将employees表中的所有员工的last_name和first_name通过(‘)连接起来。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//sqlite</span><br><span class="line"><span class="keyword">SELECT</span> last_name || <span class="string">"'"</span> || first_name</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line">//mysql</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(last_name, <span class="string">"'"</span>, first_name)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>51.查找字符串’10,A,B’ 中逗号’,’出现的次数cnt。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">    (<span class="keyword">length</span>(<span class="string">"10,A,B"</span>) - <span class="keyword">length</span>(<span class="keyword">replace</span>(<span class="string">"10,A,B"</span>, <span class="string">","</span>, <span class="string">""</span>))) / <span class="keyword">length</span>(<span class="string">","</span>)</span><br><span class="line">) <span class="keyword">AS</span> cnt;</span><br></pre></td></tr></table></figure><p><strong>52.获取Employees中的first_name，查询按照first_name最后两个字母，按照升序进行排列</strong></p><p>substr(string,start,length)</p><ul><li>string 指定的要截取的字符串。</li><li>start 必需，规定在字符串的何处开始。正数 - 在字符串的指定位置开始，负数 - 在从字符串结尾的指定位置开始，0 - 在字符串中的第一个字符处开始。</li><li>length 可选，指定要截取的字符串长度，缺省时返回字符表达式的值结束前的全部字符。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//sqlite</span><br><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">substr</span>(first_name, <span class="keyword">length</span>(first_name)<span class="number">-1</span>, <span class="number">2</span>) <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line">//mysql</span><br><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">RIGHT</span>(first_name,<span class="number">2</span>) <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>53.按照dept_no进行汇总，属于同一个部门的emp_no按照逗号进行连接，结果给出dept_no以及连接出的结果employees</strong></p><p>思路: 聚合函数group_concat(X,Y)，其中X是要连接的字段，Y是连接时用的符号，可省略，默认为逗号。此函数必须与 GROUP BY 配合使用。此题以 dept_no 作为分组，将每个分组中不同的emp_no用逗号连接起来（即可省略Y）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> dept_no, <span class="keyword">group_concat</span>(emp_no) <span class="keyword">AS</span> employees</span><br><span class="line"><span class="keyword">FROM</span> dept_emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_no;</span><br></pre></td></tr></table></figure><p><strong>54.查找排除当前最大、最小salary之后的员工的平均工资avg_salary。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> salaries </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span> </span><br><span class="line"><span class="keyword">AND</span> salary <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> salaries <span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span> )</span><br><span class="line"><span class="keyword">AND</span> salary <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary) <span class="keyword">FROM</span> salaries <span class="keyword">WHERE</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span> );</span><br></pre></td></tr></table></figure><p><strong>55.分页查询employees表，每5行一页，返回第2页的数据</strong></p><p>思路：第2页的行数为第6-10行，可以用LIMIT 5, OFFSET 5</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">LIMIT</span> <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>56.获取所有员工的emp_no、部门编号dept_no以及对应的bonus类型btype和received ，没有分配具体的员工不显示</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> em.emp_no, de.dept_no, eb.btype, eb.recevied</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> em <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> de</span><br><span class="line"><span class="keyword">ON</span> em.emp_no = de.emp_no</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp_bonus <span class="keyword">AS</span> eb </span><br><span class="line"><span class="keyword">ON</span> de.emp_no = eb.emp_no;</span><br></pre></td></tr></table></figure><p><strong>57.获取employees中的行数据，且这些行也存在于emp_v中。注意不能使用intersect关键字</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp_v;</span><br></pre></td></tr></table></figure><p><strong>58.获取有奖金的员工相关信息。给出emp_no、first_name、last_name、奖金类型btype、对应的当前薪水情况salary以及奖金金额bonus。 bonus类型btype为1其奖金为薪水salary的10%，btype为2其奖金为薪水的20%，其他类型均为薪水的30%。 当前薪水表示to_date=’9999-01-01’</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp.emp_no, emp.first_name, emp.last_name, eb.btype, sa.salary,</span><br><span class="line">       (<span class="keyword">CASE</span> eb.btype</span><br><span class="line">             <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> sa.salary*<span class="number">0.1</span> </span><br><span class="line">             <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> sa.salary*<span class="number">0.2</span></span><br><span class="line">             <span class="keyword">ELSE</span> sa.salary*<span class="number">0.3</span></span><br><span class="line">        <span class="keyword">END</span>) <span class="keyword">AS</span> bonus</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> emp_bonus <span class="keyword">AS</span> eb <span class="keyword">ON</span> emp.emp_no = eb.emp_no</span><br><span class="line">                      <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa <span class="keyword">ON</span> emp.emp_no = sa.emp_no <span class="keyword">AND</span> sa.to_date=<span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><p><strong>59. 按照salary的累计和running_total，其中running_total为前两个员工的salary累计和，其他以此类推。 *</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//窗口函数方法</span><br><span class="line"><span class="keyword">SELECT</span> emp_no, salary, </span><br><span class="line">       <span class="keyword">SUM</span>(salary) <span class="keyword">OVER</span> (<span class="keyword">order</span> <span class="keyword">by</span> emp_no) <span class="keyword">AS</span> running_total</span><br><span class="line"><span class="keyword">FROM</span> salaries</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">to_date</span> = <span class="string">'9999-01-01'</span>;</span><br><span class="line"></span><br><span class="line">//联结表写法</span><br><span class="line"><span class="keyword">SELECT</span> sa2.emp_no, sa2.salary, <span class="keyword">SUM</span>(sa1.salary) <span class="keyword">AS</span> running_total</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> sa1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> salaries <span class="keyword">AS</span> sa2</span><br><span class="line"><span class="keyword">ON</span> sa1.emp_no &lt;= sa2.emp_no</span><br><span class="line"><span class="keyword">WHERE</span> sa1.to_date = <span class="string">"9999-01-01"</span> <span class="keyword">AND</span> sa2.to_date = <span class="string">"9999-01-01"</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sa2.emp_no;</span><br></pre></td></tr></table></figure><p><strong>60. 对于employees表中，给出奇数行的first_name</strong></p><p>思路：有多少个大于等于e2.first_name的记录的个数就是e2.first_name的行号，比如：</p><p>如果 e1.first_name 是第一位，那 e2.first_name 只有1个，就是 e1.first_name 本身，1%2=1；<br>如果 e1.first_name 排在第二位，就有它和比它小的这2个e2.first_name，2%2=0，所以不选，<br>以此类推。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.first_name <span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> employees e2</span><br><span class="line">    <span class="keyword">WHERE</span> e1.first_name &gt;= e2.first_name</span><br><span class="line">) % <span class="number">2</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容来自牛客网上数据库SQL实战，题目描述地址： &lt;a href=&quot;https://www.nowcoder.com/ta/sql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/sql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目顺序按照热度指数排序的，部分题目的思路来自该题目下热门讨论内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>sql聚合函数group_concat使用</title>
    <link href="http://huanyouchen.github.io/2019/09/09/how-to-use-sql-aggregation-function-group_concat/"/>
    <id>http://huanyouchen.github.io/2019/09/09/how-to-use-sql-aggregation-function-group_concat/</id>
    <published>2019-09-08T16:00:00.000Z</published>
    <updated>2019-09-09T13:17:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用场景介绍"><a href="#使用场景介绍" class="headerlink" title="使用场景介绍"></a>使用场景介绍</h4><p>按照部门编号dept_no进行汇总，属于同一个部门的员工编号emp_no通过逗号进行连接，结果给出dept_no以及连接出的结果employees</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br></pre></td></tr></table></figure><p>输出格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">| dept_no | employees         |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">| d001    | 10001,10002       |</span><br><span class="line">| d002    | 10006             |</span><br><span class="line">| d003    | 10005             |</span><br><span class="line">| d004    | 10003,10004       |</span><br><span class="line">| d005    | 10007,10008,10010 |</span><br><span class="line">| d006    | 10009,10010       |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>聚合函数group_concat(X,Y)，其中X是要连接的字段，Y是连接时用的符号，可省略，默认为逗号。此函数必须与 GROUP BY 配合使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> dept_no, <span class="keyword">group_concat</span>(emp_no) <span class="keyword">AS</span> employees</span><br><span class="line"><span class="keyword">FROM</span> dept_emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_no;</span><br></pre></td></tr></table></figure><p>如果不是用默认的逗号连接，而是其他符号，比如’&amp;’，那么可以修改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dept_no, <span class="keyword">group_concat</span>(emp_no separator <span class="string">'&amp;'</span>) <span class="keyword">AS</span> employees</span><br><span class="line"><span class="keyword">FROM</span> dept_emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_no;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">| dept_no | employees         |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br><span class="line">| d001    | 10001&amp;10002       |</span><br><span class="line">| d002    | 10006             |</span><br><span class="line">| d003    | 10005             |</span><br><span class="line">| d004    | 10003&amp;10004       |</span><br><span class="line">| d005    | 10007&amp;10008&amp;10010 |</span><br><span class="line">| d006    | 10009&amp;10010       |</span><br><span class="line">+<span class="comment">---------+-------------------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用场景介绍&quot;&gt;&lt;a href=&quot;#使用场景介绍&quot; class=&quot;headerlink&quot; title=&quot;使用场景介绍&quot;&gt;&lt;/a&gt;使用场景介绍&lt;/h4&gt;&lt;p&gt;按照部门编号dept_no进行汇总，属于同一个部门的员工编号emp_no通过逗号进行连接，结果给出dept_
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL插入数据时insert into、insert ignore into、replace into的区别</title>
    <link href="http://huanyouchen.github.io/2019/09/07/mysql-the-difference-between-insert-into-ignore-replace-into/"/>
    <id>http://huanyouchen.github.io/2019/09/07/mysql-the-difference-between-insert-into-ignore-replace-into/</id>
    <published>2019-09-06T16:00:00.000Z</published>
    <updated>2019-09-08T11:57:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>结论：</p><ul><li>insert into<br>在插入时，如果没有该数据，则插入成功；<br>在插入时，如果已经存在该数据，则会报错。</li><li>insert ignore into<br>在插入时，如果没有该数据，则插入成功；<br>在插入时，如果存在数据，则会忽略掉本次插入的数据，并且原数据不变。</li><li>replace into<br>在插入时，如果没有该数据，则直接插入新数据成功；<br>在插入时，如果存在该数据,则会先删掉原先的数据，并且插入新数据进行更新。</li></ul><p>对于某个表中是否已经存在该数据的判断依据：根据主键或者唯一索引判断。</p><a id="more"></a><hr><p>测试的表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> actor(</span><br><span class="line">    actor_id <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    first_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_name <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_update <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">current_timestamp</span> <span class="keyword">COMMENT</span> <span class="string">'最后更新时间，默认是系统的当前时间'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(actor_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>测试数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'PENELOPE'</span>, <span class="string">'GUINESS'</span>, <span class="string">'2006-02-15 12:34:33'</span>),</span><br><span class="line">                        (<span class="number">2</span>, <span class="string">'NICK'</span>, <span class="string">'WAHLBERG'</span>, <span class="string">'2006-02-15 12:34:33'</span>),</span><br><span class="line">                        (<span class="number">3</span>, <span class="string">'ED'</span>, <span class="string">'CHASE'</span>, <span class="keyword">default</span>);</span><br></pre></td></tr></table></figure><p>查看当前表的中内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM actor;</span><br><span class="line">+<span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line">| actor_id | first_name | last_name | last_update         |</span><br><span class="line">+<span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line">|        1 | PENELOPE   | GUINESS   | 2006-02-15 12:34:33 |</span><br><span class="line">|        2 | NICK       | WAHLBERG  | 2006-02-15 12:34:33 |</span><br><span class="line">|        3 | ED         | CHASE     | 2019-09-06 21:30:30 |</span><br><span class="line">+<span class="comment">----------+------------+-----------+---------------------+</span></span><br></pre></td></tr></table></figure><p><strong>insert into</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'huan'</span>, <span class="string">'youchen'</span>, <span class="keyword">default</span>);</span><br><span class="line">// 在插入时，如果已经存在数据，则会报错，报错信息：ERROR 1062 (23000): Duplicate entry '3' for key 'PRIMARY'</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">'huan'</span>, <span class="string">'youchen'</span>, <span class="keyword">default</span>);</span><br><span class="line">//在插入时，如果没有该数据，则插入成功</span><br></pre></td></tr></table></figure><p><strong>insert ignore into</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'huan'</span>, <span class="string">'youchen'</span>, <span class="keyword">default</span>);</span><br><span class="line">// 在插入时，如果存在数据，则会忽略掉本次插入，并且不会报错，会有警告Query OK, 0 rows affected, 1 warning</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">5</span>, <span class="string">'huan'</span>, <span class="string">'youchen'</span>, <span class="keyword">default</span>);</span><br><span class="line">//在插入时，如果没有该数据，则插入新数据成功</span><br></pre></td></tr></table></figure><p><strong>repalce into</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'huan'</span>, <span class="string">'youchen'</span>, <span class="keyword">default</span>);</span><br><span class="line">// 在插入时，如果存在数据,则会替换掉原先的数据，并插入新数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> actor <span class="keyword">VALUES</span>(<span class="number">6</span>, <span class="string">'huan'</span>, <span class="string">'youchen'</span>, <span class="keyword">default</span>);</span><br><span class="line">//在插入时，如果没有该数据，则插入新数据成功</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert into&lt;br&gt;在插入时，如果没有该数据，则插入成功；&lt;br&gt;在插入时，如果已经存在该数据，则会报错。&lt;/li&gt;
&lt;li&gt;insert ignore into&lt;br&gt;在插入时，如果没有该数据，则插入成功；&lt;br&gt;在插入时，如果存在数据，则会忽略掉本次插入的数据，并且原数据不变。&lt;/li&gt;
&lt;li&gt;replace into&lt;br&gt;在插入时，如果没有该数据，则直接插入新数据成功；&lt;br&gt;在插入时，如果存在该数据,则会先删掉原先的数据，并且插入新数据进行更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于某个表中是否已经存在该数据的判断依据：根据主键或者唯一索引判断。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://huanyouchen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu18.04系统下将MySQL版本从5.7升级到8.0</title>
    <link href="http://huanyouchen.github.io/2019/08/08/Upgrade-MySQL-version-from-5.7-to-8.0-under-ubuntu18.04/"/>
    <id>http://huanyouchen.github.io/2019/08/08/Upgrade-MySQL-version-from-5.7-to-8.0-under-ubuntu18.04/</id>
    <published>2019-08-07T16:00:00.000Z</published>
    <updated>2019-08-08T03:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的系统：Ubuntu 18.04<br>我的原来的MySQL版本：Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)</p><p>本文升级过程参考自：<br><a href="https://blog.iphpo.com/blog/2019/05/ubuntu-mysql-5.7-%E7%84%A1%E7%97%9B%E5%8D%87%E7%B4%9A%E5%88%B0-8.0/" target="_blank" rel="noopener">[Ubuntu] MySQL 5.7 無痛升級到 8.0</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/upgrade-prerequisites.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/upgrade-prerequisites.html</a><br><a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/</a></p><h3 id="1-升级前的检查准备"><a href="#1-升级前的检查准备" class="headerlink" title="1 升级前的检查准备"></a>1 升级前的检查准备</h3><p>在终端运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlcheck -u root -p --all-databases --check-upgrade</span><br></pre></td></tr></table></figure><p>返回结果如果全部都是OK, 就表示检查没问题，进入下一步。如果有错误，看这里：<a href="https://dev.mysql.com/doc/refman/8.0/en/upgrade-prerequisites.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/upgrade-prerequisites.html</a></p><h3 id="2-备份"><a href="#2-备份" class="headerlink" title="2 备份"></a>2 备份</h3><p><strong>备份数据库</strong><br>之前都没有使用过备份数据库，参考的这个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql-backup</span><br><span class="line">cd mysql-backup</span><br><span class="line">mysqldump --all-databases --single-transaction --quick --lock-tables&#x3D;false &gt; full-backup-$(date +%F).sql -u root -p</span><br></pre></td></tr></table></figure><p>该命令各个参数解释：</p><p>–all-databases ： 表示导出全部数据库</p><p> –single-transaction ： 这个不太懂，网上的解释也没看明白，需要补充补充数据库基础了。。</p><p>–quick ： 导出时不会将数据加载到缓存，而是直接输出。默认就是启用状态。可以使用–skip-quick 取消该选项。</p><p>–lock-tables：开始导出前，锁定所有表。当导出多个数据库时，–lock-tables分别为每个数据库锁定表。</p><p>$(date+%F)表示获取当前时间，在Linux Shell中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date       //获取时间</span><br><span class="line">2019年 08月 08日 星期四 11:40:20 CST</span><br><span class="line">date +%F   //获取日期</span><br><span class="line">2019-08-08</span><br><span class="line">date +%s   //获取时间戳</span><br><span class="line">1565235736</span><br></pre></td></tr></table></figure><p>–user, –u指定连接的用户名</p><p>–password, –p连接数据库密码</p><p><strong>备份MySQL设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mysql-backup</span><br><span class="line">sudo tar zcvf mysql_config.tar.gz /etc/mysql/</span><br></pre></td></tr></table></figure><h3 id="3-添加MySQL-APT"><a href="#3-添加MySQL-APT" class="headerlink" title="3 添加MySQL APT"></a>3 添加MySQL APT</h3><p>下载mysql-apt-config_0.8.13-1_all.deb：<a href="https://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/apt/</a></p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="4-安装新版的MySQL"><a href="#4-安装新版的MySQL" class="headerlink" title="4 安装新版的MySQL"></a>4 安装新版的MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop  # 先停了MySQL service</span><br><span class="line"></span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line">sudo service mysql start  # 开启MySQL service</span><br></pre></td></tr></table></figure><p>最后检查下升级后的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql  Ver 8.0.17 for Linux on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure><p>已经升级成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的系统：Ubuntu 18.04&lt;br&gt;我的原来的MySQL版本：Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)&lt;/p&gt;
&lt;p&gt;本文升级过程参考自：&lt;br&gt;&lt;a href=&quot;https://blog.iphpo.com/b
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://huanyouchen.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://huanyouchen.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>git错误The TLS connection was non-properly terminated解决</title>
    <link href="http://huanyouchen.github.io/2019/08/03/git-error-The-TLS-connection-was-non-properly-terminated/"/>
    <id>http://huanyouchen.github.io/2019/08/03/git-error-The-TLS-connection-was-non-properly-terminated/</id>
    <published>2019-08-02T16:00:00.000Z</published>
    <updated>2019-11-24T03:42:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在执行<code>hexo d</code>发布文章时候，出现错误:<br>error fatal: unable to access ‘<a href="https://github.com/huanyouchen/huanyouchen.github.io.git&#39;" target="_blank" rel="noopener">https://github.com/huanyouchen/huanyouchen.github.io.git&#39;</a>: gnutls_handshake() failed: The TLS connection was non-properly terminated.</p><p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2019-8-3-git-error-gnutls_handshake.png" alt="git-error"></p><a id="more"></a><p>具体原因还不清楚，搜索一番后看到好几个都是用openssl解决的，于是按着试试，果然也解决了。方法主要参考这两篇文章:<br><a href="https://www.bbsmax.com/A/o75NXyQKzW/" target="_blank" rel="noopener">使用 Git 同步时出现ssl错误</a><br><a href="https://datawine.github.io/2018/10/23/git-%E6%97%A0%E6%B3%95clone%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/" target="_blank" rel="noopener">git 无法clone踩坑实录</a><br>在试的过程中我也遇到了另外两个问题，因此也记录一下。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>安装编译环境：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential fakeroot dpkg-dev libcurl4-openssl-dev</span><br><span class="line">sudo apt-get build-dep git</span><br><span class="line">mkdir ~/git-openssl</span><br><span class="line">cd ~/git-openssl</span><br><span class="line">sudo apt-get source git</span><br><span class="line">dpkg-source -x git_2.17.1-1ubuntu0.4.dsc   # git版本不同注意根据自己的更改</span><br></pre></td></tr></table></figure><p>在第三个命令执行时，我遇到了一个错误，提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正在读取软件包列表... 完成</span><br><span class="line">E: 您必须在 sources.list 中指定代码源(deb-src) URI</span><br></pre></td></tr></table></figure><p>解决方法<a href="https://blog.csdn.net/Zhanganliu/article/details/86592524" target="_blank" rel="noopener">参考</a>：打开Ubuntu中的“软件和更新”-》Ubuntu软件-》把“可从互联网下载”中的最后一个：源代码勾选上。然后就可以顺利执行第三步了。</p><p><strong>使用sed命令，把debian/control中所有的libcurl4-gnutls-dev改为libcurl4-openssl-dev</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd git-2.17.1&#x2F;   # 进入目录</span><br><span class="line">sudo sed -i &#39;s&#x2F;libcurl4-gnutls-dev&#x2F;libcurl4-openssl-dev&#x2F;g&#39; debian&#x2F;control</span><br></pre></td></tr></table></figure><p><strong>删除 debian/rules 中的TEST=test行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim debian&#x2F;rules </span><br><span class="line"></span><br><span class="line">原内容中的TEST&#x3D;test行如下：</span><br><span class="line"></span><br><span class="line">LDFLAGS :&#x3D;$(shell dpkg-buildflags --get LDFLAGS)</span><br><span class="line">TEST &#x3D;test</span><br><span class="line">OPTS &#x3D;NO_OPENSSL&#x3D;1 prefix&#x3D;&#x2F;usr gitexecdir&#x3D;&#x2F;usr&#x2F;lib&#x2F;git-core \</span><br><span class="line"></span><br><span class="line">将其中的TEST&#x3D;test行删掉</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurl4-openssl-dev</span><br><span class="line">sudo dpkg-buildpackage -rfakeroot -b -uc -us  # add &quot;-uc -us&quot; to avoid error &quot;gpg: No secret key&quot;</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i ..&#x2F;git_2.17.1-1ubuntu0.4_amd64.deb   #注意是在上一级目录</span><br></pre></td></tr></table></figure><p>做好以上的这几步，网上的教程就结束了，我本来以为就已经弄好了，然后再次hexo d的时候，还是会出错，但是这次错误变成了SSL_ERROR_SYSCALL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;huanyouchen&#x2F;huanyouchen.github.</span><br><span class="line">io.git&#39;:LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</span><br></pre></td></tr></table></figure><p>然后再搜这个SSL_ERROR_SYSCALL的解决方法时候，网上的各种说法都有，，然后开始自己摸索，不一定适合其他人，但是我的问题最终解决了。</p><p>思路来源：<br><a href="https://github.com/angular/angular-phonecat/issues/212" target="_blank" rel="noopener">https://github.com/angular/angular-phonecat/issues/212</a><br><a href="https://segmentfault.com/q/1010000013461740" target="_blank" rel="noopener">https://segmentfault.com/q/1010000013461740</a></p><p>首先设了代理(不知道这一步有没有用，当时试了一下)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>然后到GitHub网站上，把我的SSH Keys设置那里，加入了我的id_rsa.pub，然后<code>ssh -T git@github.com</code>验证一下，提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi huanyouchen! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>再然后进入hexo网站的根目录，找到hexo的配置文件<code>_config.yml</code>，在配置文件中的deploy那一项从原来HTTPS的改成SSH的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  #repo: https:&#x2F;&#x2F;github.com&#x2F;huanyouchen&#x2F;huanyouchen.github.io.git</span><br><span class="line">  repo: git@github.com:huanyouchen&#x2F;huanyouchen.github.io.git</span><br><span class="line">  brance: master</span><br></pre></td></tr></table></figure><p>现在终于成功了。</p><p><img src="https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2019-8-3-git-error-solve.png" alt="git-error-solve"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;在执行&lt;code&gt;hexo d&lt;/code&gt;发布文章时候，出现错误:&lt;br&gt;error fatal: unable to access ‘&lt;a href=&quot;https://github.com/huanyouchen/huanyouchen.github.io.git&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/huanyouchen/huanyouchen.github.io.git&amp;#39;&lt;/a&gt;: gnutls_handshake() failed: The TLS connection was non-properly terminated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://huanyouchen-1252081928.cos.ap-shanghai.myqcloud.com/2019-8-3-git-error-gnutls_handshake.png&quot; alt=&quot;git-error&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="踩坑记录" scheme="http://huanyouchen.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="git" scheme="http://huanyouchen.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>转载-给hexo的maupassant主题添加tags页面</title>
    <link href="http://huanyouchen.github.io/2019/03/22/add-tags-pages-to-hexo-maupassant-theme/"/>
    <id>http://huanyouchen.github.io/2019/03/22/add-tags-pages-to-hexo-maupassant-theme/</id>
    <published>2019-03-21T16:00:00.000Z</published>
    <updated>2019-03-23T08:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注：本文为转载，原文作者hushhw，原文链接：<a href="https://hushhw.cn/posts/tool/5e14d0e.html" target="_blank" rel="noopener">https://hushhw.cn/posts/tool/5e14d0e.html</a> 感谢原作者提供的方法，文章版权归原作者所有。</strong></p><p>博客使用的是maupassant主题， 原本设计的文章标签是放在右边侧边栏的，但是当文章写多了以后，标签也会很多，侧边栏的标签区域就显得很多很乱。为了美观些，对原主题修改一下，重新建立一个标签页面专门展示标签，然后把侧边栏的标签区域删掉。</p><a id="more"></a><p>在本地hexo目录的<code>source</code>文件夹下，新建tags文件夹，进入tags文件夹，并新建index.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd hexo&#x2F;blog&#x2F;source&#x2F;</span><br><span class="line">mkdir tags</span><br><span class="line">touch index.md</span><br></pre></td></tr></table></figure><p>打开index.md，在该文件中写入front-matter，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: tagcloud</span><br><span class="line">title: 标签列表</span><br><span class="line">type: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>进入maupassant主题目录下的<code>layout</code>文件夹，新建<code>tagcloud.pug</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexo&#x2F;blog&#x2F;themes&#x2F;maupassant&#x2F;layout&#x2F;</span><br><span class="line">touch tagcloud.pug</span><br></pre></td></tr></table></figure><p>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">extends base</span><br><span class="line">block title</span><br><span class="line">  title&#x3D; page.title + &#39; | &#39; + config.title</span><br><span class="line">block content</span><br><span class="line">  .post</span><br><span class="line">    .post-content</span><br><span class="line">      .tagcloud</span><br><span class="line">        for tag in site.tags.toArray()</span><br><span class="line">          a( href&#x3D;&#39;&#x2F;tags&#x2F;#&#39; + tag.name title&#x3D;tag.name rel&#x3D; tag.length ) #&#123;tag.name&#125;</span><br><span class="line"></span><br><span class="line">      for tag in site.tags.toArray()</span><br><span class="line">        .one-tag-list</span><br><span class="line">          span(class&#x3D;&#39;fa fa-tag tag-name&#39; id&#x3D;tag.name) </span><br><span class="line">            span(class&#x3D;&quot;tag-text&quot;) #&#123;tag.name&#125;</span><br><span class="line">          for post in tag.posts.toArray()</span><br><span class="line">            .post-preview</span><br><span class="line">              a( href&#x3D;config.root + post.path title&#x3D;post.title ) #&#123;post.title&#125;</span><br><span class="line"></span><br><span class="line">  if page.donate</span><br><span class="line">      iframe(src&#x3D;&#39;&#x2F;donate&#x2F;?AliPayQR&#x3D;&#39; + theme.donate.alipay_qr + &#39;&amp;WeChatQR&#x3D;&#39; + theme.donate.wechat_qr + &#39;&amp;GitHub&#x3D;&#39; + theme.donate.github + &#39;&amp;BTCQR&#x3D;&#39; + theme.donate.btc_qr + &#39;&amp;BTCKEY&#x3D;&#39;+ theme.donate.btc_key + &#39;&amp;PayPal&#x3D;&#39; + theme.donate.paypal_url, style&#x3D;&#39;overflow-x:hidden; overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;&#39;, frameborder&#x3D;&#39;0&#39;, scrolling&#x3D;&#39;no&#39;)</span><br><span class="line">  if page.comments</span><br><span class="line">    include _partial&#x2F;comments.pug</span><br></pre></td></tr></table></figure><p>添加样式，在hexo/blog/themes/maupassant/source/css文件夹下找到<code>style.scss</code>， 在<code>.post -&gt; .post-content</code>中，添加.tagcloud和.one-tag-list中的scss代码,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.post &#123;</span><br><span class="line"></span><br><span class="line">    .post-content &#123;</span><br><span class="line">        </span><br><span class="line">        .tagcloud &#123;</span><br><span class="line">            margin: 0 0 30px 0;</span><br><span class="line">            a &#123;</span><br><span class="line">                padding:0px 5px;</span><br><span class="line">                margin:3px;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                border: 1px solid rgba(99, 96, 96, 0.8);</span><br><span class="line">                 border-radius: 999em;</span><br><span class="line">                 color: #aaa;</span><br><span class="line">                 &amp;:hover &#123;</span><br><span class="line">                    color: #fff;</span><br><span class="line">                     border: 1px solid #1a8d76;</span><br><span class="line">                     background: #1a8a76;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .one-tag-list &#123;</span><br><span class="line">            margin: 30px 0;</span><br><span class="line">            .tag-name &#123;</span><br><span class="line">                .tag-text&#123;</span><br><span class="line">                    margin-left: 5px;</span><br><span class="line">                     font-size: 16px;</span><br><span class="line">                     font-weight: bold;</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开主题的_config.yml文件，在menu菜单中，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line"></span><br><span class="line">  - page: tags</span><br><span class="line">    directory: tags&#x2F;</span><br><span class="line">    icon: fa-tags</span><br></pre></td></tr></table></figure><p>并且在widgets中，注释掉右边侧边栏的tags挂件：</p><p>widgets:<br>  # - tag</p><p>现在全部修改完成了，用<code>hexo g</code>生成tags页面，然后用<code>hexo s</code>本地预览下，如果顺利修改完成，最后用<code>hexo d</code>发布。</p><p>原文作者：hushhw<br>原文链接：<a href="https://hushhw.cn/posts/tool/5e14d0e.html" target="_blank" rel="noopener">https://hushhw.cn/posts/tool/5e14d0e.html</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;注：本文为转载，原文作者hushhw，原文链接：&lt;a href=&quot;https://hushhw.cn/posts/tool/5e14d0e.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hushhw.cn/posts/tool/5e14d0e.html&lt;/a&gt; 感谢原作者提供的方法，文章版权归原作者所有。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;博客使用的是maupassant主题， 原本设计的文章标签是放在右边侧边栏的，但是当文章写多了以后，标签也会很多，侧边栏的标签区域就显得很多很乱。为了美观些，对原主题修改一下，重新建立一个标签页面专门展示标签，然后把侧边栏的标签区域删掉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="踩坑记录" scheme="http://huanyouchen.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="hexo" scheme="http://huanyouchen.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
